//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <AtriusLocation/NSCoding-Protocol.h>
#import <AtriusLocation/NSCopying-Protocol.h>

@class NSArray;

@interface Matrix : NSObject <NSCoding, NSCopying>
{
    double *matrix;
    int rows;
    int columns;
    _Bool freeData;
}

+ (id)identityOfRows:(int)arg1 columns:(int)arg2;
+ (id)matrixFromMatrix:(id)arg1;
+ (id)matrixFromNSArray:(id)arg1 rows:(int)arg2 columns:(int)arg3;
+ (id)matrixFromArray:(double *)arg1 rows:(int)arg2 columns:(int)arg3 mode:(int)arg4;
+ (id)matrixFromArray:(double *)arg1 rows:(int)arg2 columns:(int)arg3;
+ (id)matrixOfRows:(int)arg1 columns:(int)arg2 valuesInDiagonal:(double *)arg3 value:(double)arg4;
+ (id)matrixOfRows:(int)arg1 columns:(int)arg2 valueInDiagonal:(double)arg3 value:(double)arg4;
+ (id)matrixOfRows:(int)arg1 columns:(int)arg2 value:(double)arg3;
+ (id)dirtyMatrixOfRows:(int)arg1 columns:(int)arg2;
+ (id)onesLike:(id)arg1;
+ (id)matrixLike:(id)arg1;
+ (id)matrixOfRows:(int)arg1 columns:(int)arg2;
+ (id)haltonSequenceWithLowerBound:(id)arg1 upperBound:(id)arg2 count:(int)arg3;
+ (id)sobolSequenceLowerBound:(id)arg1 upperBound:(id)arg2 count:(int)arg3;
+ (id)normalRandomMean:(id)arg1 variance:(id)arg2 count:(int)arg3;
+ (id)normalRandomRows:(int)arg1 columns:(int)arg2 mean:(double)arg3 variance:(double)arg4;
+ (id)normalRandomMean:(id)arg1 variance:(id)arg2;
+ (id)uniformRandomLowerBound:(id)arg1 upperBound:(id)arg2 count:(int)arg3;
+ (id)uniformRandomRows:(int)arg1 columns:(int)arg2 domain:(struct _YCDomain)arg3;
+ (id)uniformRandomLowerBound:(id)arg1 upperBound:(id)arg2;
+ (id)matrixFromColumns:(id)arg1;
+ (id)matrixFromRows:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)description;
- (_Bool)isEqualToMatrix:(id)arg1 tolerance:(double)arg2;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly) _Bool isSquareMatrix;
@property(readonly) double max;
@property(readonly) double min;
@property(readonly) double product;
@property(readonly) double sum;
@property(readonly) unsigned long long count;
@property(readonly) int columns;
@property(readonly) int rows;
@property(readonly) Matrix *diagonal;
@property(readonly) NSArray *numberArray;
@property(readonly) double *arrayCopy;
@property(readonly) double *array;
- (id)matrixByUnitizing;
- (double)dotWith:(id)arg1;
- (double)trace;
- (void)setDiagonalTo:(double)arg1;
- (void)elementWiseDivide:(id)arg1;
- (void)elementWiseMultiply:(id)arg1;
- (void)absolute;
- (void)square;
- (void)negate;
- (void)multiplyWithScalar:(double)arg1;
- (void)subtract:(id)arg1;
- (void)add:(id)arg1;
- (id)matrixByElementWisDivideBy:(id)arg1;
- (id)matrixByElementWiseMultiplyWith:(id)arg1;
- (id)matrixByTransposing;
- (id)matrixByAbsolute;
- (id)matrixBySquaring;
- (id)matrixByNegating;
- (id)matrixByMultiplyingWithScalar:(double)arg1 AndAdding:(id)arg2;
- (id)matrixByMultiplyingWithScalar:(double)arg1;
- (id)matrixByTransposing:(_Bool)arg1 TransposingRight:(_Bool)arg2 MultiplyWithRight:(id)arg3 Factor:(double)arg4 Adding:(id)arg5;
- (id)matrixByTransposingAndMultiplyingWithLeft:(id)arg1;
- (id)matrixByTransposingAndMultiplyingWithRight:(id)arg1;
- (id)matrixByMultiplyingWithRight:(id)arg1 AndFactor:(double)arg2;
- (id)matrixByMultiplyingWithRight:(id)arg1 AndAdding:(id)arg2;
- (id)matrixByMultiplyingWithRight:(id)arg1 AndTransposing:(_Bool)arg2;
- (id)matrixByMultiplyingWithRight:(id)arg1;
- (id)matrixBySubtracting:(id)arg1;
- (id)matrixByAdding:(id)arg1;
- (void)incrementAll:(double)arg1;
- (void)i:(int)arg1 j:(int)arg2 increment:(double)arg3;
- (void)i:(int)arg1 j:(int)arg2 set:(double)arg3;
- (void)setValue:(double)arg1 row:(int)arg2 column:(int)arg3;
- (double)i:(int)arg1 j:(int)arg2;
- (double)valueAtRow:(int)arg1 column:(int)arg2;
- (void)bernoulli;
- (double)quadranceTo:(id)arg1;
- (double)euclideanDistanceTo:(id)arg1;
- (void)applyFunction:(CDUnknownBlockType)arg1;
- (id)matrixByApplyingFunction:(CDUnknownBlockType)arg1;
- (id)maximumsOfColumns;
- (id)minimumsOfColumns;
- (id)maximumsOfRows;
- (id)minimumsOfRows;
- (id)sampleVariancesOfColumns;
- (id)sampleVariancesOfRows;
- (id)variancesOfColumns;
- (id)variancesOfRows;
- (id)meansOfColumns;
- (id)meansOfRows;
- (id)sumsOfColumns;
- (id)sumsOfRows;
- (double)determinant;
- (id)eigenvectorsAndEigenvalues;
- (id)realEigenvalues;
- (id)matrixByCholesky;
- (void)cholesky;
- (id)solve:(id)arg1;
- (id)SVD;
- (id)pseudoInverse;
- (id)columnWiseInverseMapFromDomain:(struct _YCDomain)arg1 basis:(short)arg2;
- (id)columnWiseMapToDomain:(struct _YCDomain)arg1 basis:(short)arg2;
- (id)matrixByColumnWiseMapUsing:(id)arg1;
- (id)rowWiseInverseMapFromDomain:(struct _YCDomain)arg1 basis:(short)arg2;
- (id)rowWiseMapToDomain:(struct _YCDomain)arg1 basis:(short)arg2;
- (id)matrixByRowWiseMapUsing:(id)arg1;
- (id)matrixBySamplingColumns:(unsigned long long)arg1 replacement:(_Bool)arg2;
- (id)matrixBySamplingRows:(unsigned long long)arg1 replacement:(_Bool)arg2;
- (void)shuffleColumns;
- (id)matrixByShufflingColumns;
- (void)shuffleRows;
- (id)matrixByShufflingRows;
- (void)applyMatrix:(id)arg1 i:(int)arg2 j:(int)arg3;
- (id)appendValueAsRow:(double)arg1;
- (id)removeColumn:(int)arg1;
- (id)removeRow:(int)arg1;
- (id)appendColumn:(id)arg1;
- (id)appendRow:(id)arg1;
- (void)divideColumn:(id)arg1;
- (void)multiplyColumn:(id)arg1;
- (void)subtractColumn:(id)arg1;
- (void)addColumn:(id)arg1;
- (void)divideRow:(id)arg1;
- (void)multiplyRow:(id)arg1;
- (void)subtractRow:(id)arg1;
- (void)addRow:(id)arg1;
- (id)matrixWithColumnsInRange:(struct _NSRange)arg1;
- (id)matrixWithRowsInRange:(struct _NSRange)arg1;
- (id)matrixByMultiplyingWithColumn:(id)arg1;
- (id)matrixBySubtractingColumn:(id)arg1;
- (id)matrixByAddingColumn:(id)arg1;
- (id)matrixByMultiplyingWithRow:(id)arg1;
- (id)matrixBySubtractingRow:(id)arg1;
- (id)matrixByAddingRow:(id)arg1;
- (id)columnWisePartition:(int)arg1;
- (id)columnWiseSplitAtIndexes:(id)arg1;
- (id)columnsAsNSArray;
- (void)setColumn:(int)arg1 value:(id)arg2;
- (id)columns:(id)arg1;
- (id)column:(int)arg1;
- (id)rowWisePartition:(int)arg1;
- (id)rowWiseSplitAtIndexes:(id)arg1;
- (id)rowsAsNSArray;
- (void)setRow:(int)arg1 value:(id)arg2;
- (id)rows:(id)arg1;
- (id)rowReferenceVector:(int)arg1;
- (id)rowReference:(int)arg1;
- (id)row:(int)arg1;
- (void)copyValuesFrom:(id)arg1;

@end

