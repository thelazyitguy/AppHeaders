//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSArray, NSMutableDictionary, NSNumber, NSString;
@protocol PlaylistBuilderMovieHeaderDataProvider, StartPlayEventReporterDelegate;

@interface PlaylistParameter : NSObject
{
    _Bool _useFirstCdn;
    _Bool _useFirstTwoCdns;
    _Bool _useOneVideoBitrate;
    _Bool _useOneAudioBitrate;
    _Bool _useOneAudioCodec;
    _Bool _useOneVideoTrack;
    _Bool _useH264Only;
    _Bool _useH265SdrOnly;
    _Bool _useH265HdrOnly;
    _Bool _useAacOnly;
    _Bool _useEc3Only;
    _Bool _isLive;
    _Bool _movingSlidingWindow4Live;
    _Bool _wifi;
    _Bool _external;
    _Bool _offline;
    _Bool _assistiveAudioEnabled;
    _Bool _hevcSupported;
    _Bool _dvSupported;
    _Bool _urlVariableSupported;
    _Bool _playback1440Supported;
    _Bool _fixForDifferentDurationIssue;
    _Bool _branchingStreamSelectionEnabled;
    _Bool _iframeEnabled;
    _Bool _useStreamFeasibilityForInitialBitrateSelection;
    _Bool _treatAllAACAs96KGroup;
    _Bool _treatAllStereoAsOneGroup;
    _Bool _stableReditionIdEnabled;
    _Bool _useHLSVariantScore;
    _Bool _fillMissingAudioLanguage;
    _Bool _filterByVideoToAudioRatio;
    _Bool _wantsAccurateInitialAudioInformation;
    _Bool _oneStepLowerFirstBitrateForAL1;
    _Bool _sdr264First;
    _Bool _putAllFirstVideoStreamsUpfront;
    _Bool _useReverseLoop;
    unsigned short _proxyServerPort;
    float _minimumVideoToAudioRatio;
    float _maximumVideoToAudioRatio;
    float _moviePeakBandwidthMultiplier;
    float _movieNominalToPeakBandwidthMultiplier;
    float _movieIFrameBandwidthMultiplier;
    unsigned int _minInitVideoBitrate;
    unsigned int _maxInitVideoBitrate;
    unsigned int _throughputKbps;
    unsigned int _cdnThroughputKbps;
    unsigned int _videoHeightCap;
    unsigned int _maxBufferingTimeMs;
    unsigned int _minPrebufferSize;
    float _assumedMediaRateForPrebuffering;
    NSString *_playbackId;
    long long _liveBufferDuration;
    NSString *_deviceModel;
    NSString *_protocolPrefix;
    NSString *_cdnPrefix;
    NSString *_fpsappcertVer;
    long long _hlsVersion;
    NSMutableDictionary *_videoKbpsRecord;
    NSNumber *_totalPlaylistTimeNumber;
    NSString *_dateTimeTag;
    long long _maxSegmentInSecond;
    long long _audioDuration;
    long long _videoDuration;
    long long _movieDuration;
    long long _initialVmafClamp;
    NSArray *_videoLanguageOptions;
    id <PlaylistBuilderMovieHeaderDataProvider> _movieHeaderDownloader;
    id <StartPlayEventReporterDelegate> _startPlayEventReporter;
}

- (void).cxx_destruct;
@property(nonatomic) __weak id <StartPlayEventReporterDelegate> startPlayEventReporter; // @synthesize startPlayEventReporter=_startPlayEventReporter;
@property(nonatomic) __weak id <PlaylistBuilderMovieHeaderDataProvider> movieHeaderDownloader; // @synthesize movieHeaderDownloader=_movieHeaderDownloader;
@property(nonatomic) unsigned short proxyServerPort; // @synthesize proxyServerPort=_proxyServerPort;
@property(retain, nonatomic) NSArray *videoLanguageOptions; // @synthesize videoLanguageOptions=_videoLanguageOptions;
@property(nonatomic) long long initialVmafClamp; // @synthesize initialVmafClamp=_initialVmafClamp;
@property(nonatomic) long long movieDuration; // @synthesize movieDuration=_movieDuration;
@property(nonatomic) long long videoDuration; // @synthesize videoDuration=_videoDuration;
@property(nonatomic) long long audioDuration; // @synthesize audioDuration=_audioDuration;
@property(nonatomic) long long maxSegmentInSecond; // @synthesize maxSegmentInSecond=_maxSegmentInSecond;
@property(retain, nonatomic) NSString *dateTimeTag; // @synthesize dateTimeTag=_dateTimeTag;
@property(retain, nonatomic) NSNumber *totalPlaylistTimeNumber; // @synthesize totalPlaylistTimeNumber=_totalPlaylistTimeNumber;
@property(nonatomic) _Bool useReverseLoop; // @synthesize useReverseLoop=_useReverseLoop;
@property(nonatomic) _Bool putAllFirstVideoStreamsUpfront; // @synthesize putAllFirstVideoStreamsUpfront=_putAllFirstVideoStreamsUpfront;
@property(nonatomic) _Bool sdr264First; // @synthesize sdr264First=_sdr264First;
@property(nonatomic) _Bool oneStepLowerFirstBitrateForAL1; // @synthesize oneStepLowerFirstBitrateForAL1=_oneStepLowerFirstBitrateForAL1;
@property(retain, nonatomic) NSMutableDictionary *videoKbpsRecord; // @synthesize videoKbpsRecord=_videoKbpsRecord;
@property(nonatomic) float assumedMediaRateForPrebuffering; // @synthesize assumedMediaRateForPrebuffering=_assumedMediaRateForPrebuffering;
@property(nonatomic) unsigned int minPrebufferSize; // @synthesize minPrebufferSize=_minPrebufferSize;
@property(nonatomic) unsigned int maxBufferingTimeMs; // @synthesize maxBufferingTimeMs=_maxBufferingTimeMs;
@property(nonatomic) unsigned int videoHeightCap; // @synthesize videoHeightCap=_videoHeightCap;
@property(nonatomic) unsigned int cdnThroughputKbps; // @synthesize cdnThroughputKbps=_cdnThroughputKbps;
@property(nonatomic) unsigned int throughputKbps; // @synthesize throughputKbps=_throughputKbps;
@property(nonatomic) unsigned int maxInitVideoBitrate; // @synthesize maxInitVideoBitrate=_maxInitVideoBitrate;
@property(nonatomic) unsigned int minInitVideoBitrate; // @synthesize minInitVideoBitrate=_minInitVideoBitrate;
@property(nonatomic) long long hlsVersion; // @synthesize hlsVersion=_hlsVersion;
@property(retain, nonatomic) NSString *fpsappcertVer; // @synthesize fpsappcertVer=_fpsappcertVer;
@property(retain, nonatomic) NSString *cdnPrefix; // @synthesize cdnPrefix=_cdnPrefix;
@property(retain, nonatomic) NSString *protocolPrefix; // @synthesize protocolPrefix=_protocolPrefix;
@property(retain, nonatomic) NSString *deviceModel; // @synthesize deviceModel=_deviceModel;
@property(nonatomic) float movieIFrameBandwidthMultiplier; // @synthesize movieIFrameBandwidthMultiplier=_movieIFrameBandwidthMultiplier;
@property(nonatomic) float movieNominalToPeakBandwidthMultiplier; // @synthesize movieNominalToPeakBandwidthMultiplier=_movieNominalToPeakBandwidthMultiplier;
@property(nonatomic) float moviePeakBandwidthMultiplier; // @synthesize moviePeakBandwidthMultiplier=_moviePeakBandwidthMultiplier;
@property(readonly, nonatomic) _Bool wantsAccurateInitialAudioInformation; // @synthesize wantsAccurateInitialAudioInformation=_wantsAccurateInitialAudioInformation;
@property(nonatomic) float maximumVideoToAudioRatio; // @synthesize maximumVideoToAudioRatio=_maximumVideoToAudioRatio;
@property(nonatomic) float minimumVideoToAudioRatio; // @synthesize minimumVideoToAudioRatio=_minimumVideoToAudioRatio;
@property(nonatomic) _Bool filterByVideoToAudioRatio; // @synthesize filterByVideoToAudioRatio=_filterByVideoToAudioRatio;
@property(nonatomic) _Bool fillMissingAudioLanguage; // @synthesize fillMissingAudioLanguage=_fillMissingAudioLanguage;
@property(nonatomic) _Bool useHLSVariantScore; // @synthesize useHLSVariantScore=_useHLSVariantScore;
@property(nonatomic) _Bool stableReditionIdEnabled; // @synthesize stableReditionIdEnabled=_stableReditionIdEnabled;
@property(nonatomic) _Bool treatAllStereoAsOneGroup; // @synthesize treatAllStereoAsOneGroup=_treatAllStereoAsOneGroup;
@property(nonatomic) _Bool treatAllAACAs96KGroup; // @synthesize treatAllAACAs96KGroup=_treatAllAACAs96KGroup;
@property(nonatomic) _Bool useStreamFeasibilityForInitialBitrateSelection; // @synthesize useStreamFeasibilityForInitialBitrateSelection=_useStreamFeasibilityForInitialBitrateSelection;
@property(nonatomic) _Bool iframeEnabled; // @synthesize iframeEnabled=_iframeEnabled;
@property(nonatomic) _Bool branchingStreamSelectionEnabled; // @synthesize branchingStreamSelectionEnabled=_branchingStreamSelectionEnabled;
@property(nonatomic) _Bool fixForDifferentDurationIssue; // @synthesize fixForDifferentDurationIssue=_fixForDifferentDurationIssue;
@property(nonatomic) _Bool playback1440Supported; // @synthesize playback1440Supported=_playback1440Supported;
@property(nonatomic) _Bool urlVariableSupported; // @synthesize urlVariableSupported=_urlVariableSupported;
@property(nonatomic) _Bool dvSupported; // @synthesize dvSupported=_dvSupported;
@property(nonatomic) _Bool hevcSupported; // @synthesize hevcSupported=_hevcSupported;
@property(nonatomic) _Bool assistiveAudioEnabled; // @synthesize assistiveAudioEnabled=_assistiveAudioEnabled;
@property(nonatomic) _Bool offline; // @synthesize offline=_offline;
@property(nonatomic) _Bool external; // @synthesize external=_external;
@property(nonatomic) _Bool wifi; // @synthesize wifi=_wifi;
@property(nonatomic) _Bool movingSlidingWindow4Live; // @synthesize movingSlidingWindow4Live=_movingSlidingWindow4Live;
@property(nonatomic) long long liveBufferDuration; // @synthesize liveBufferDuration=_liveBufferDuration;
@property(nonatomic) _Bool isLive; // @synthesize isLive=_isLive;
@property(nonatomic) _Bool useEc3Only; // @synthesize useEc3Only=_useEc3Only;
@property(nonatomic) _Bool useAacOnly; // @synthesize useAacOnly=_useAacOnly;
@property(nonatomic) _Bool useH265HdrOnly; // @synthesize useH265HdrOnly=_useH265HdrOnly;
@property(nonatomic) _Bool useH265SdrOnly; // @synthesize useH265SdrOnly=_useH265SdrOnly;
@property(nonatomic) _Bool useH264Only; // @synthesize useH264Only=_useH264Only;
@property(nonatomic) _Bool useOneVideoTrack; // @synthesize useOneVideoTrack=_useOneVideoTrack;
@property(nonatomic) _Bool useOneAudioCodec; // @synthesize useOneAudioCodec=_useOneAudioCodec;
@property(nonatomic) _Bool useOneAudioBitrate; // @synthesize useOneAudioBitrate=_useOneAudioBitrate;
@property(nonatomic) _Bool useOneVideoBitrate; // @synthesize useOneVideoBitrate=_useOneVideoBitrate;
@property(nonatomic) _Bool useFirstTwoCdns; // @synthesize useFirstTwoCdns=_useFirstTwoCdns;
@property(nonatomic) _Bool useFirstCdn; // @synthesize useFirstCdn=_useFirstCdn;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
- (id)description;
- (void)hardcodeParameters;
- (void)setIFrameFlag:(id)arg1 deviceModel:(id)arg2;
- (void)setTotalPlaylistTime:(double)arg1 audioDuration:(long long)arg2 videoDuration:(long long)arg3 maxSegmentInSecond:(long long)arg4;
- (_Bool)useVariableInPlaylist;
- (void)setupParametersForFirstBitrateSelection:(unsigned int)arg1 cdnThroughputKbps:(unsigned int)arg2 videoKbpsRecord:(id)arg3 movieHeaderDownloader:(id)arg4 startPlayEventReporter:(id)arg5 playbackConfig:(id)arg6;
- (void)setupParametersFromConfig:(id)arg1 deviceModel:(id)arg2 isWifiOrEthernet:(_Bool)arg3 supportsHEVC:(_Bool)arg4 supportsDV:(_Bool)arg5;
- (void)dealloc;
- (id)initWithPlaybackId:(id)arg1 movieId:(id)arg2 fpsappcertSupportedVersion:(id)arg3 peakBandwidthMultiplier:(float)arg4 nominalToPeakBandwidthMultiplier:(float)arg5 iframeBandwidthMultiplier:(float)arg6 isLive:(_Bool)arg7;

@end

