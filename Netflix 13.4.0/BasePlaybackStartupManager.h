//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/ContentKeySessionDelegate-Protocol.h>
#import <Nbp/KeyLoaderDelegateDelegate-Protocol.h>
#import <Nbp/PlaybackLicenseStrategyDelegate-Protocol.h>
#import <Nbp/PlaybackStartupManager-Protocol.h>

@class AVURLAsset, ContentKeySession, KeyLoaderDelegate, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NflxMovieDetails;
@protocol OS_dispatch_queue, PlatformConfigProvider, PlaybackStartupManagerDelegate;

@interface BasePlaybackStartupManager : NSObject <KeyLoaderDelegateDelegate, ContentKeySessionDelegate, PlaybackLicenseStrategyDelegate, PlaybackStartupManager>
{
    _Bool _hasMovieDetails;
    _Bool _hasReceivedLicense;
    _Bool _hasDeliveredLicense;
    _Bool _hasPlaybackStartRequested;
    _Bool _useAVCKSForKeyLoading;
    _Bool _avcksLDLPrefetchLicense;
    _Bool _hasDrmKeys;
    _Bool _didDetectLDLQuotaError;
    AVURLAsset *_avAsset;
    NflxMovieDetails *_movieDetails;
    KeyLoaderDelegate *_keyLoaderDelegate;
    NSMutableSet *_secureStopEnabledKeyUrlStrings;
    unsigned long long _ldlRetryCount;
    unsigned long long _ldlRetryMaximum;
    unsigned long long _ldlRefreshCount;
    unsigned long long _ldlRefreshMaximum;
    unsigned long long _fullLicenseRetryCount;
    unsigned long long _fullLicenseRetryMaximum;
    NSMutableDictionary *_countedStartPlayEvents;
    NSMutableArray *_requestedKeyUrlOrderArray;
    id <PlatformConfigProvider> _platformConfig;
    NSObject<OS_dispatch_queue> *_playbackQueue;
    id <PlaybackStartupManagerDelegate> _playbackStartupManagerDelegate;
    ContentKeySession *_contentKeySession;
    NSString *_playbackId;
    NSString *_xid;
}

+ (id)extractMediaSessionIdFromLicenseResponse:(id)arg1;
- (void).cxx_destruct;
@property(nonatomic) _Bool didDetectLDLQuotaError; // @synthesize didDetectLDLQuotaError=_didDetectLDLQuotaError;
@property(nonatomic) _Bool hasDrmKeys; // @synthesize hasDrmKeys=_hasDrmKeys;
@property(retain, nonatomic) NSString *xid; // @synthesize xid=_xid;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
@property(nonatomic) _Bool avcksLDLPrefetchLicense; // @synthesize avcksLDLPrefetchLicense=_avcksLDLPrefetchLicense;
@property(retain, nonatomic) ContentKeySession *contentKeySession; // @synthesize contentKeySession=_contentKeySession;
@property(nonatomic) __weak id <PlaybackStartupManagerDelegate> playbackStartupManagerDelegate; // @synthesize playbackStartupManagerDelegate=_playbackStartupManagerDelegate;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *playbackQueue; // @synthesize playbackQueue=_playbackQueue;
@property(retain, nonatomic) id <PlatformConfigProvider> platformConfig; // @synthesize platformConfig=_platformConfig;
@property(retain, nonatomic) NSMutableArray *requestedKeyUrlOrderArray; // @synthesize requestedKeyUrlOrderArray=_requestedKeyUrlOrderArray;
@property(retain, nonatomic) NSMutableDictionary *countedStartPlayEvents; // @synthesize countedStartPlayEvents=_countedStartPlayEvents;
@property(nonatomic) unsigned long long fullLicenseRetryMaximum; // @synthesize fullLicenseRetryMaximum=_fullLicenseRetryMaximum;
@property(nonatomic) unsigned long long fullLicenseRetryCount; // @synthesize fullLicenseRetryCount=_fullLicenseRetryCount;
@property(nonatomic) unsigned long long ldlRefreshMaximum; // @synthesize ldlRefreshMaximum=_ldlRefreshMaximum;
@property(nonatomic) unsigned long long ldlRefreshCount; // @synthesize ldlRefreshCount=_ldlRefreshCount;
@property(nonatomic) unsigned long long ldlRetryMaximum; // @synthesize ldlRetryMaximum=_ldlRetryMaximum;
@property(nonatomic) unsigned long long ldlRetryCount; // @synthesize ldlRetryCount=_ldlRetryCount;
@property(retain, nonatomic) NSMutableSet *secureStopEnabledKeyUrlStrings; // @synthesize secureStopEnabledKeyUrlStrings=_secureStopEnabledKeyUrlStrings;
@property(nonatomic) _Bool useAVCKSForKeyLoading; // @synthesize useAVCKSForKeyLoading=_useAVCKSForKeyLoading;
@property(retain, nonatomic) KeyLoaderDelegate *keyLoaderDelegate; // @synthesize keyLoaderDelegate=_keyLoaderDelegate;
@property(retain, nonatomic) NflxMovieDetails *movieDetails; // @synthesize movieDetails=_movieDetails;
@property(retain, nonatomic) AVURLAsset *avAsset; // @synthesize avAsset=_avAsset;
@property(nonatomic) _Bool hasPlaybackStartRequested; // @synthesize hasPlaybackStartRequested=_hasPlaybackStartRequested;
@property(nonatomic) _Bool hasDeliveredLicense; // @synthesize hasDeliveredLicense=_hasDeliveredLicense;
@property(nonatomic) _Bool hasReceivedLicense; // @synthesize hasReceivedLicense=_hasReceivedLicense;
@property(nonatomic) _Bool hasMovieDetails; // @synthesize hasMovieDetails=_hasMovieDetails;
- (_Bool)hasCacheExpiredForPlaybackLicenseStrategy:(id)arg1;
- (void)requestAdditionalPrefetchForPlaybackLicenseStrategy:(id)arg1;
- (void)setCacheExpiredForPlaybackLicenseStrategy:(id)arg1;
- (void)startPlaybackForPlaybackLicenseStrategy:(id)arg1;
- (id)platformConfigForPlaybackLicenseStrategy:(id)arg1;
- (id)serialQueueForPlaybackLicenseStrategy:(id)arg1;
- (void)playbackLicenseStrategy:(id)arg1 logsBreadcrumb:(id)arg2;
- (id)playbackReporterForPlaybackLicenseStrategy:(id)arg1;
- (id)contentKeySessionForPlaybackLicenseStrategy:(id)arg1;
- (id)playbackIdForPlaybackLicenseStrategy:(id)arg1;
- (void)contentKeySession:(id)arg1 keyUrl:(id)arg2 producedChallengeError:(id)arg3;
- (void)contentKeySession:(id)arg1 didRequestLicenseChallengeForKeyURL:(id)arg2;
- (void)contentKeySession:(id)arg1 didReceiveLicenseChallengeForKeyURL:(id)arg2;
- (_Bool)contentKeySession:(id)arg1 canPrefetchLicenseForKeyURL:(id)arg2;
- (id)playbackIdForContentKeySession:(id)arg1;
- (id)xidForContentKeySession:(id)arg1;
- (_Bool)contentKeySession:(id)arg1 shouldRetryLicenseChallenges:(id)arg2 wasLDL:(_Bool)arg3 forRawResponse:(id)arg4 andError:(id)arg5;
- (void)contentKeySession:(id)arg1 didDeliverAdHocLicenseChallengeResponses:(id)arg2;
- (void)contentKeySession:(id)arg1 didDeliverLicenseChallengeResponses:(id)arg2;
- (void)contentKeySession:(id)arg1 didReceiveLicenseChallengeResponses:(id)arg2 rawResponse:(id)arg3 error:(id)arg4;
- (void)contentKeySession:(id)arg1 didCompleteLicenseChallengeResponses:(id)arg2 withError:(id)arg3 willRetry:(_Bool)arg4;
- (void)contentKeySessionWillStartLicenseRequest:(id)arg1 withRequestArguments:(id)arg2 ldl:(_Bool)arg3;
- (void)contentKeySessionDidEndLicenseRequest:(id)arg1 ldl:(_Bool)arg2;
- (void)contentKeySession:(id)arg1 didFetchLicenseAgain:(id)arg2;
- (void)contentKeySession:(id)arg1 didFailToCollectLicenseChallengesWithError:(id)arg2;
- (_Bool)keyLoaderDelegate:(id)arg1 canRequestLicenseForLoadingRequest:(id)arg2;
- (void)_sendEndLicenseRequest;
- (void)_sendEndLDLicenseRequest;
- (void)_sendStartLicenseRequest;
- (void)_sendStartLDLicenseRequest;
- (void)recordCountedStartPlayEvent:(id)arg1;
- (void)recordStartPlayEvent:(id)arg1;
- (void)registerSecureStopEntryForLicensesChallengeResponses:(id)arg1;
- (_Bool)isExternalDisplay;
- (id)playbackReporter;
- (void)setupContentKeySession;
- (void)setupAVCKSState;
- (void)setupLicenseRetryState;
- (void)_loadAssetValuesForKeysWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_retryAddAVAssetToContentKeySessionRemainingRetries:(long long)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)_addAVAssetToContentKeySession;
- (id)didReceiveLicenseChallengeResponses:(id)arg1 inputError:(id)arg2;
- (void)didDeliverLicenseChallengeResponses:(id)arg1 wasAdHoc:(_Bool)arg2;
- (void)loadAssetTrackInfoWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)nflxMovieReadyToPlay;
@property(readonly, nonatomic) _Bool hasLicenseExpired;
- (_Bool)canResumePrefetch;
- (void)closePlaybackStartupManager;
- (void)playbackInitiateRequested;
- (void)playbackStartRequested;
- (void)setupWithMovieDetails:(id)arg1 asset:(id)arg2;
- (void)processLicenseExpiration;
- (void)dealloc;
- (id)initWithConfig:(id)arg1 dispatchQueue:(id)arg2 delegate:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

