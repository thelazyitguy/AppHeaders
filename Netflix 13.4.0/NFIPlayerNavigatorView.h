//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "NFIBranchingPlayerControlsCellDelegate-Protocol.h"
#import "UICollectionViewDataSource-Protocol.h"
#import "UICollectionViewDelegate-Protocol.h"

@class InteractiveDataModel, NFIBranchingCollectionView, NFIChoiceCellViewModel, NSArray, NSIndexPath, NSMutableDictionary, NSString, UICollectionViewFlowLayout;
@protocol NFIPlayerNavigatorDelegate;

@interface NFIPlayerNavigatorView : UIView <UICollectionViewDelegate, UICollectionViewDataSource, NFIBranchingPlayerControlsCellDelegate>
{
    id <NFIPlayerNavigatorDelegate> _delegate;
    NFIBranchingCollectionView *_collectionView;
    UICollectionViewFlowLayout *_layout;
    InteractiveDataModel *_model;
    NFIChoiceCellViewModel *_viewModel;
    NSMutableDictionary *_viewModelCache;
    NSArray *_choicePoints;
    NSIndexPath *_selectedIndexPath;
    UIView *_backgroundGradient;
    struct CGSize _beginningCellSize;
    struct CGSize _endingCellSize;
    struct CGSize _cellSize;
}

+ (id)configureWithModel:(id)arg1;
- (void).cxx_destruct;
@property(retain, nonatomic) UIView *backgroundGradient; // @synthesize backgroundGradient=_backgroundGradient;
@property(retain, nonatomic) NSIndexPath *selectedIndexPath; // @synthesize selectedIndexPath=_selectedIndexPath;
@property(nonatomic) struct CGSize cellSize; // @synthesize cellSize=_cellSize;
@property(nonatomic) struct CGSize endingCellSize; // @synthesize endingCellSize=_endingCellSize;
@property(nonatomic) struct CGSize beginningCellSize; // @synthesize beginningCellSize=_beginningCellSize;
@property(retain, nonatomic) NSArray *choicePoints; // @synthesize choicePoints=_choicePoints;
@property(retain, nonatomic) NSMutableDictionary *viewModelCache; // @synthesize viewModelCache=_viewModelCache;
@property(retain, nonatomic) NFIChoiceCellViewModel *viewModel; // @synthesize viewModel=_viewModel;
@property(nonatomic) __weak InteractiveDataModel *model; // @synthesize model=_model;
@property(retain, nonatomic) UICollectionViewFlowLayout *layout; // @synthesize layout=_layout;
@property(retain, nonatomic) NFIBranchingCollectionView *collectionView; // @synthesize collectionView=_collectionView;
@property(nonatomic) __weak id <NFIPlayerNavigatorDelegate> delegate; // @synthesize delegate=_delegate;
- (id)viewIdentifierForIndexPath:(id)arg1;
- (id)segmentIdForIndexPath:(id)arg1;
- (id)loggingViewsAtIndexPath:(id)arg1;
- (void)collectionViewCell:(id)arg1 choiceAtIndex:(unsigned long long)arg2;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (double)rightEdgeInsetForCellSize:(struct CGSize)arg1;
- (double)leftEdgeInsetForCellSize:(struct CGSize)arg1;
- (struct UIEdgeInsets)collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (struct CGSize)collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)configureCell:(id)arg1 atIndex:(long long)arg2;
- (id)cellViewModelForChoicePoint:(id)arg1;
- (struct CGSize)cellSizeForSection:(long long)arg1;
- (void)stopScrolling;
- (_Bool)isCellLocked:(id)arg1;
- (id)gradient;
- (struct CGRect)gradientFrame;
- (void)refreshVisible;
- (void)registerCells;
- (void)initSubviews;
- (void)layoutSubviews;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)resetSelectedState;
- (void)setCurrentSegmentId:(id)arg1;
- (id)initWithModel:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

