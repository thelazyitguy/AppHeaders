//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <NFPlaylistGeneration/NSSecureCoding-Protocol.h>

@class NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSString;
@protocol AccurateTimingProviderProtocol, OS_dispatch_queue;

@interface NflxMovieDetails : NSObject <NSSecureCoding>
{
    _Bool _isBranching;
    _Bool _expireManifestIn19Minute;
    _Bool _defaultISCForced;
    _Bool _defaultISCClosedCaption;
    _Bool _vmafFilteringEnabled;
    _Bool _hdmiDongleDetected;
    _Bool _excludingMultiChannelAudio;
    NSData *_fairplayAppCert;
    NSString *_playbackContextId;
    NSString *_playbackCorrelationId;
    NSString *_linksKey;
    NSString *_movieId;
    NSString *_keyId;
    NSString *_masterPlaylist;
    long long _duration;
    long long _aacAudioBps;
    long long _totalSize;
    NSDictionary *_choiceMap;
    long long _offlineType;
    NSDictionary *_videoAspectDetails;
    NSArray *_segmentList;
    NSDictionary *_licenseRefreshLinks;
    NSDictionary *_downloadableSizes;
    NSString *_netflixSDKNotificationUserInfoUrl;
    NSString *_defaultISCLanguage;
    NSSet *_dolbyAudioPlaylistKeys;
    NSSet *_dolbyAtmosAudioPlaylistKeys;
    NSSet *_hdrVideoPlaylistKeys;
    long long _initialAudioBps;
    NSString *_initialAudioDownloadableId;
    long long _initialVideoBps;
    NSString *_initialVideoDownloadableId;
    double _minimalVideoFps;
    long long _requestedVmafType;
    long long _vmafFilteringMaximum;
    long long _vmafFilteringMaximumBitrate;
    id <AccurateTimingProviderProtocol> _timingProvider;
    unsigned long long _videoStreamPrefetchCount;
    unsigned long long _audioStreamPrefetchCount;
    unsigned long long _textStreamPrefetchCount;
    NSDictionary *_videoResolutionToMaxBitrate;
    unsigned long long _deviceVideoResolutionClass;
    NSDictionary *_downloadIdToVideoResolutionClass;
    NSMutableDictionary *_keyUrlToTrackName;
    NSMutableDictionary *_keyUrlToKeyUrlDetails;
    NSMutableDictionary *_widevinePsshToPlaylistKeyMap;
    NSMutableDictionary *_hlsPlaylistKeyUrlToPlaylistKeyMap;
    NSMutableSet *_hlsPlaylistKeyUrls;
    NSMutableDictionary *_downloadableIdToPlaylistKeyMap;
    NSMutableDictionary *_vmafToDownloadableId;
    NSMutableArray *_orderedPlaylistKeys;
    NSMutableArray *_orderedDefaultPlaylistKeys;
    NSMutableDictionary *_contentUrlForPlaylistKey;
    NSMutableArray *_playlistKeysForDeliveredVariants;
    NSMutableDictionary *_mimeCodedToMinimumBps;
    NSObject<OS_dispatch_queue> *_serialQueue;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) NSMutableDictionary *mimeCodedToMinimumBps; // @synthesize mimeCodedToMinimumBps=_mimeCodedToMinimumBps;
@property(retain, nonatomic) NSMutableArray *playlistKeysForDeliveredVariants; // @synthesize playlistKeysForDeliveredVariants=_playlistKeysForDeliveredVariants;
@property(retain, nonatomic) NSMutableDictionary *contentUrlForPlaylistKey; // @synthesize contentUrlForPlaylistKey=_contentUrlForPlaylistKey;
@property(retain, nonatomic) NSMutableArray *orderedDefaultPlaylistKeys; // @synthesize orderedDefaultPlaylistKeys=_orderedDefaultPlaylistKeys;
@property(retain, nonatomic) NSMutableArray *orderedPlaylistKeys; // @synthesize orderedPlaylistKeys=_orderedPlaylistKeys;
@property(retain, nonatomic) NSMutableDictionary *vmafToDownloadableId; // @synthesize vmafToDownloadableId=_vmafToDownloadableId;
@property(retain, nonatomic) NSMutableDictionary *downloadableIdToPlaylistKeyMap; // @synthesize downloadableIdToPlaylistKeyMap=_downloadableIdToPlaylistKeyMap;
@property(retain, nonatomic) NSMutableSet *hlsPlaylistKeyUrls; // @synthesize hlsPlaylistKeyUrls=_hlsPlaylistKeyUrls;
@property(retain, nonatomic) NSMutableDictionary *hlsPlaylistKeyUrlToPlaylistKeyMap; // @synthesize hlsPlaylistKeyUrlToPlaylistKeyMap=_hlsPlaylistKeyUrlToPlaylistKeyMap;
@property(retain, nonatomic) NSMutableDictionary *widevinePsshToPlaylistKeyMap; // @synthesize widevinePsshToPlaylistKeyMap=_widevinePsshToPlaylistKeyMap;
@property(retain, nonatomic) NSMutableDictionary *keyUrlToKeyUrlDetails; // @synthesize keyUrlToKeyUrlDetails=_keyUrlToKeyUrlDetails;
@property(retain, nonatomic) NSMutableDictionary *keyUrlToTrackName; // @synthesize keyUrlToTrackName=_keyUrlToTrackName;
@property(retain, nonatomic) NSDictionary *downloadIdToVideoResolutionClass; // @synthesize downloadIdToVideoResolutionClass=_downloadIdToVideoResolutionClass;
@property(nonatomic) unsigned long long deviceVideoResolutionClass; // @synthesize deviceVideoResolutionClass=_deviceVideoResolutionClass;
@property(retain, nonatomic) NSDictionary *videoResolutionToMaxBitrate; // @synthesize videoResolutionToMaxBitrate=_videoResolutionToMaxBitrate;
@property(nonatomic) _Bool excludingMultiChannelAudio; // @synthesize excludingMultiChannelAudio=_excludingMultiChannelAudio;
@property(nonatomic) _Bool hdmiDongleDetected; // @synthesize hdmiDongleDetected=_hdmiDongleDetected;
@property(nonatomic) unsigned long long textStreamPrefetchCount; // @synthesize textStreamPrefetchCount=_textStreamPrefetchCount;
@property(nonatomic) unsigned long long audioStreamPrefetchCount; // @synthesize audioStreamPrefetchCount=_audioStreamPrefetchCount;
@property(nonatomic) unsigned long long videoStreamPrefetchCount; // @synthesize videoStreamPrefetchCount=_videoStreamPrefetchCount;
@property(retain) id <AccurateTimingProviderProtocol> timingProvider; // @synthesize timingProvider=_timingProvider;
@property long long vmafFilteringMaximumBitrate; // @synthesize vmafFilteringMaximumBitrate=_vmafFilteringMaximumBitrate;
@property long long vmafFilteringMaximum; // @synthesize vmafFilteringMaximum=_vmafFilteringMaximum;
@property _Bool vmafFilteringEnabled; // @synthesize vmafFilteringEnabled=_vmafFilteringEnabled;
@property long long requestedVmafType; // @synthesize requestedVmafType=_requestedVmafType;
@property double minimalVideoFps; // @synthesize minimalVideoFps=_minimalVideoFps;
@property(copy) NSString *initialVideoDownloadableId; // @synthesize initialVideoDownloadableId=_initialVideoDownloadableId;
@property long long initialVideoBps; // @synthesize initialVideoBps=_initialVideoBps;
@property(copy) NSString *initialAudioDownloadableId; // @synthesize initialAudioDownloadableId=_initialAudioDownloadableId;
@property long long initialAudioBps; // @synthesize initialAudioBps=_initialAudioBps;
@property(copy) NSSet *hdrVideoPlaylistKeys; // @synthesize hdrVideoPlaylistKeys=_hdrVideoPlaylistKeys;
@property(copy) NSSet *dolbyAtmosAudioPlaylistKeys; // @synthesize dolbyAtmosAudioPlaylistKeys=_dolbyAtmosAudioPlaylistKeys;
@property(copy) NSSet *dolbyAudioPlaylistKeys; // @synthesize dolbyAudioPlaylistKeys=_dolbyAudioPlaylistKeys;
@property _Bool defaultISCClosedCaption; // @synthesize defaultISCClosedCaption=_defaultISCClosedCaption;
@property _Bool defaultISCForced; // @synthesize defaultISCForced=_defaultISCForced;
@property(retain) NSString *defaultISCLanguage; // @synthesize defaultISCLanguage=_defaultISCLanguage;
@property(retain) NSString *netflixSDKNotificationUserInfoUrl; // @synthesize netflixSDKNotificationUserInfoUrl=_netflixSDKNotificationUserInfoUrl;
@property(copy) NSDictionary *downloadableSizes; // @synthesize downloadableSizes=_downloadableSizes;
@property(copy) NSDictionary *licenseRefreshLinks; // @synthesize licenseRefreshLinks=_licenseRefreshLinks;
@property(copy) NSArray *segmentList; // @synthesize segmentList=_segmentList;
@property(copy) NSDictionary *videoAspectDetails; // @synthesize videoAspectDetails=_videoAspectDetails;
@property long long offlineType; // @synthesize offlineType=_offlineType;
@property _Bool expireManifestIn19Minute; // @synthesize expireManifestIn19Minute=_expireManifestIn19Minute;
@property(copy) NSDictionary *choiceMap; // @synthesize choiceMap=_choiceMap;
@property _Bool isBranching; // @synthesize isBranching=_isBranching;
@property long long totalSize; // @synthesize totalSize=_totalSize;
@property long long aacAudioBps; // @synthesize aacAudioBps=_aacAudioBps;
@property long long duration; // @synthesize duration=_duration;
@property(retain) NSString *masterPlaylist; // @synthesize masterPlaylist=_masterPlaylist;
@property(retain) NSString *keyId; // @synthesize keyId=_keyId;
@property(retain) NSString *movieId; // @synthesize movieId=_movieId;
@property(retain) NSString *linksKey; // @synthesize linksKey=_linksKey;
@property(retain) NSString *playbackCorrelationId; // @synthesize playbackCorrelationId=_playbackCorrelationId;
@property(retain) NSString *playbackContextId; // @synthesize playbackContextId=_playbackContextId;
@property(retain) NSData *fairplayAppCert; // @synthesize fairplayAppCert=_fairplayAppCert;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)_initWithSecureCoder:(id)arg1;
- (id)downloadableIdForVideoKeyUrl:(id)arg1;
- (id)allWidevinePssh;
- (id)allHlsPlaylistKeyUrl;
- (id)allHlsPlaylistKey;
- (_Bool)hasDrmKeys;
- (id)keyUrlDetailsForKeyUrl:(id)arg1;
- (id)trackNameForKeyUrl:(id)arg1;
- (void)_setTrackName:(id)arg1 forKeyUrl:(id)arg2;
- (void)_setKeyUrlDetails:(id)arg1 forKeyUrl:(id)arg2;
- (void)setKeyUrlDetails:(id)arg1 forKeyUrl:(id)arg2;
- (id)allOrderedDefaultPlaylistKeys;
- (id)allOrderedPlaylistKeys;
- (id)allPlaylistKeys;
- (id)allDownloadableIds;
- (id)downloadableIdForPlaylistKey:(id)arg1;
- (void)_setDefaultOrderedPlaylistKey:(id)arg1;
- (void)_setDownloadableId:(id)arg1 forPlaylistKey:(id)arg2;
- (void)setDownloadableId:(id)arg1 forPlaylistKeys:(id)arg2 defaultIdx:(long long)arg3;
- (void)setDownloadableId:(id)arg1 forPlaylistKey:(id)arg2 isDefault:(_Bool)arg3;
- (id)downloadableToVmafMap;
- (long long)vmafForDownloadableId:(id)arg1;
- (void)setVmaf:(long long)arg1 forDownloadableId:(id)arg2;
- (id)hlsPlaylistKeyUrlForPlaylistKey:(id)arg1;
- (void)addHlsPlaylistKeyUrl:(id)arg1;
- (void)_setHlsPlaylistKeyUrl:(id)arg1 forPlaylistKey:(id)arg2;
- (void)setHlsPlaylistKeyUrl:(id)arg1 forPlaylistKeys:(id)arg2;
- (void)setHlsPlaylistKeyUrl:(id)arg1 forPlaylistKey:(id)arg2;
- (id)widevinePsshForPlaylistKey:(id)arg1;
- (void)_setWidevinePssh:(id)arg1 forPlaylistKey:(id)arg2;
- (void)setWidevinePssh:(id)arg1 forPlaylistKey:(id)arg2;
- (void)recordDeliveredVariantForPlaylistKey:(id)arg1;
- (id)contentUrlForPlaylistKey:(id)arg1;
- (void)setContentUrl:(id)arg1 forPlaylistKey:(id)arg2;
- (long long)minimumAudioBpsForMimeCodec:(id)arg1;
- (void)setMinimumAudioBps:(long long)arg1 forMimeCodec:(id)arg2;
- (id)initWithOldMovieDetails:(id)arg1;
- (id)init;

@end

