//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/APIClientLogging-Protocol.h>

@class BladeRunnerAseTimeStamp, BladeRunnerCdnIdDlIdCache, BladeRunnerPlaybackErrorState, BladeRunnerSubtitleQOEState, BladeRunnerTime, BreadcrumbAudit, CurrentNetworkInfoProvider, LicenseEventAudit, NSArray, NSCountedSet, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NflxTimer, TransitionRecord;
@protocol APILinkAccess, NFPlaybackLoggerAuxiliaryLogInfo, OS_dispatch_queue, PlatformLogger;

@interface BladeRunnerPlaybackReporter : NSObject <APIClientLogging>
{
    _Bool _cachehit;
    _Bool _prefetched;
    _Bool _startPlayLogged;
    _Bool _endPlayLogged;
    _Bool _isUIAutoplay;
    _Bool _wantsExtendedPDSSessionParams;
    _Bool _anyVariableRatePlayback;
    _Bool _reusingAVPlayer;
    _Bool _startPlayEventsClosed;
    _Bool _ldlSuccess;
    _Bool _isBranching;
    _Bool _isSupplemental;
    _Bool _playbackEndedOnFork;
    _Bool _shouldReportContentMatching;
    _Bool _userDidMatchContentForPlayback;
    _Bool _requestedLM;
    _Bool _receivedLM;
    _Bool _intrplayNeedsCriticalResumePlay;
    _Bool _hasPlayerUIPresented;
    _Bool _didRepositionWaitingOnPlaybackResume;
    _Bool _didRepositionPlaybackResumeReceived;
    _Bool _playbackErrorStateSent;
    _Bool _hasDRM;
    _Bool _anyExternalPlayback;
    _Bool _audioTrackSwitchStarted;
    _Bool _errorPresentedToUser;
    _Bool _debugLoggingEnabled;
    _Bool _offlineReporting;
    _Bool _lowPowerMode;
    _Bool _isStreamingCachedContent;
    _Bool _hdmiDongleDetected;
    _Bool _excludingMultiChannelAudio;
    _Bool _useAudioRouteStringFix;
    _Bool _networkExpensive;
    _Bool _networkConstrained;
    _Bool _networkAvailable;
    _Bool _usePlaygraphTransitionImprovements;
    unsigned int _trackingId;
    float _persistentRate;
    unsigned int _mediaDurationTime;
    float _volume;
    float _volumeAtStartPlay;
    int _playbackState;
    unsigned int _audioChannels;
    unsigned int _videoKbps;
    unsigned int _audioKbps;
    unsigned int _subtitleKbps;
    unsigned int _initialVideoKbps;
    unsigned int _initialAudioKbps;
    unsigned int _integerPreferredPeakBps;
    int _displayMode;
    int _errorTimeoutValue;
    LicenseEventAudit *_licenseEventAudit;
    id <PlatformLogger> _logging;
    BladeRunnerCdnIdDlIdCache *_cdnIdDlIdCache;
    NSMutableArray *_deferredLogblobs;
    NSString *_playbackId;
    BreadcrumbAudit *_breadcrumbAudit;
    TransitionRecord *_transitionRecord;
    unsigned long long _mnAseTimeStamp;
    unsigned long long _mnTimescale;
    long long _lastLogblobTimestamp;
    long long _lastEventTimestamp;
    NSString *_xid;
    NSString *_movieId;
    NSMutableArray *_keyUrlErrors;
    NSString *_UILabel;
    NSString *_activeAudioRouteString;
    NSString *_activeAudioRouteStringAtStartPlay;
    long long _prefetchRetryCount;
    NSMutableArray *_fullLicenseRetryEvents;
    NSMutableArray *_ldLicenseRetryEvents;
    NSString *_licenseStrategy;
    unsigned long long _ldLicenseRetryFirstEventTimestamp;
    NSDictionary *_uiDownloadContextRaw;
    NSDictionary *_uiPlayContextRaw;
    BladeRunnerTime *_movieOpenTime;
    BladeRunnerTime *_playbackInitiateTime;
    NSString *_playdelayUniqueRequstIdentifier;
    BladeRunnerTime *_playbackStartTime;
    long long _respositionCompleteTimeMS;
    BladeRunnerTime *_playbackStopTime;
    BladeRunnerTime *_playbackStallTime;
    BladeRunnerPlaybackErrorState *_playbackErrorState;
    long long _playbackTSInMS;
    long long _movieStartSeconds;
    BladeRunnerAseTimeStamp *_movieStop;
    BladeRunnerAseTimeStamp *_movieTotal;
    NSString *_audioBCP47;
    NSString *_subtitleBCP47;
    NSString *_subtitleTrackId;
    NSString *_videoDownloadableId;
    NSString *_audioDownloadableId;
    NSString *_subtitleDownloadableId;
    NSString *_initialVideoDownloadableId;
    NSString *_initialAudioDownloadableId;
    NSMutableDictionary *_videoDownloadableIdsToKbps;
    NSString *_offlineTransactionId;
    NSString *_downloadTransactionId;
    NSString *_playbackContextId;
    NSString *_playbackCorrelationId;
    NSString *_groupNames;
    unsigned long long _expectedInitialVideoKbps;
    NSDictionary *_inititalBandwidthCap;
    NSString *_carrier;
    NSString *_countryCode;
    NSString *_networkCode;
    NSString *_networkType;
    NSString *_networkSpec;
    NSString *_ssid;
    NSString *_wirelessChannel;
    NSString *_ipVersionsAvailable;
    NSString *_ipVersionPreferred;
    NSString *_ipVersionPolicy;
    NSString *_additionalInfo;
    NSString *_deviceSpecificCode;
    NSString *_deviceSpecificString;
    long long _navigationTimeMs;
    BladeRunnerTime *_audioTrackSwitchStart;
    NSString *_audioTrackInfoOld;
    NSString *_audioTrackInfoNew;
    NSString *_playbackStoppedReason;
    NSDictionary *_networkInfo;
    long long _lastReportedCdnId;
    NSMutableArray *_cdnSelection;
    NSMutableDictionary *_playbackEventTimes;
    NSMutableDictionary *_playTimes;
    NSMutableDictionary *_outputDist;
    NSDictionary *_downloadIdToVideoResolutionClass;
    NSDictionary *_videoResolutionToMaxBitrate;
    unsigned long long _deviceVideoResolutionClass;
    unsigned long long _maximumVideoResolutionClassPlayed;
    NSString *_startPosition;
    NSString *_defaultInterfaceName;
    NSString *_defaultInterfaceSsid;
    NSNumber *_startEpoch;
    NSString *_mediaId;
    NSArray *_mediaArray;
    NflxTimer *_periodicWorkTimer;
    NflxTimer *_extraKeepAliveTimer;
    CurrentNetworkInfoProvider *_currentNetworkInfoProvider;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSString *_currentNetwork;
    NSMutableArray *_networkDistribution;
    BladeRunnerSubtitleQOEState *_subtitleQOEData;
    NSDictionary *_linksForPlayback;
    NSMutableSet *_onDemandVariantDownloadableIds;
    NSMutableSet *_failedVariantDownloadableIds;
    NSMutableSet *_missingLinkLogged;
    NSCountedSet *_logblobTypeAudit;
    NSDictionary *_previousMidplayLogblob;
    NSDictionary *_downloadableToVmafMap;
    long long _requestedVmafType;
    long long _vmafFilteringMaximum;
    long long _vmafFilteringMaximumKbps;
    id <APILinkAccess> _linkAccess;
    NSString *_currentNetworkIdentifier;
    id <NFPlaybackLoggerAuxiliaryLogInfo> _auxiliaryLogInfoInternal;
    NSMutableDictionary *_additionalEndplayInfo;
    unsigned long long _shortSessionAdditionalLoggingThresholdMS;
}

+ (unsigned long long)currentTimestampInMS;
+ (_Bool)isMidplayLogblob:(id)arg1 equivalentToMidplayLogblob:(id)arg2;
+ (unsigned int)retrieveVideoBitRate:(id)arg1;
+ (id)retrieveVideoDownloadableId:(id)arg1;
+ (unsigned int)retrieveAudioBitRate:(id)arg1;
+ (id)retrieveAudioDownloadableId:(id)arg1;
+ (id)findStringElementsWithPrefix:(id)arg1 inArray:(id)arg2;
- (void).cxx_destruct;
@property(nonatomic) unsigned long long shortSessionAdditionalLoggingThresholdMS; // @synthesize shortSessionAdditionalLoggingThresholdMS=_shortSessionAdditionalLoggingThresholdMS;
@property(nonatomic) _Bool usePlaygraphTransitionImprovements; // @synthesize usePlaygraphTransitionImprovements=_usePlaygraphTransitionImprovements;
@property(retain, nonatomic) NSMutableDictionary *additionalEndplayInfo; // @synthesize additionalEndplayInfo=_additionalEndplayInfo;
@property(retain, nonatomic) id <NFPlaybackLoggerAuxiliaryLogInfo> auxiliaryLogInfoInternal; // @synthesize auxiliaryLogInfoInternal=_auxiliaryLogInfoInternal;
@property(retain, nonatomic) NSString *currentNetworkIdentifier; // @synthesize currentNetworkIdentifier=_currentNetworkIdentifier;
@property(nonatomic) _Bool networkAvailable; // @synthesize networkAvailable=_networkAvailable;
@property(nonatomic) _Bool networkConstrained; // @synthesize networkConstrained=_networkConstrained;
@property(nonatomic) _Bool networkExpensive; // @synthesize networkExpensive=_networkExpensive;
@property(retain) id <APILinkAccess> linkAccess; // @synthesize linkAccess=_linkAccess;
@property(nonatomic) _Bool useAudioRouteStringFix; // @synthesize useAudioRouteStringFix=_useAudioRouteStringFix;
@property(nonatomic) _Bool excludingMultiChannelAudio; // @synthesize excludingMultiChannelAudio=_excludingMultiChannelAudio;
@property(nonatomic) _Bool hdmiDongleDetected; // @synthesize hdmiDongleDetected=_hdmiDongleDetected;
@property(nonatomic) long long vmafFilteringMaximumKbps; // @synthesize vmafFilteringMaximumKbps=_vmafFilteringMaximumKbps;
@property(nonatomic) long long vmafFilteringMaximum; // @synthesize vmafFilteringMaximum=_vmafFilteringMaximum;
@property(nonatomic) long long requestedVmafType; // @synthesize requestedVmafType=_requestedVmafType;
@property(retain, nonatomic) NSDictionary *downloadableToVmafMap; // @synthesize downloadableToVmafMap=_downloadableToVmafMap;
@property(retain, nonatomic) NSDictionary *previousMidplayLogblob; // @synthesize previousMidplayLogblob=_previousMidplayLogblob;
@property(retain, nonatomic) NSCountedSet *logblobTypeAudit; // @synthesize logblobTypeAudit=_logblobTypeAudit;
@property(retain, nonatomic) NSMutableSet *missingLinkLogged; // @synthesize missingLinkLogged=_missingLinkLogged;
@property(retain, nonatomic) NSMutableSet *failedVariantDownloadableIds; // @synthesize failedVariantDownloadableIds=_failedVariantDownloadableIds;
@property(retain, nonatomic) NSMutableSet *onDemandVariantDownloadableIds; // @synthesize onDemandVariantDownloadableIds=_onDemandVariantDownloadableIds;
@property(nonatomic) _Bool isStreamingCachedContent; // @synthesize isStreamingCachedContent=_isStreamingCachedContent;
@property(retain, nonatomic) NSDictionary *linksForPlayback; // @synthesize linksForPlayback=_linksForPlayback;
@property(retain, nonatomic) BladeRunnerSubtitleQOEState *subtitleQOEData; // @synthesize subtitleQOEData=_subtitleQOEData;
@property(retain, nonatomic) NSMutableArray *networkDistribution; // @synthesize networkDistribution=_networkDistribution;
@property(copy, nonatomic) NSString *currentNetwork; // @synthesize currentNetwork=_currentNetwork;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) CurrentNetworkInfoProvider *currentNetworkInfoProvider; // @synthesize currentNetworkInfoProvider=_currentNetworkInfoProvider;
@property(retain, nonatomic) NflxTimer *extraKeepAliveTimer; // @synthesize extraKeepAliveTimer=_extraKeepAliveTimer;
@property(retain, nonatomic) NflxTimer *periodicWorkTimer; // @synthesize periodicWorkTimer=_periodicWorkTimer;
@property(copy, nonatomic) NSArray *mediaArray; // @synthesize mediaArray=_mediaArray;
@property(copy, nonatomic) NSString *mediaId; // @synthesize mediaId=_mediaId;
@property(nonatomic) _Bool lowPowerMode; // @synthesize lowPowerMode=_lowPowerMode;
@property(nonatomic) _Bool offlineReporting; // @synthesize offlineReporting=_offlineReporting;
@property(copy, nonatomic) NSNumber *startEpoch; // @synthesize startEpoch=_startEpoch;
@property(copy, nonatomic) NSString *defaultInterfaceSsid; // @synthesize defaultInterfaceSsid=_defaultInterfaceSsid;
@property(copy, nonatomic) NSString *defaultInterfaceName; // @synthesize defaultInterfaceName=_defaultInterfaceName;
@property(copy, nonatomic) NSString *startPosition; // @synthesize startPosition=_startPosition;
@property(nonatomic) unsigned long long maximumVideoResolutionClassPlayed; // @synthesize maximumVideoResolutionClassPlayed=_maximumVideoResolutionClassPlayed;
@property(nonatomic) unsigned long long deviceVideoResolutionClass; // @synthesize deviceVideoResolutionClass=_deviceVideoResolutionClass;
@property(retain, nonatomic) NSDictionary *videoResolutionToMaxBitrate; // @synthesize videoResolutionToMaxBitrate=_videoResolutionToMaxBitrate;
@property(retain, nonatomic) NSDictionary *downloadIdToVideoResolutionClass; // @synthesize downloadIdToVideoResolutionClass=_downloadIdToVideoResolutionClass;
@property(retain, nonatomic) NSMutableDictionary *outputDist; // @synthesize outputDist=_outputDist;
@property(retain, nonatomic) NSMutableDictionary *playTimes; // @synthesize playTimes=_playTimes;
@property(retain, nonatomic) NSMutableDictionary *playbackEventTimes; // @synthesize playbackEventTimes=_playbackEventTimes;
@property(retain, nonatomic) NSMutableArray *cdnSelection; // @synthesize cdnSelection=_cdnSelection;
@property(nonatomic) long long lastReportedCdnId; // @synthesize lastReportedCdnId=_lastReportedCdnId;
@property(copy, nonatomic) NSDictionary *networkInfo; // @synthesize networkInfo=_networkInfo;
@property(copy, nonatomic) NSString *playbackStoppedReason; // @synthesize playbackStoppedReason=_playbackStoppedReason;
@property(nonatomic, getter=isDebugLoggingEnabled) _Bool debugLoggingEnabled; // @synthesize debugLoggingEnabled=_debugLoggingEnabled;
@property(nonatomic) _Bool errorPresentedToUser; // @synthesize errorPresentedToUser=_errorPresentedToUser;
@property(copy, nonatomic) NSString *audioTrackInfoNew; // @synthesize audioTrackInfoNew=_audioTrackInfoNew;
@property(copy, nonatomic) NSString *audioTrackInfoOld; // @synthesize audioTrackInfoOld=_audioTrackInfoOld;
@property(nonatomic) _Bool audioTrackSwitchStarted; // @synthesize audioTrackSwitchStarted=_audioTrackSwitchStarted;
@property(copy, nonatomic) BladeRunnerTime *audioTrackSwitchStart; // @synthesize audioTrackSwitchStart=_audioTrackSwitchStart;
@property(nonatomic) int errorTimeoutValue; // @synthesize errorTimeoutValue=_errorTimeoutValue;
@property(nonatomic) long long navigationTimeMs; // @synthesize navigationTimeMs=_navigationTimeMs;
@property(copy, nonatomic) NSString *deviceSpecificString; // @synthesize deviceSpecificString=_deviceSpecificString;
@property(copy, nonatomic) NSString *deviceSpecificCode; // @synthesize deviceSpecificCode=_deviceSpecificCode;
@property(copy, nonatomic) NSString *additionalInfo; // @synthesize additionalInfo=_additionalInfo;
@property(copy, nonatomic) NSString *ipVersionPolicy; // @synthesize ipVersionPolicy=_ipVersionPolicy;
@property(copy, nonatomic) NSString *ipVersionPreferred; // @synthesize ipVersionPreferred=_ipVersionPreferred;
@property(copy, nonatomic) NSString *ipVersionsAvailable; // @synthesize ipVersionsAvailable=_ipVersionsAvailable;
@property(copy, nonatomic) NSString *wirelessChannel; // @synthesize wirelessChannel=_wirelessChannel;
@property(copy, nonatomic) NSString *ssid; // @synthesize ssid=_ssid;
@property(copy, nonatomic) NSString *networkSpec; // @synthesize networkSpec=_networkSpec;
@property(copy, nonatomic) NSString *networkType; // @synthesize networkType=_networkType;
@property(copy, nonatomic) NSString *networkCode; // @synthesize networkCode=_networkCode;
@property(copy, nonatomic) NSString *countryCode; // @synthesize countryCode=_countryCode;
@property(copy, nonatomic) NSString *carrier; // @synthesize carrier=_carrier;
@property(nonatomic) _Bool anyExternalPlayback; // @synthesize anyExternalPlayback=_anyExternalPlayback;
@property(nonatomic) int displayMode; // @synthesize displayMode=_displayMode;
@property(retain, nonatomic) NSDictionary *inititalBandwidthCap; // @synthesize inititalBandwidthCap=_inititalBandwidthCap;
@property(nonatomic) unsigned int integerPreferredPeakBps; // @synthesize integerPreferredPeakBps=_integerPreferredPeakBps;
@property(nonatomic) unsigned int initialAudioKbps; // @synthesize initialAudioKbps=_initialAudioKbps;
@property(nonatomic) unsigned int initialVideoKbps; // @synthesize initialVideoKbps=_initialVideoKbps;
@property(nonatomic) unsigned int subtitleKbps; // @synthesize subtitleKbps=_subtitleKbps;
@property(nonatomic) unsigned int audioKbps; // @synthesize audioKbps=_audioKbps;
@property(nonatomic) unsigned int videoKbps; // @synthesize videoKbps=_videoKbps;
@property(nonatomic) unsigned long long expectedInitialVideoKbps; // @synthesize expectedInitialVideoKbps=_expectedInitialVideoKbps;
@property(nonatomic) _Bool hasDRM; // @synthesize hasDRM=_hasDRM;
@property(copy, nonatomic) NSString *groupNames; // @synthesize groupNames=_groupNames;
@property(copy, nonatomic) NSString *playbackCorrelationId; // @synthesize playbackCorrelationId=_playbackCorrelationId;
@property(copy, nonatomic) NSString *playbackContextId; // @synthesize playbackContextId=_playbackContextId;
@property(copy, nonatomic) NSString *downloadTransactionId; // @synthesize downloadTransactionId=_downloadTransactionId;
@property(copy, nonatomic) NSString *offlineTransactionId; // @synthesize offlineTransactionId=_offlineTransactionId;
@property(retain, nonatomic) NSMutableDictionary *videoDownloadableIdsToKbps; // @synthesize videoDownloadableIdsToKbps=_videoDownloadableIdsToKbps;
@property(copy, nonatomic) NSString *initialAudioDownloadableId; // @synthesize initialAudioDownloadableId=_initialAudioDownloadableId;
@property(copy, nonatomic) NSString *initialVideoDownloadableId; // @synthesize initialVideoDownloadableId=_initialVideoDownloadableId;
@property(copy, nonatomic) NSString *subtitleDownloadableId; // @synthesize subtitleDownloadableId=_subtitleDownloadableId;
@property(copy, nonatomic) NSString *audioDownloadableId; // @synthesize audioDownloadableId=_audioDownloadableId;
@property(copy, nonatomic) NSString *videoDownloadableId; // @synthesize videoDownloadableId=_videoDownloadableId;
@property(copy, nonatomic) NSString *subtitleTrackId; // @synthesize subtitleTrackId=_subtitleTrackId;
@property(copy, nonatomic) NSString *subtitleBCP47; // @synthesize subtitleBCP47=_subtitleBCP47;
@property(nonatomic) unsigned int audioChannels; // @synthesize audioChannels=_audioChannels;
@property(copy, nonatomic) NSString *audioBCP47; // @synthesize audioBCP47=_audioBCP47;
@property(copy, nonatomic) BladeRunnerAseTimeStamp *movieTotal; // @synthesize movieTotal=_movieTotal;
@property(copy, nonatomic) BladeRunnerAseTimeStamp *movieStop; // @synthesize movieStop=_movieStop;
@property(nonatomic) long long movieStartSeconds; // @synthesize movieStartSeconds=_movieStartSeconds;
@property(nonatomic) long long playbackTSInMS; // @synthesize playbackTSInMS=_playbackTSInMS;
@property(nonatomic) int playbackState; // @synthesize playbackState=_playbackState;
@property(nonatomic) _Bool playbackErrorStateSent; // @synthesize playbackErrorStateSent=_playbackErrorStateSent;
@property(retain, nonatomic) BladeRunnerPlaybackErrorState *playbackErrorState; // @synthesize playbackErrorState=_playbackErrorState;
@property(copy, nonatomic) BladeRunnerTime *playbackStallTime; // @synthesize playbackStallTime=_playbackStallTime;
@property(copy, nonatomic) BladeRunnerTime *playbackStopTime; // @synthesize playbackStopTime=_playbackStopTime;
@property(nonatomic) long long respositionCompleteTimeMS; // @synthesize respositionCompleteTimeMS=_respositionCompleteTimeMS;
@property(nonatomic) _Bool didRepositionPlaybackResumeReceived; // @synthesize didRepositionPlaybackResumeReceived=_didRepositionPlaybackResumeReceived;
@property(nonatomic) _Bool didRepositionWaitingOnPlaybackResume; // @synthesize didRepositionWaitingOnPlaybackResume=_didRepositionWaitingOnPlaybackResume;
@property(nonatomic) _Bool hasPlayerUIPresented; // @synthesize hasPlayerUIPresented=_hasPlayerUIPresented;
@property(copy, nonatomic) BladeRunnerTime *playbackStartTime; // @synthesize playbackStartTime=_playbackStartTime;
@property(retain, nonatomic) NSString *playdelayUniqueRequstIdentifier; // @synthesize playdelayUniqueRequstIdentifier=_playdelayUniqueRequstIdentifier;
@property(copy, nonatomic) BladeRunnerTime *playbackInitiateTime; // @synthesize playbackInitiateTime=_playbackInitiateTime;
@property(copy, nonatomic) BladeRunnerTime *movieOpenTime; // @synthesize movieOpenTime=_movieOpenTime;
@property(copy, nonatomic) NSDictionary *uiPlayContextRaw; // @synthesize uiPlayContextRaw=_uiPlayContextRaw;
@property(copy, nonatomic) NSDictionary *uiDownloadContextRaw; // @synthesize uiDownloadContextRaw=_uiDownloadContextRaw;
@property(nonatomic) _Bool intrplayNeedsCriticalResumePlay; // @synthesize intrplayNeedsCriticalResumePlay=_intrplayNeedsCriticalResumePlay;
@property(nonatomic) _Bool receivedLM; // @synthesize receivedLM=_receivedLM;
@property(nonatomic) _Bool requestedLM; // @synthesize requestedLM=_requestedLM;
@property(nonatomic) _Bool userDidMatchContentForPlayback; // @synthesize userDidMatchContentForPlayback=_userDidMatchContentForPlayback;
@property(nonatomic) _Bool shouldReportContentMatching; // @synthesize shouldReportContentMatching=_shouldReportContentMatching;
@property(nonatomic) _Bool playbackEndedOnFork; // @synthesize playbackEndedOnFork=_playbackEndedOnFork;
@property(nonatomic) _Bool isSupplemental; // @synthesize isSupplemental=_isSupplemental;
@property(nonatomic) _Bool isBranching; // @synthesize isBranching=_isBranching;
@property(nonatomic) unsigned long long ldLicenseRetryFirstEventTimestamp; // @synthesize ldLicenseRetryFirstEventTimestamp=_ldLicenseRetryFirstEventTimestamp;
@property(nonatomic) _Bool ldlSuccess; // @synthesize ldlSuccess=_ldlSuccess;
@property(retain, nonatomic) NSString *licenseStrategy; // @synthesize licenseStrategy=_licenseStrategy;
@property(retain, nonatomic) NSMutableArray *ldLicenseRetryEvents; // @synthesize ldLicenseRetryEvents=_ldLicenseRetryEvents;
@property(retain, nonatomic) NSMutableArray *fullLicenseRetryEvents; // @synthesize fullLicenseRetryEvents=_fullLicenseRetryEvents;
@property(nonatomic) long long prefetchRetryCount; // @synthesize prefetchRetryCount=_prefetchRetryCount;
@property(nonatomic) float volumeAtStartPlay; // @synthesize volumeAtStartPlay=_volumeAtStartPlay;
@property(nonatomic) float volume; // @synthesize volume=_volume;
@property(copy, nonatomic) NSString *activeAudioRouteStringAtStartPlay; // @synthesize activeAudioRouteStringAtStartPlay=_activeAudioRouteStringAtStartPlay;
@property(copy, nonatomic) NSString *activeAudioRouteString; // @synthesize activeAudioRouteString=_activeAudioRouteString;
@property(copy, nonatomic) NSString *UILabel; // @synthesize UILabel=_UILabel;
@property(nonatomic) _Bool startPlayEventsClosed; // @synthesize startPlayEventsClosed=_startPlayEventsClosed;
@property(nonatomic) _Bool reusingAVPlayer; // @synthesize reusingAVPlayer=_reusingAVPlayer;
@property(nonatomic) _Bool anyVariableRatePlayback; // @synthesize anyVariableRatePlayback=_anyVariableRatePlayback;
@property(nonatomic) _Bool wantsExtendedPDSSessionParams; // @synthesize wantsExtendedPDSSessionParams=_wantsExtendedPDSSessionParams;
@property(nonatomic) _Bool isUIAutoplay; // @synthesize isUIAutoplay=_isUIAutoplay;
@property(nonatomic) _Bool endPlayLogged; // @synthesize endPlayLogged=_endPlayLogged;
@property(nonatomic) _Bool startPlayLogged; // @synthesize startPlayLogged=_startPlayLogged;
@property(nonatomic) _Bool prefetched; // @synthesize prefetched=_prefetched;
@property(nonatomic) _Bool cachehit; // @synthesize cachehit=_cachehit;
@property(retain, nonatomic) NSMutableArray *keyUrlErrors; // @synthesize keyUrlErrors=_keyUrlErrors;
@property(nonatomic) unsigned int mediaDurationTime; // @synthesize mediaDurationTime=_mediaDurationTime;
@property(nonatomic) float persistentRate; // @synthesize persistentRate=_persistentRate;
@property(nonatomic) unsigned int trackingId; // @synthesize trackingId=_trackingId;
@property(copy, nonatomic) NSString *movieId; // @synthesize movieId=_movieId;
@property(copy, nonatomic) NSString *xid; // @synthesize xid=_xid;
@property(nonatomic) long long lastEventTimestamp; // @synthesize lastEventTimestamp=_lastEventTimestamp;
@property(nonatomic) long long lastLogblobTimestamp; // @synthesize lastLogblobTimestamp=_lastLogblobTimestamp;
@property(nonatomic) unsigned long long mnTimescale; // @synthesize mnTimescale=_mnTimescale;
@property(nonatomic) unsigned long long mnAseTimeStamp; // @synthesize mnAseTimeStamp=_mnAseTimeStamp;
@property(retain, nonatomic) TransitionRecord *transitionRecord; // @synthesize transitionRecord=_transitionRecord;
@property(retain, nonatomic) BreadcrumbAudit *breadcrumbAudit; // @synthesize breadcrumbAudit=_breadcrumbAudit;
@property(readonly, copy, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
@property(retain, nonatomic) NSMutableArray *deferredLogblobs; // @synthesize deferredLogblobs=_deferredLogblobs;
@property(retain, nonatomic) BladeRunnerCdnIdDlIdCache *cdnIdDlIdCache; // @synthesize cdnIdDlIdCache=_cdnIdDlIdCache;
@property(retain, nonatomic) id <PlatformLogger> logging; // @synthesize logging=_logging;
@property(retain, nonatomic) LicenseEventAudit *licenseEventAudit; // @synthesize licenseEventAudit=_licenseEventAudit;
- (void)sendPendingLogblobs;
- (void)logOfflineCdnSel:(id)arg1 oldCdnId:(id)arg2 newCdnId:(id)arg3 oldDxid:(id)arg4 newDxid:(id)arg5;
- (id)cdnIdWithDownloadableId:(id)arg1;
- (void)_cdnSelectionCdnId:(unsigned int)arg1 downloadableId:(id)arg2;
- (void)cdnSelectionCdnId:(unsigned int)arg1 downloadableId:(id)arg2;
- (void)_updateCdnStatistics:(id)arg1 cdnSelectionReason:(long long)arg2;
- (void)updateCdnStatistics:(id)arg1 cdnSelectionReason:(long long)arg2;
- (id)apiLinksForPlayback;
- (void)preservePlaybackLinks;
- (void)updateLogblobWithMobileBitrateCaps:(id)arg1;
- (void)updateLogblob:(id)arg1 withAudioDetailsForDownloadableId:(id)arg2;
- (void)updateLogblob:(id)arg1 withVmafForDownloadableId:(id)arg2;
- (void)updateLogblobWithGroupNames:(id)arg1;
- (void)updateLogblobWithPlaybackCorrelationId:(id)arg1;
- (void)updateLogblobWithPlaybackContextId:(id)arg1;
- (void)updateLogblobWithClientTime:(id)arg1;
- (void)updateLogblobWithLogTypeAudit:(id)arg1 forType:(id)arg2;
- (void)updateLogblobWithKeyUrlErrors:(id)arg1;
- (void)updateLogblobWithNetworkClassification:(id)arg1;
- (void)updateLogblobWithOfflineInformation:(id)arg1;
- (_Bool)updateLogblob:(id)arg1 withErrorState:(id)arg2;
- (id)commonLogblob;
- (id)endplayLogblobWithReason:(id)arg1 soffms:(long long)arg2 moffseconds:(long long)arg3 logLevelError:(_Bool *)arg4 isMidPlay:(_Bool)arg5;
- (void)appendAdditionalEndplayInfo:(id)arg1;
- (id)logblobFormattedOutputDist;
- (id)playTimesCopy;
- (id)networkDistributionCopy;
- (id)cdnSelectionCopy;
- (void)recordVariantPlaylistFailedForDownloadableId:(id)arg1;
- (void)recordOnDemandVariantStartedForDownloadableId:(id)arg1;
- (void)recordStartPlayBandwidthCap:(id)arg1;
- (void)recordSubtitleQOEForDldId:(id)arg1 expected:(long long)arg2 missed:(long long)arg3;
- (id)clientTime;
- (void)logMissingEventLink:(id)arg1;
- (id)_availableLinksForMissingEventLink;
- (void)recordLastTimestampForSynthetics;
- (_Bool)eventPlayback:(id)arg1 additionalInformation:(id)arg2;
- (void)handleBackgrounding:(id)arg1;
- (id)playbackEventWithAction:(unsigned long long)arg1 positionMS:(long long)arg2 eventType:(id)arg3 additionalInformation:(id)arg4;
- (id)eventDataGeneration:(long long)arg1 event:(id)arg2 additionalInformation:(id)arg3;
- (id)sessionParams;
- (void)logSend:(id)arg1 logblob:(id)arg2 severity:(_Bool)arg3;
- (void)logPlaybackAborted:(id)arg1;
- (void)logStateChange:(long long)arg1 newState:(int)arg2 oldState:(int)arg3;
- (void)userUnpaused:(long long)arg1 movieTime:(unsigned int)arg2;
- (void)userPaused:(long long)arg1 movieTime:(unsigned int)arg2;
- (void)reportReposMS:(long long)arg1 from:(id)arg2 to:(id)arg3;
- (void)logUserEngaged;
- (void)_enterPauseState:(long long)arg1;
- (void)beginSeek;
- (void)recordSyntheticEndPlayLogblob;
- (void)recordSyntheticPlaybackStop;
- (void)recordMidplayLogblob;
- (id)playbackStateToString:(int)arg1;
- (void)logAudioChgStrm:(long long)arg1 movieTimeMs:(long long)arg2 oldDlid:(id)arg3 newDlid:(id)arg4 oldBitrate:(unsigned int)arg5 newBitrate:(unsigned int)arg6 bandwidth:(unsigned int)arg7;
- (void)logChgStrm:(long long)arg1 movieTimeMs:(long long)arg2 oldDlid:(id)arg3 newDlid:(id)arg4 oldBitrate:(unsigned int)arg5 newBitrate:(unsigned int)arg6 bandwidth:(unsigned int)arg7;
- (void)logSubtitleSwitchOldCode:(id)arg1 oldTrackId:(id)arg2 newCode:(id)arg3 newTrackId:(id)arg4 soffms:(long long)arg5;
- (void)logAudioSwitchOldCode:(id)arg1 oldChannels:(unsigned int)arg2 newCode:(id)arg3 newChannels:(unsigned int)arg4 soffms:(long long)arg5;
- (void)logRepos:(long long)arg1 eventTimeMS:(long long)arg2 oldpos:(id)arg3 newpos:(id)arg4;
- (void)logIntrPlay:(long long)arg1 imageBasedSubtitleStall:(_Bool)arg2;
- (void)logLogBlobOfType:(id)arg1 withProperties:(id)arg2;
- (void)logDebugLogBlobForError:(id)arg1 forDownloadableId:(id)arg2 fromFunction:(id)arg3;
- (void)_sendStopEvent;
- (void)_sendLicenseRelease;
- (void)_sendEndPlayLogblobWithReason:(id)arg1 soffms:(long long)arg2;
- (void)_logSubtitleQoe;
- (void)logEndPlay:(long long)arg1 reason:(id)arg2;
- (void)logResumePlay:(long long)arg1 resumeDelay:(long long)arg2 reason:(id)arg3;
- (void)setNetworkIdentifier:(id)arg1;
- (long long)calculatePlaydelayFromStartplayevents:(long long)arg1;
- (void)_sendStartPlayEventsForReason:(id)arg1;
- (void)_submitBreadcrumbsLogblob:(_Bool)arg1;
- (void)logStartPlay:(long long)arg1;
- (long long)vmafForDownloadableId:(id)arg1;
- (void)_updatePlaybackPtsMS:(long long)arg1 cdnId:(int)arg2 totalTransferredBytes:(long long)arg3;
- (void)_logRepositionResumePlay;
- (void)updatePlaybackPtsMS:(long long)arg1 cdnId:(int)arg2 totalTransferredBytes:(long long)arg3;
- (void)playbackRecovered:(id)arg1 movieTime:(id)arg2;
- (_Bool)isPlaybackAborted;
- (_Bool)isPlaybackOK;
- (void)_sendSpliceEventAudioId:(id)arg1 subtitleId:(id)arg2;
- (void)sendSpliceEventAudioId:(id)arg1 subtitleId:(id)arg2;
- (void)_playbackStopped:(id)arg1 movieTime:(id)arg2;
- (void)_playbackStartedMS:(long long)arg1 movieTimeMS:(long long)arg2;
- (void)playbackStartedMS:(long long)arg1 movieTimeMS:(long long)arg2;
- (void)_logTransitionRecord:(id)arg1;
- (void)didEndSegmentTransitionWithPlaybackState:(id)arg1 transitionType:(long long)arg2 success:(_Bool)arg3 transitionRecord:(id)arg4;
- (void)didEndSegmentTransitionWithPlaybackState:(id)arg1 transitionType:(long long)arg2 success:(_Bool)arg3;
- (void)willBeginSegmentTransitionWithPlaybackState:(id)arg1 userInitiated:(_Bool)arg2 seamlessRequested:(_Bool)arg3 transitionWeight:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (void)willBeginSegmentTransitionWithPlaybackState:(id)arg1 userInitiated:(_Bool)arg2 seamlessRequested:(_Bool)arg3 transitionWeight:(long long)arg4;
- (void)playbackMarkClosed:(id)arg1 movieTime:(id)arg2;
- (void)_sendSpeedChangedLogblobFrom:(int)arg1 to:(int)arg2 soffms:(long long)arg3 movieTime:(id)arg4;
- (void)playbackRateChanged:(id)arg1 movieTime:(id)arg2 rate:(float)arg3;
- (void)_updatePerVideoDownloadableId;
- (void)_streamSelected:(int)arg1 downloadableId:(id)arg2 kbps:(unsigned int)arg3;
- (void)streamSelected:(int)arg1 downloadableId:(id)arg2 kbps:(unsigned int)arg3;
- (void)playBackDisplayChanged:(int)arg1;
- (void)setPlaybackEndTime:(id)arg1 movieTime:(id)arg2 playerError:(id)arg3 isBranching:(_Bool)arg4 playbackEndedOnFork:(_Bool)arg5 fromFunction:(id)arg6;
- (void)setBranching:(_Bool)arg1;
- (void)setSupplemental:(_Bool)arg1;
- (void)setPlaybackEndTime:(id)arg1 movieTime:(id)arg2 playerError:(id)arg3 fromFunction:(id)arg4;
- (void)debuggingError:(id)arg1 errorContext:(id)arg2 fromFunction:(id)arg3;
- (void)independentInfo:(id)arg1 errorContext:(id)arg2 fromFunction:(id)arg3;
- (void)independentError:(id)arg1 errorContext:(id)arg2 fromFunction:(id)arg3;
- (void)setPlaybackStallTime:(id)arg1 imageBasedSubtitleStall:(_Bool)arg2;
- (void)setPlaybackResumeTime:(id)arg1;
- (void)_setPlaybackInitiateTime:(id)arg1;
- (void)setPlaybackInitiateTime:(id)arg1 movieStartSeconds:(long long)arg2;
- (void)setPlayerUIPresented:(id)arg1;
- (void)updateNetworkInterfaceParams:(_Bool)arg1;
- (id)findNetworkEntry:(id)arg1;
- (id)currentNetworkDictionary;
- (void)logNetworkSel:(id)arg1 defaultInterfaceName:(id)arg2 carrier:(id)arg3 countryCode:(id)arg4 networkCode:(id)arg5 networkType:(id)arg6 networkSpec:(id)arg7 wirelessChannel:(id)arg8 ipVersionsAvailable:(id)arg9 ipVersionPreferred:(id)arg10 ipVersionPolicy:(id)arg11 additionalInfo:(id)arg12 forced:(_Bool)arg13;
- (void)setPlaydelayTimestamp:(id)arg1;
- (void)recordLicenseStrategy:(id)arg1;
- (void)recordLDLicenseRetry:(id)arg1;
- (void)recordFullLicenseRetry:(id)arg1;
- (void)incrementPrefetchRetryCount;
- (void)setActiveAudioRouteString:(id)arg1 volume:(float)arg2 onEventTime:(id)arg3 movieTime:(id)arg4;
- (void)_sendVolumechangeLogblobWithVolume:(float)arg1 soffms:(long long)arg2 movieTime:(id)arg3;
- (void)setPrefetchedManifest:(_Bool)arg1;
- (void)setCacheHit:(_Bool)arg1;
- (void)_setStartPlayEvent:(id)arg1 timestampMS:(unsigned long long)arg2;
- (void)recordLicenseEvent:(unsigned long long)arg1;
- (void)recordLicensedManifestReceipt:(_Bool)arg1;
- (void)recordLicensedManifestRequest:(_Bool)arg1;
- (void)recordError:(id)arg1 forKeyUrl:(id)arg2 keyUrlDetails:(id)arg3;
- (void)setStartPlayEvent:(id)arg1 timestampMS:(unsigned long long)arg2;
- (void)setPreferredVideoNominalBps:(double)arg1;
- (void)setUiPlayContext:(id)arg1;
- (void)setAdditionalGroupNames:(id)arg1;
- (void)endPeriodicWorkTimer;
- (void)updatePeriodicWorkTimer;
- (void)startPeriodicWorkTimer;
- (void)resetExtraKeepAliveTimer;
- (void)setAuxiliaryLogInfo:(id)arg1;
- (void)playbackEnded;
- (_Bool)isOffline;
- (void)subtitleBCP47:(id)arg1 trackid:(id)arg2;
- (void)audioBCP47:(id)arg1 audioChannels:(unsigned int)arg2;
- (id)currentAudioDownloadableId;
- (void)stopMonitoringResignActive;
- (void)startMonitoringResignActive;
- (void)dealloc;
- (id)initWithMovieId:(id)arg1 playbackId:(id)arg2 offline:(_Bool)arg3 linkAccess:(id)arg4;
- (id)initWithMovieId:(id)arg1 playbackId:(id)arg2 offline:(_Bool)arg3;
- (void)setMovieDetails:(id)arg1;
- (void)updatePlayTimes:(id)arg1 downloadableId:(id)arg2 time:(unsigned int)arg3;
- (void)updateMediaDurationTime:(unsigned int)arg1;
- (void)updateOutputDist:(int)arg1 time:(unsigned int)arg2;
- (void)updateCdnIdType:(id)arg1 downloadableId:(id)arg2 time:(unsigned int)arg3 kbps:(unsigned int)arg4;
- (id)typeToCdndldist:(id)arg1;
- (id)entryFromMediaEntries:(id)arg1 withDownloadableId:(id)arg2;

@end

