//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/AVContentKeySessionDelegate-Protocol.h>

@class AVContentKeySession, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSString;
@protocol LicenseCoordinatorDelegate, OS_dispatch_queue, OS_dispatch_semaphore;

@interface LicenseCoordinator : NSObject <AVContentKeySessionDelegate>
{
    _Bool _areLicenseChallangeResponsesValid;
    _Bool _isPrefetchRequest;
    NSString *_playbackId;
    unsigned long long _options;
    NSData *_fairplayAppCert;
    NSDictionary *_fakeUrlToTrackNameMap;
    NSMutableDictionary *_fakeUrlToLicenseChallengeMap;
    NSMutableArray *_licenseChallengeResponses;
    NSMutableDictionary *_fakeChallengeUuidToLicenseChallengeMap;
    NSMutableDictionary *_realKeyToFakeKeyMap;
    AVContentKeySession *_contentKeySession;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_semaphore> *_licenseChallengeCompleteSemaphore;
    unsigned long long _outstandingLicenseChallenges;
    id <LicenseCoordinatorDelegate> _licenseCoordinatorDelegate;
}

+ (id)_keyRequestOptions;
+ (id)keyUrlPrefixForPlaybackId:(id)arg1;
- (void).cxx_destruct;
@property(nonatomic) __weak id <LicenseCoordinatorDelegate> licenseCoordinatorDelegate; // @synthesize licenseCoordinatorDelegate=_licenseCoordinatorDelegate;
@property(nonatomic) _Bool isPrefetchRequest; // @synthesize isPrefetchRequest=_isPrefetchRequest;
@property(nonatomic) _Bool areLicenseChallangeResponsesValid; // @synthesize areLicenseChallangeResponsesValid=_areLicenseChallangeResponsesValid;
@property(nonatomic) unsigned long long outstandingLicenseChallenges; // @synthesize outstandingLicenseChallenges=_outstandingLicenseChallenges;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *licenseChallengeCompleteSemaphore; // @synthesize licenseChallengeCompleteSemaphore=_licenseChallengeCompleteSemaphore;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) AVContentKeySession *contentKeySession; // @synthesize contentKeySession=_contentKeySession;
@property(retain, nonatomic) NSMutableDictionary *realKeyToFakeKeyMap; // @synthesize realKeyToFakeKeyMap=_realKeyToFakeKeyMap;
@property(retain, nonatomic) NSMutableDictionary *fakeChallengeUuidToLicenseChallengeMap; // @synthesize fakeChallengeUuidToLicenseChallengeMap=_fakeChallengeUuidToLicenseChallengeMap;
@property(retain, nonatomic) NSMutableArray *licenseChallengeResponses; // @synthesize licenseChallengeResponses=_licenseChallengeResponses;
@property(retain, nonatomic) NSMutableDictionary *fakeUrlToLicenseChallengeMap; // @synthesize fakeUrlToLicenseChallengeMap=_fakeUrlToLicenseChallengeMap;
@property(retain, nonatomic) NSDictionary *fakeUrlToTrackNameMap; // @synthesize fakeUrlToTrackNameMap=_fakeUrlToTrackNameMap;
@property(retain, nonatomic) NSData *fairplayAppCert; // @synthesize fairplayAppCert=_fairplayAppCert;
@property(nonatomic) unsigned long long options; // @synthesize options=_options;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
- (void)contentKeySession:(id)arg1 didProvideContentKeyRequest:(id)arg2;
- (void)_startGeneratingLicenseChallenges;
- (void)_setupContentKeySession;
- (void)_setupFakeUrls;
- (id)_psshFromKeyURLString:(id)arg1;
- (id)_psshDataFromKeyURLString:(id)arg1;
- (id)associatedContentKeySession;
- (id)deferredLicenseChallengeResponses;
- (_Bool)hasLicenseChallangeResponses;
- (void)processManifestResponse:(id)arg1;
- (_Bool)updateManifestRequestArguments:(id)arg1 timeoutInMS:(unsigned long long)arg2;
- (id)managedPsshCoordinator;
- (id)initWithPlaybackId:(id)arg1 options:(unsigned long long)arg2 fairplayAppCert:(id)arg3 delegate:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

