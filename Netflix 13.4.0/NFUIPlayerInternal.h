//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NFUIPlayer-Protocol.h"
#import "NFUIPlayerControllerDelegate-Protocol.h"
#import "NFUIPlayerViewControllerDelegate-Protocol.h"
#import "NFUIPlayerViewDelegate-Protocol.h"

@class AVPlayerLayer, NFLXOperation, NFUIPlayerController, NFUIPlayerLogger, NFUIPlayerViewController, NSDictionary, NSMutableArray, NSString, UIView, _TtC4Argo25AudioSessionConfiguration;
@protocol NFPlaygraphPlayerDelegate, NFUIPlayerControllerDelegate, NFUIPlayerDelegate, NFUIPlayerInternalDelegate, NFUIPlayerValidationDelegate, NfPlaybackSubtitleOption;

@interface NFUIPlayerInternal : NSObject <NFUIPlayerControllerDelegate, NFUIPlayerViewControllerDelegate, NFUIPlayerViewDelegate, NFUIPlayer>
{
    _Bool _pendingLoad;
    _Bool _pendingPlay;
    _Bool _pendingMute;
    _Bool _hasPresentedPlayer;
    float _currentAudibleVolume;
    id <NFUIPlayerInternalDelegate> _internalDelegate;
    id <NFUIPlayerValidationDelegate> _validationDelegate;
    NSString *_playerId;
    NSString *_collectionId;
    NFUIPlayerViewController *_playerViewController;
    unsigned long long _playerViewResizeMode;
    id <NFUIPlayerDelegate> _delegate;
    id <NFPlaygraphPlayerDelegate> _playgraphDelegate;
    id <NFUIPlayerControllerDelegate> _playerControllerDelegate;
    NFUIPlayerLogger<NFUIPlayerDelegate> *_logger;
    long long _priority;
    _TtC4Argo25AudioSessionConfiguration *_audioConfiguration;
    unsigned long long _autoPauseOptions;
    double _maxStreamBitrate;
    long long _autoPauseReason;
    NFUIPlayerController *_playerController;
    NSMutableArray *_playbackRequestQueue;
    NFLXOperation *_pendingLoadOperation;
    id <NfPlaybackSubtitleOption> _defaultSubtitleOption;
    id <NfPlaybackSubtitleOption> _currentSubtitleOption;
}

+ (id)playerWithId:(id)arg1 playbackRequest:(id)arg2;
- (void).cxx_destruct;
@property(retain, nonatomic) id <NfPlaybackSubtitleOption> currentSubtitleOption; // @synthesize currentSubtitleOption=_currentSubtitleOption;
@property(retain, nonatomic) id <NfPlaybackSubtitleOption> defaultSubtitleOption; // @synthesize defaultSubtitleOption=_defaultSubtitleOption;
@property(nonatomic) float currentAudibleVolume; // @synthesize currentAudibleVolume=_currentAudibleVolume;
@property(nonatomic) _Bool hasPresentedPlayer; // @synthesize hasPresentedPlayer=_hasPresentedPlayer;
@property(nonatomic) _Bool pendingMute; // @synthesize pendingMute=_pendingMute;
@property(nonatomic) _Bool pendingPlay; // @synthesize pendingPlay=_pendingPlay;
@property(nonatomic) _Bool pendingLoad; // @synthesize pendingLoad=_pendingLoad;
@property(nonatomic) __weak NFLXOperation *pendingLoadOperation; // @synthesize pendingLoadOperation=_pendingLoadOperation;
@property(retain, nonatomic) NSMutableArray *playbackRequestQueue; // @synthesize playbackRequestQueue=_playbackRequestQueue;
@property(retain, nonatomic) NFUIPlayerController *playerController; // @synthesize playerController=_playerController;
@property(nonatomic) long long autoPauseReason; // @synthesize autoPauseReason=_autoPauseReason;
@property(nonatomic) double maxStreamBitrate; // @synthesize maxStreamBitrate=_maxStreamBitrate;
@property(nonatomic) unsigned long long autoPauseOptions; // @synthesize autoPauseOptions=_autoPauseOptions;
@property(retain, nonatomic) _TtC4Argo25AudioSessionConfiguration *audioConfiguration; // @synthesize audioConfiguration=_audioConfiguration;
@property(nonatomic) long long priority; // @synthesize priority=_priority;
@property(retain, nonatomic) NFUIPlayerLogger<NFUIPlayerDelegate> *logger; // @synthesize logger=_logger;
@property(nonatomic) __weak id <NFUIPlayerControllerDelegate> playerControllerDelegate; // @synthesize playerControllerDelegate=_playerControllerDelegate;
@property(nonatomic) __weak id <NFPlaygraphPlayerDelegate> playgraphDelegate; // @synthesize playgraphDelegate=_playgraphDelegate;
@property(nonatomic) __weak id <NFUIPlayerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned long long playerViewResizeMode; // @synthesize playerViewResizeMode=_playerViewResizeMode;
@property(retain, nonatomic) NFUIPlayerViewController *playerViewController; // @synthesize playerViewController=_playerViewController;
@property(copy, nonatomic) NSString *collectionId; // @synthesize collectionId=_collectionId;
@property(copy, nonatomic) NSString *playerId; // @synthesize playerId=_playerId;
@property(nonatomic) __weak id <NFUIPlayerValidationDelegate> validationDelegate; // @synthesize validationDelegate=_validationDelegate;
@property(nonatomic) __weak id <NFUIPlayerInternalDelegate> internalDelegate; // @synthesize internalDelegate=_internalDelegate;
- (void)dealloc;
- (void)presentPlayerIfNeeded;
- (void)presentPlayerForPlayback;
- (id)audioOptionForLanguage:(id)arg1 assistiveAudio:(_Bool)arg2;
- (id)subtitleOptionForLanguage:(id)arg1;
- (void)adjustGeometryForPlayerView:(id)arg1 withAspectDetails:(id)arg2;
- (void)playerViewController:(id)arg1 videoWillAppear:(_Bool)arg2;
- (void)playerViewController:(id)arg1 videoDidAppear:(_Bool)arg2;
- (id)playerViewProviderForPlayer:(id)arg1;
- (void)playerView:(id)arg1 videoReadyForDisplay:(_Bool)arg2;
- (void)willRemovePlayerView;
- (double)playbackStreamLimit:(_Bool)arg1;
- (void)playerController:(id)arg1 platformControllerPlaybackBegan:(id)arg2;
- (void)playerController:(id)arg1 platformControllerReady:(id)arg2;
- (void)playerControllerReady:(id)arg1 playbackId:(id)arg2;
- (void)playerController:(id)arg1 choiceMapLoaded:(id)arg2;
- (void)playerController:(id)arg1 externalPlaybackActive:(_Bool)arg2;
- (void)playerController:(id)arg1 subtitleOptionChanged:(id)arg2 forAvailableSubtitleOptions:(id)arg3;
- (void)playerController:(id)arg1 audioOptionChanged:(id)arg2;
- (void)playerControllerWillStop:(id)arg1;
- (void)playerControllerWillPause:(id)arg1;
- (void)playerControllerWillPlay:(id)arg1;
- (void)playerController:(id)arg1 stateChange:(unsigned long long)arg2 previous:(unsigned long long)arg3;
- (void)playerController:(id)arg1 error:(id)arg2;
- (void)playerController:(id)arg1 timeUpdate:(double)arg2;
- (void)playerControllerReady:(id)arg1;
- (void)playerController:(id)arg1 willLoadRequest:(id)arg2;
- (void)setSubtitleConfiguration:(id)arg1;
- (void)setSubtitleRelativeFontSize:(double)arg1;
- (void)setSubtitleVerticalPosition:(double)arg1;
- (id)descriptionsForAvailableAudio;
- (id)availableAudioLanguages:(_Bool)arg1;
- (id)selectedAudioLanguage;
- (void)updateUIPlayContextForRequest:(id)arg1;
- (_Bool)selectAudioLanguage:(id)arg1 withAssistiveAudio:(_Bool)arg2 makeSticky:(_Bool)arg3;
- (id)descriptionsForAvailableSubtitles;
- (id)availableSubtitleLanguages;
- (id)selectedSubtitleLanguage;
- (id)defaultSubtitleLanguage;
- (_Bool)selectSubtitleLanguage:(id)arg1;
- (void)toggleSubtitlesOn:(_Bool)arg1 withFallbackLanguage:(id)arg2;
- (void)toggleMute:(_Bool)arg1;
- (void)stop;
- (void)seek:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)pauseWithReason:(long long)arg1;
- (void)pause;
- (void)playInternal;
- (void)play;
- (void)cancelLoading;
- (id)playbackXid;
- (id)playbackRequests;
- (id)loadOperation:(id)arg1;
@property(readonly, nonatomic) AVPlayerLayer *playerLayer;
@property(readonly, nonatomic) NSDictionary *videoAspectDetails;
@property(readonly, nonatomic) unsigned long long state;
@property(readonly, nonatomic, getter=isReady) _Bool ready;
- (id)platformController;
@property(readonly, nonatomic, getter=isExternalPlaybackActive) _Bool externalPlaybackActive;
@property(readonly, nonatomic) _Bool allowsExternalPlayback;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) float currentTimePercent;
@property(readonly, nonatomic) double currentTime;
@property(nonatomic) float volume;
@property(nonatomic) float rate;
@property(nonatomic) long long loopCount;
@property(retain, nonatomic) UIView *placeholderView;
@property(readonly, nonatomic) UIView *playerView;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

