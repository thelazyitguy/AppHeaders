//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/OfflineRecordProtocol-Protocol.h>

@class NSData, NSDate, NSDictionary, NSError, NSMapTable, NSMutableDictionary, NSNumber, NSString, NflxMovieDetails, OfflineKeyValueTable, OfflineRecordTable;

@interface OfflineTableEntry : NSObject <OfflineRecordProtocol>
{
    _Bool _updatesSuspended;
    NSNumber *_downloadId;
    NSDate *_timeCreated;
    NSString *_movieId;
    NSString *_downloadQuality;
    NSString *_offlineXid;
    NSString *_downloadXid;
    NSString *_trackId;
    NSString *_downloadState;
    NSNumber *_downloadProgress;
    NSNumber *_smartDownload;
    NSNumber *_isBranching;
    NSNumber *_isClearContent;
    NSNumber *_isSupplemental;
    NSNumber *_movieFetchOptions;
    NSString *_profileGUID;
    NSNumber *_assetExpectedSize;
    NSNumber *_assetActualSize;
    NSString *_assetPath;
    NSNumber *_firedCompleteEvent;
    NSNumber *_firedDeactivateEvent;
    NSNumber *_autoRefreshAllowed;
    NSNumber *_autoRefreshAttempts;
    NSNumber *_playWindowInterval;
    NSDate *_currentPlayWindowEnd;
    NSNumber *_playWindowRefreshLimit;
    NSDate *_licenseEnd;
    NSDate *_refreshLicenseTime;
    NSString *_yearlyLimitationType;
    NSNumber *_allocationsRemaining;
    NSString *_sourceShadowCacheId;
    NSNumber *_yearlyLimitWarningShown;
    NSString *_title;
    NSNumber *_retryCount;
    NSDate *_downloadStartTime;
    NSDate *_manifestCompleteTime;
    NSDate *_downloadCompleteTime;
    NSDate *_lastReportedProgressTime;
    NSString *_licenseReceiptOsVersion;
    NSDictionary *_playbackLimitations;
    NSDictionary *_progressMap;
    OfflineRecordTable *_recordTable;
    OfflineKeyValueTable *_keyValueTable;
    NSMutableDictionary *_keyPathColumnMap;
    NSMapTable *_properties;
}

- (void).cxx_destruct;
@property _Bool updatesSuspended; // @synthesize updatesSuspended=_updatesSuspended;
@property(retain) NSMapTable *properties; // @synthesize properties=_properties;
@property(retain) NSMutableDictionary *keyPathColumnMap; // @synthesize keyPathColumnMap=_keyPathColumnMap;
@property(retain) OfflineKeyValueTable *keyValueTable; // @synthesize keyValueTable=_keyValueTable;
@property(retain) OfflineRecordTable *recordTable; // @synthesize recordTable=_recordTable;
@property(retain) NSDictionary *progressMap; // @synthesize progressMap=_progressMap;
@property(retain) NSDictionary *playbackLimitations; // @synthesize playbackLimitations=_playbackLimitations;
@property(retain) NSString *licenseReceiptOsVersion; // @synthesize licenseReceiptOsVersion=_licenseReceiptOsVersion;
@property(retain) NSDate *lastReportedProgressTime; // @synthesize lastReportedProgressTime=_lastReportedProgressTime;
@property(retain) NSDate *downloadCompleteTime; // @synthesize downloadCompleteTime=_downloadCompleteTime;
@property(retain) NSDate *manifestCompleteTime; // @synthesize manifestCompleteTime=_manifestCompleteTime;
@property(retain) NSDate *downloadStartTime; // @synthesize downloadStartTime=_downloadStartTime;
@property(retain) NSNumber *retryCount; // @synthesize retryCount=_retryCount;
@property(retain) NSString *title; // @synthesize title=_title;
@property(retain) NSNumber *yearlyLimitWarningShown; // @synthesize yearlyLimitWarningShown=_yearlyLimitWarningShown;
@property(retain) NSString *sourceShadowCacheId; // @synthesize sourceShadowCacheId=_sourceShadowCacheId;
@property(retain) NSNumber *allocationsRemaining; // @synthesize allocationsRemaining=_allocationsRemaining;
@property(retain) NSString *yearlyLimitationType; // @synthesize yearlyLimitationType=_yearlyLimitationType;
@property(retain) NSDate *refreshLicenseTime; // @synthesize refreshLicenseTime=_refreshLicenseTime;
@property(retain) NSDate *licenseEnd; // @synthesize licenseEnd=_licenseEnd;
@property(retain) NSNumber *playWindowRefreshLimit; // @synthesize playWindowRefreshLimit=_playWindowRefreshLimit;
@property(retain) NSDate *currentPlayWindowEnd; // @synthesize currentPlayWindowEnd=_currentPlayWindowEnd;
@property(retain) NSNumber *playWindowInterval; // @synthesize playWindowInterval=_playWindowInterval;
@property(retain) NSNumber *autoRefreshAttempts; // @synthesize autoRefreshAttempts=_autoRefreshAttempts;
@property(retain) NSNumber *autoRefreshAllowed; // @synthesize autoRefreshAllowed=_autoRefreshAllowed;
@property(retain) NSNumber *firedDeactivateEvent; // @synthesize firedDeactivateEvent=_firedDeactivateEvent;
@property(retain) NSNumber *firedCompleteEvent; // @synthesize firedCompleteEvent=_firedCompleteEvent;
@property(retain) NSString *assetPath; // @synthesize assetPath=_assetPath;
@property(retain) NSNumber *assetActualSize; // @synthesize assetActualSize=_assetActualSize;
@property(retain) NSNumber *assetExpectedSize; // @synthesize assetExpectedSize=_assetExpectedSize;
@property(retain) NSString *profileGUID; // @synthesize profileGUID=_profileGUID;
@property(retain) NSNumber *movieFetchOptions; // @synthesize movieFetchOptions=_movieFetchOptions;
@property(retain) NSNumber *isSupplemental; // @synthesize isSupplemental=_isSupplemental;
@property(retain) NSNumber *isClearContent; // @synthesize isClearContent=_isClearContent;
@property(retain) NSNumber *isBranching; // @synthesize isBranching=_isBranching;
@property(retain) NSNumber *smartDownload; // @synthesize smartDownload=_smartDownload;
@property(retain) NSNumber *downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property(retain) NSString *downloadState; // @synthesize downloadState=_downloadState;
@property(retain) NSString *trackId; // @synthesize trackId=_trackId;
@property(retain) NSString *downloadXid; // @synthesize downloadXid=_downloadXid;
@property(retain) NSString *offlineXid; // @synthesize offlineXid=_offlineXid;
@property(retain) NSString *downloadQuality; // @synthesize downloadQuality=_downloadQuality;
@property(retain) NSString *movieId; // @synthesize movieId=_movieId;
@property(retain) NSDate *timeCreated; // @synthesize timeCreated=_timeCreated;
@property(retain) NSNumber *downloadId; // @synthesize downloadId=_downloadId;
@property(readonly, copy) NSString *description;
- (id)loggableSnapshotForEvent:(id)arg1;
- (id)loggableSnapshot;
- (id)incrementRetryCount;
- (id)calculatedAssetSize;
- (void)deleteFromDb;
- (void)removeAllFilePaths;
- (void)removeFilePathForKey:(id)arg1;
- (id)filePathForKey:(id)arg1;
- (id)assetURL;
@property(retain) NSDictionary *uiMetadata;
@property(retain) NSError *networkError;
@property(retain) NSData *secureStop;
@property(retain) NSDictionary *taskProgress;
- (void)setApiLink:(id)arg1 forKey:(id)arg2;
- (id)apiLinkForKey:(id)arg1;
- (void)setPlaylist:(id)arg1 forKey:(id)arg2;
- (id)playlistForKey:(id)arg1;
@property(retain) NSData *artwork;
@property(retain) NSDictionary *avOptions;
@property(retain) NSDictionary *trackingInfo;
@property(retain) NSDictionary *loggingDetails;
@property(retain) NflxMovieDetails *movieDetails;
@property(retain) NSData *contentKeyHash;
@property(retain) NSData *persistedContentKey;
@property(retain) NSError *lastError;
@property(retain) NSDictionary *imageSubtitles;
- (id)initWithStmt:(struct sqlite3_stmt *)arg1 offlineTable:(id)arg2 keyValueTable:(id)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)_columnNameFromKeyPath:(id)arg1;
- (void)suspendUpdatesDuringBlock:(CDUnknownBlockType)arg1;
- (void)_removeUpdates;
- (void)_setupUpdates;
- (id)observedProperties;
- (void)_setPropertiesFromStatement:(struct sqlite3_stmt *)arg1;
- (id)_stringFromStatememt:(struct sqlite3_stmt *)arg1 columnIndex:(int)arg2;
- (id)_dateFromStatememt:(struct sqlite3_stmt *)arg1 columnIndex:(int)arg2;
- (id)_decimalNumberFromStatememt:(struct sqlite3_stmt *)arg1 columnIndex:(int)arg2;
- (id)_numberFromStatememt:(struct sqlite3_stmt *)arg1 columnIndex:(int)arg2;
- (id)initWithDownloadId:(id)arg1 values:(id)arg2 offlineTable:(id)arg3 keyValueTable:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

