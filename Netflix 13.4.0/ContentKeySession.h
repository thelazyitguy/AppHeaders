//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/AVContentKeySessionDelegate-Protocol.h>
#import <Nbp/FPLicenseFetchDelegate-Protocol.h>

@class AVContentKeySession, AVURLAsset, FPLicenseFetch, ManagedPsshCoordinator, NSDictionary, NSMutableArray, NSMutableSet, NSString, NflxMovieDetails;
@protocol ContentKeySessionDelegate, OS_dispatch_queue, PlatformConfigProvider;

@interface ContentKeySession : NSObject <AVContentKeySessionDelegate, FPLicenseFetchDelegate>
{
    _Bool _delayCKSDeallocation;
    _Bool _isMovieClosed;
    _Bool _didPreloadKey;
    _Bool _canRenewTemporaryLicenses;
    _Bool _licenseDeliveryEnabled;
    _Bool _shouldRecordPendingLicenseRequestForUrl;
    _Bool _shouldFilterDelegateCallbacksByJob;
    _Bool _teardownCalled;
    _Bool _expireProcessed;
    _Bool _fetchPersistentLicenses;
    _Bool _shouldDelayTeardown;
    id <ContentKeySessionDelegate> _contentKeySessionDelegate;
    id <PlatformConfigProvider> _platformConfig;
    ManagedPsshCoordinator *_managedPsshCoordinator;
    NSObject<OS_dispatch_queue> *_serialQueue;
    AVContentKeySession *_contentKeySession;
    NflxMovieDetails *_movieDetails;
    NSDictionary *_refreshLinks;
    NSMutableArray *_contentKeySessionJobs;
    AVURLAsset *_avAsset;
    NSMutableArray *_contentKeyRequests;
    NSMutableArray *_deferredLicenseDelivery;
    NSString *_playbackId;
    NSString *_xid;
    FPLicenseFetch *_fpLicenseFetch;
    long long _expireWaitCountRemaining;
    NSMutableSet *_mediaSessionIds;
    unsigned long long _requiredLicenseChallengeVersion;
}

+ (id)errorForUndoPreloadKeys;
+ (id)errorForContentKeySessionClosed;
+ (id)createStringFromDict:(id)arg1;
+ (id)_assetIdFromKeyURLString:(id)arg1;
+ (id)_assetIdStringFromKeyURLString:(id)arg1;
+ (id)_keyRequestOptions;
+ (id)addContentKeyRecipientAVAssetInvalidatedKey;
+ (id)addContentKeyRecipientRetryKey;
+ (_Bool)canRenewTemporaryLicenses;
+ (_Bool)isContentKeySessionSupported;
+ (_Bool)willGenerateExpiredSessionReport;
+ (void)handleOrphanedContenKeySessionRequest:(id)arg1;
- (void).cxx_destruct;
@property(nonatomic) unsigned long long requiredLicenseChallengeVersion; // @synthesize requiredLicenseChallengeVersion=_requiredLicenseChallengeVersion;
@property(retain, nonatomic) NSMutableSet *mediaSessionIds; // @synthesize mediaSessionIds=_mediaSessionIds;
@property(nonatomic) _Bool shouldDelayTeardown; // @synthesize shouldDelayTeardown=_shouldDelayTeardown;
@property(nonatomic) long long expireWaitCountRemaining; // @synthesize expireWaitCountRemaining=_expireWaitCountRemaining;
@property(nonatomic) _Bool fetchPersistentLicenses; // @synthesize fetchPersistentLicenses=_fetchPersistentLicenses;
@property(nonatomic) _Bool expireProcessed; // @synthesize expireProcessed=_expireProcessed;
@property(nonatomic) _Bool teardownCalled; // @synthesize teardownCalled=_teardownCalled;
@property(nonatomic) _Bool shouldFilterDelegateCallbacksByJob; // @synthesize shouldFilterDelegateCallbacksByJob=_shouldFilterDelegateCallbacksByJob;
@property(nonatomic) _Bool shouldRecordPendingLicenseRequestForUrl; // @synthesize shouldRecordPendingLicenseRequestForUrl=_shouldRecordPendingLicenseRequestForUrl;
@property(nonatomic) _Bool licenseDeliveryEnabled; // @synthesize licenseDeliveryEnabled=_licenseDeliveryEnabled;
@property(nonatomic) _Bool canRenewTemporaryLicenses; // @synthesize canRenewTemporaryLicenses=_canRenewTemporaryLicenses;
@property(retain, nonatomic) FPLicenseFetch *fpLicenseFetch; // @synthesize fpLicenseFetch=_fpLicenseFetch;
@property(retain, nonatomic) NSString *xid; // @synthesize xid=_xid;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
@property(nonatomic) _Bool didPreloadKey; // @synthesize didPreloadKey=_didPreloadKey;
@property(retain, nonatomic) NSMutableArray *deferredLicenseDelivery; // @synthesize deferredLicenseDelivery=_deferredLicenseDelivery;
@property(retain, nonatomic) NSMutableArray *contentKeyRequests; // @synthesize contentKeyRequests=_contentKeyRequests;
@property(retain, nonatomic) AVURLAsset *avAsset; // @synthesize avAsset=_avAsset;
@property(retain, nonatomic) NSMutableArray *contentKeySessionJobs; // @synthesize contentKeySessionJobs=_contentKeySessionJobs;
@property(retain, nonatomic) NSDictionary *refreshLinks; // @synthesize refreshLinks=_refreshLinks;
@property(retain, nonatomic) NflxMovieDetails *movieDetails; // @synthesize movieDetails=_movieDetails;
@property(retain, nonatomic) AVContentKeySession *contentKeySession; // @synthesize contentKeySession=_contentKeySession;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(nonatomic) _Bool isMovieClosed; // @synthesize isMovieClosed=_isMovieClosed;
@property(nonatomic) _Bool delayCKSDeallocation; // @synthesize delayCKSDeallocation=_delayCKSDeallocation;
@property(retain, nonatomic) ManagedPsshCoordinator *managedPsshCoordinator; // @synthesize managedPsshCoordinator=_managedPsshCoordinator;
@property(retain, nonatomic) id <PlatformConfigProvider> platformConfig; // @synthesize platformConfig=_platformConfig;
@property(readonly, copy) NSString *description;
- (void)fpLicenseFetch:(id)arg1 didReceiveLicenseChallengeResponses:(id)arg2 rawResponse:(id)arg3 error:(id)arg4;
- (void)fpLicenseFetchWillStartLicenseRequest:(id)arg1 withRequestArguments:(id)arg2 ldl:(_Bool)arg3;
- (void)fpLicenseFetchDidEndLicenseRequest:(id)arg1 ldl:(_Bool)arg2;
- (void)contentKeySessionContentProtectionSessionIdentifierDidChange:(id)arg1;
- (_Bool)contentKeySession:(id)arg1 shouldRetryContentKeyRequest:(id)arg2 reason:(id)arg3;
- (void)contentKeySession:(id)arg1 contentKeyRequest:(id)arg2 didFailWithError:(id)arg3;
- (void)contentKeySession:(id)arg1 didProvidePersistableContentKeyRequest:(id)arg2;
- (void)contentKeySessionDidGenerateExpiredSessionReport:(id)arg1;
- (void)contentKeySession:(id)arg1 didProvideRenewingContentKeyRequest:(id)arg2;
- (void)contentKeySession:(id)arg1 didProvideContentKeyRequest:(id)arg2;
- (void)contentKeySessionDidProvideContentKeyRequest:(id)arg1 isRenewal:(_Bool)arg2;
- (void)_processContentKeyRequest:(id)arg1 isRenewal:(_Bool)arg2;
- (void)_tryChallenges:(id)arg1 ldl:(_Bool)arg2;
- (void)_processJob:(id)arg1 withContentKeyRequest:(id)arg2 withKeyRequestData:(id)arg3 error:(id)arg4;
- (id)_trackNameForChallengeRequestId:(id)arg1;
- (void)_loadAvAssetKeysForUrls:(id)arg1 ldl:(_Bool)arg2;
- (void)setupContentKeySession;
- (id)jobWithoutKeyRequestForRequestIdentifier:(id)arg1;
- (void)removeJobsForLicenseChallengeResponses:(id)arg1;
- (void)removeJobContainingChallenge:(id)arg1;
- (_Bool)wereJobsRequestedByDelegateForLicenseChallengeResponses:(id)arg1;
- (id)jobForLicenseChallenge:(id)arg1;
- (void)removeJob:(id)arg1;
- (void)_stepForcedTeardown;
- (void)teardownContentKeySession;
- (void)teardownContentKeySessionInternal;
- (id)removeContentKeyRecipients;
- (id)addContentKeyRecipient:(id)arg1;
- (void)processResponseLicenseChallengeResponses:(id)arg1 andError:(id)arg2;
- (_Bool)hasDeferredLicenses;
- (void)_preloadKeys:(_Bool)arg1;
- (void)preloadKeys:(_Bool)arg1;
- (void)_triggerRenewForContentKeyRequests:(id)arg1 ldl:(_Bool)arg2;
- (void)undoPreloadkeys;
- (void)_renewKeys:(_Bool)arg1;
- (void)renewKeysForLoadingError:(_Bool)arg1;
- (void)renewKeysForLicenseRefresh:(_Bool)arg1;
- (void)renewKeysForLicenseUpgrade:(_Bool)arg1;
- (void)removeContentKeyRequest:(id)arg1;
- (void)addContentKeyRequest:(id)arg1;
- (void)setFetchPersistentLicenses:(_Bool)arg1 useUpdatedVersion:(_Bool)arg2;
@property(nonatomic) __weak id <ContentKeySessionDelegate> contentKeySessionDelegate; // @synthesize contentKeySessionDelegate=_contentKeySessionDelegate;
- (void)setLicenseDeliveryEnabled:(_Bool)arg1 completionQueue:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)addAssociatedMediaSessionId:(id)arg1;
- (void)dealloc;
- (id)initWithMovieDetails:(id)arg1 refreshLicenseLinks:(id)arg2 dispatchQueue:(id)arg3;
- (void)setupWithAVContentKeySession:(id)arg1 licenseChallengeResponses:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

