//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "MdxTargetDelegate-Protocol.h"
#import "MdxUiConnectOperationDelegate-Protocol.h"
#import "MdxUiPlaySessionDelegate-Protocol.h"

@class MdxUiConnectOperation, MdxUiPlaySession, MdxUiPromiseOperation, NSDictionary, NSMutableDictionary, NSOperationQueue, NSString, PlaybackRequest;
@protocol MdxTarget, MdxUiConnectionDelegate;

@interface MdxUiConnection : NSObject <MdxUiConnectOperationDelegate, MdxTargetDelegate, MdxUiPlaySessionDelegate>
{
    _Bool _active;
    _Bool _isValidAppConnection;
    id <MdxUiConnectionDelegate> _delegate;
    unsigned long long _state;
    NSString *_deviceId;
    NSString *_deviceFriendlyName;
    NSString *_targetType;
    MdxUiPlaySession *_playSession;
    PlaybackRequest *_playbackRequest;
    NSDictionary *_playerCapabilities;
    long long _intent;
    NSOperationQueue *_deviceOperationQueue;
    MdxUiConnectOperation *_currentConnectOperation;
    MdxUiPromiseOperation *_currentPlayOperation;
    NSObject<MdxTarget> *_device;
    NSMutableDictionary *_dialogs;
    NSString *_groupNamesJson;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void).cxx_destruct;
@property(nonatomic) _Bool isValidAppConnection; // @synthesize isValidAppConnection=_isValidAppConnection;
@property(retain, nonatomic) NSString *groupNamesJson; // @synthesize groupNamesJson=_groupNamesJson;
@property(retain, nonatomic) NSMutableDictionary *dialogs; // @synthesize dialogs=_dialogs;
@property(retain, nonatomic) NSObject<MdxTarget> *device; // @synthesize device=_device;
@property(nonatomic) __weak MdxUiPromiseOperation *currentPlayOperation; // @synthesize currentPlayOperation=_currentPlayOperation;
@property(nonatomic) __weak MdxUiConnectOperation *currentConnectOperation; // @synthesize currentConnectOperation=_currentConnectOperation;
@property(retain, nonatomic) NSOperationQueue *deviceOperationQueue; // @synthesize deviceOperationQueue=_deviceOperationQueue;
@property(nonatomic) long long intent; // @synthesize intent=_intent;
@property(readonly, nonatomic) NSDictionary *playerCapabilities; // @synthesize playerCapabilities=_playerCapabilities;
@property(retain, nonatomic) PlaybackRequest *playbackRequest; // @synthesize playbackRequest=_playbackRequest;
@property(readonly, nonatomic) MdxUiPlaySession *playSession; // @synthesize playSession=_playSession;
@property(copy, nonatomic) NSString *targetType; // @synthesize targetType=_targetType;
@property(copy, nonatomic) NSString *deviceFriendlyName; // @synthesize deviceFriendlyName=_deviceFriendlyName;
@property(copy, nonatomic) NSString *deviceId; // @synthesize deviceId=_deviceId;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(nonatomic) __weak id <MdxUiConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) _Bool active; // @synthesize active=_active;
- (void)disconnect:(CDUnknownBlockType)arg1;
- (void)play:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)sendAppMessage:(id)arg1 ackBlock:(CDUnknownBlockType)arg2;
- (void)sendAppMessagesForSuccessfulConnect:(CDUnknownBlockType)arg1;
- (void)connect:(long long)arg1 callback:(CDUnknownBlockType)arg2;
- (void)configureWithDevice:(id)arg1;
- (id)init;
- (void)playSession:(id)arg1 postPlay:(id)arg2 dismissPostPlay:(CDUnknownBlockType)arg3;
- (void)playSession:(id)arg1 stop:(CDUnknownBlockType)arg2;
- (void)playSession:(id)arg1 skip:(int)arg2 ackBlock:(CDUnknownBlockType)arg3;
- (void)playSession:(id)arg1 setTime:(int)arg2 ackBlock:(CDUnknownBlockType)arg3;
- (void)playSession:(id)arg1 skipIntroFromSource:(id)arg2 ackBlock:(CDUnknownBlockType)arg3;
- (void)playSession:(id)arg1 resume:(CDUnknownBlockType)arg2;
- (void)playSession:(id)arg1 pause:(CDUnknownBlockType)arg2;
- (void)playSession:(id)arg1 setVolumeLevel:(double)arg2 ackBlock:(CDUnknownBlockType)arg3;
- (void)playSession:(id)arg1 setAudioTrackId:(id)arg2 withSubtitleId:(id)arg3 ackBlock:(CDUnknownBlockType)arg4;
- (void)playSession:(id)arg1 getAudioSubtitles:(CDUnknownBlockType)arg2;
- (double)playSessionVolumeStep:(id)arg1;
- (_Bool)playSessionVolumeControl:(id)arg1;
- (void)propertyChanged:(id)arg1:(id)arg2:(id)arg3:(id)arg4;
- (void)newAppMessage:(id)arg1:(id)arg2:(id)arg3:(int)arg4;
- (void)appConnectionEnded:(id)arg1;
- (void)launchStateChanged:(id)arg1:(long long)arg2;
- (void)discoveryStateChanged:(id)arg1:(long long)arg2;
- (void)connectOperationWillContinueExecution:(id)arg1;
- (void)connectOperation:(id)arg1 performRefreshCredentials:(CDUnknownBlockType)arg2;
- (void)connectOperation:(id)arg1 performConnectToApp:(CDUnknownBlockType)arg2;
- (void)handlePlayerStateAppMessage:(id)arg1;
- (void)handleDialogAppMessage:(id)arg1;
- (void)sendPinVerificationResponse;
- (void)handlePinVerificationAppMessage:(id)arg1;
- (void)handleAudioSubtitlesAppMessage:(id)arg1;
- (void)handlePlayerCapabilitiesAppMessage:(id)arg1;
- (id)dialogForAppMessagePayload:(id)arg1;
- (void)getPlayerState:(CDUnknownBlockType)arg1;
- (void)getCapabilities:(CDUnknownBlockType)arg1;
- (void)completedConnectOperation:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)addDeviceOperation:(id)arg1 withName:(id)arg2;
- (void)setPlayerCapabilities:(id)arg1;
- (void)setPlaySession:(id)arg1;
- (unsigned long long)determineState;
- (_Bool)isActiveState:(unsigned long long)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

