//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/AVAssetResourceLoaderDelegate-Protocol.h>
#import <Nbp/AVContentKeySessionDelegate-Protocol.h>

@class AVContentKeySession, AVURLAsset, NSString, NflxTimer;
@protocol OS_dispatch_queue, OfflineRecordProtocol;

@interface OfflineAsset : NSObject <AVContentKeySessionDelegate, AVAssetResourceLoaderDelegate>
{
    _Bool _didProvideHybridLicense;
    _Bool _isUnprotectedContent;
    _Bool _didStartContentKeyProcess;
    _Bool _didProvideContentKey;
    _Bool _networkPingSucceeded;
    _Bool _networkPingFailed;
    _Bool _wantsHybridLicense;
    _Bool _didTryForHybridLicense;
    _Bool _hybridRequestDidFail;
    _Bool _didStartAssetLoadProcess;
    _Bool _didLoadAssetValues;
    long long _assetMode;
    NSObject<OfflineRecordProtocol> *_record;
    NSObject<OS_dispatch_queue> *_queue;
    unsigned long long _options;
    CDUnknownBlockType _completion;
    AVContentKeySession *_keySession;
    AVURLAsset *_asset;
    NflxTimer *_hybridLicenseTimer;
}

- (void).cxx_destruct;
@property(retain) NflxTimer *hybridLicenseTimer; // @synthesize hybridLicenseTimer=_hybridLicenseTimer;
@property _Bool didLoadAssetValues; // @synthesize didLoadAssetValues=_didLoadAssetValues;
@property _Bool didStartAssetLoadProcess; // @synthesize didStartAssetLoadProcess=_didStartAssetLoadProcess;
@property _Bool hybridRequestDidFail; // @synthesize hybridRequestDidFail=_hybridRequestDidFail;
@property _Bool didTryForHybridLicense; // @synthesize didTryForHybridLicense=_didTryForHybridLicense;
@property _Bool wantsHybridLicense; // @synthesize wantsHybridLicense=_wantsHybridLicense;
@property _Bool networkPingFailed; // @synthesize networkPingFailed=_networkPingFailed;
@property _Bool networkPingSucceeded; // @synthesize networkPingSucceeded=_networkPingSucceeded;
@property _Bool didProvideContentKey; // @synthesize didProvideContentKey=_didProvideContentKey;
@property _Bool didStartContentKeyProcess; // @synthesize didStartContentKeyProcess=_didStartContentKeyProcess;
@property _Bool isUnprotectedContent; // @synthesize isUnprotectedContent=_isUnprotectedContent;
@property(retain) AVURLAsset *asset; // @synthesize asset=_asset;
@property(retain) AVContentKeySession *keySession; // @synthesize keySession=_keySession;
@property(copy) CDUnknownBlockType completion; // @synthesize completion=_completion;
@property unsigned long long options; // @synthesize options=_options;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain) NSObject<OfflineRecordProtocol> *record; // @synthesize record=_record;
@property _Bool didProvideHybridLicense; // @synthesize didProvideHybridLicense=_didProvideHybridLicense;
@property long long assetMode; // @synthesize assetMode=_assetMode;
- (void)contentKeySessionDidGenerateExpiredSessionReport:(id)arg1;
- (void)contentKeySessionContentProtectionSessionIdentifierDidChange:(id)arg1;
- (void)contentKeySession:(id)arg1 contentKeyRequestDidSucceed:(id)arg2;
- (_Bool)contentKeySession:(id)arg1 shouldRetryContentKeyRequest:(id)arg2 reason:(id)arg3;
- (void)contentKeySession:(id)arg1 contentKeyRequest:(id)arg2 didFailWithError:(id)arg3;
- (void)contentKeySession:(id)arg1 didUpdatePersistableContentKey:(id)arg2 forContentKeyIdentifier:(id)arg3;
- (void)contentKeySession:(id)arg1 didProvidePersistableContentKeyRequest:(id)arg2;
- (void)_handleKeyRequestForRefresh:(id)arg1;
- (void)_handleKeyRequestForPlayback:(id)arg1;
- (void)_handleHybridLicenseFailure:(id)arg1;
- (void)_handleKeyRequestForDownload:(id)arg1;
- (id)_respondWithPersistedContentKey:(id)arg1;
- (id)_respondWithKey:(id)arg1 toRequest:(id)arg2;
- (id)_assetIDFromKeyRequest:(id)arg1;
- (void)_getFpsCkcWithSpcData:(id)arg1 forAssetId:(id)arg2 forLoadingRequest:(id)arg3 error:(id)arg4;
- (void)_handleLicenseResult:(id)arg1 keyRequest:(id)arg2 error:(id)arg3;
- (void)_recordContentKeyHash:(id)arg1;
- (void)_updatePlaybackLimitationsFromResult:(id)arg1;
- (void)_updateAPILinksFromResult:(id)arg1;
- (void)_reportError:(id)arg1 toKeyRequest:(id)arg2;
- (id)_extractLicenseResponse:(id)arg1;
- (id)_pboRequestForLicenseCall:(id)arg1;
- (void)contentKeySession:(id)arg1 didProvideRenewingContentKeyRequest:(id)arg2;
- (void)contentKeySession:(id)arg1 didProvideContentKeyRequest:(id)arg2;
- (void)resourceLoader:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (_Bool)resourceLoader:(id)arg1 shouldWaitForResponseToAuthenticationChallenge:(id)arg2;
- (void)resourceLoader:(id)arg1 didCancelLoadingRequest:(id)arg2;
- (_Bool)resourceLoader:(id)arg1 shouldWaitForRenewalOfRequestedResource:(id)arg2;
- (_Bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;
- (_Bool)_verifyContentKeyHash:(id)arg1;
- (_Bool)_respondWithErrorCode:(int)arg1 toLoadingRequest:(id)arg2;
- (void)prepareForLicenseRefresh:(CDUnknownBlockType)arg1;
- (void)finishedDownload;
- (void)finishedPlayback;
- (void)cancelDownload;
- (void)prepareForPlayback:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)prepareForDownload:(CDUnknownBlockType)arg1;
- (void)_networkPingToEnsurePlaybackLicensability;
- (void)_networkPingSuccess;
- (void)_networkPingFailure;
- (void)_setupKeySessionAndLoadValues;
- (void)_resetInternalState;
- (void)_createAssetAndLoadValues;
- (void)_verifyAssetLoadAndCallCompletion;
- (_Bool)_networkAppearsToBeAvailable;
- (void)_invokeCompletionWithAsset:(id)arg1 error:(id)arg2;
- (id)initWithOfflineRecord:(id)arg1;
- (_Bool)_isIOS14;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

