//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Nbp/OfflineDownloader.h>

#import <Nbp/AVAssetDownloadDelegate-Protocol.h>
#import <Nbp/ContentKeySessionDelegate-Protocol.h>
#import <Nbp/NSURLSessionDownloadDelegate-Protocol.h>

@class AVURLAsset, ContentKeySession, NSDictionary, NSString, OfflineKeyLoaderDelegate;

@interface OfflineDownloaderAVAggregate : OfflineDownloader <ContentKeySessionDelegate, AVAssetDownloadDelegate, NSURLSessionDownloadDelegate>
{
    CDUnknownBlockType _processLicense;
    double _percentageOverride;
    OfflineKeyLoaderDelegate *_keyLoaderDelegate;
    ContentKeySession *_contentKeySession;
    AVURLAsset *_asset;
    NSDictionary *_options;
    double _manifestDuration;
}

- (void).cxx_destruct;
@property(nonatomic) double manifestDuration; // @synthesize manifestDuration=_manifestDuration;
@property(retain, nonatomic) NSDictionary *options; // @synthesize options=_options;
@property(retain, nonatomic) AVURLAsset *asset; // @synthesize asset=_asset;
@property(retain, nonatomic) ContentKeySession *contentKeySession; // @synthesize contentKeySession=_contentKeySession;
@property(retain, nonatomic) OfflineKeyLoaderDelegate *keyLoaderDelegate; // @synthesize keyLoaderDelegate=_keyLoaderDelegate;
@property(nonatomic) double percentageOverride; // @synthesize percentageOverride=_percentageOverride;
@property(copy, nonatomic) CDUnknownBlockType processLicense; // @synthesize processLicense=_processLicense;
- (void)contentKeySession:(id)arg1 keyUrl:(id)arg2 producedChallengeError:(id)arg3;
- (void)contentKeySession:(id)arg1 didRequestLicenseChallengeForKeyURL:(id)arg2;
- (void)contentKeySession:(id)arg1 didReceiveLicenseChallengeForKeyURL:(id)arg2;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (_Bool)contentKeySession:(id)arg1 canPrefetchLicenseForKeyURL:(id)arg2;
- (id)playbackIdForContentKeySession:(id)arg1;
- (id)xidForContentKeySession:(id)arg1;
- (void)contentKeySession:(id)arg1 didDeliverAdHocLicenseChallengeResponses:(id)arg2;
- (void)contentKeySession:(id)arg1 didDeliverLicenseChallengeResponses:(id)arg2;
- (void)contentKeySession:(id)arg1 didReceiveLicenseChallengeResponses:(id)arg2 rawResponse:(id)arg3 error:(id)arg4;
- (_Bool)contentKeySession:(id)arg1 shouldRetryLicenseChallenges:(id)arg2 wasLDL:(_Bool)arg3 forRawResponse:(id)arg4 andError:(id)arg5;
- (void)contentKeySession:(id)arg1 didCompleteLicenseChallengeResponses:(id)arg2 withError:(id)arg3 willRetry:(_Bool)arg4;
- (void)contentKeySessionWillStartLicenseRequest:(id)arg1 withRequestArguments:(id)arg2 ldl:(_Bool)arg3;
- (void)contentKeySessionDidEndLicenseRequest:(id)arg1 ldl:(_Bool)arg2;
- (void)contentKeySession:(id)arg1 didFetchLicenseAgain:(id)arg2;
- (void)contentKeySession:(id)arg1 didFailToCollectLicenseChallengesWithError:(id)arg2;
- (_Bool)isExternalPlaybackSuspected;
- (id)inititalBandwidthCapReporterDelegate;
- (id)contentHeaderCache;
- (id)playbackRequest;
- (id)playbackDeviceDetails;
- (id)platformLogblobSink;
- (id)manifestFetchDelegate;
- (_Bool)hasStartedPlayDelayCounting;
- (id)errorWithRetryFlagForError:(id)arg1;
- (void)movieOpenedWithMovieDetails:(id)arg1 andError:(id)arg2;
- (void)initializeAVAsset;
- (void)URLSession:(id)arg1 assetDownloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (void)URLSession:(id)arg1 assetDownloadTask:(id)arg2 didResolveMediaSelection:(id)arg3;
- (void)buildTracksForImageBasedSubtitles:(id)arg1;
- (double)downloadedPendingPercentage;
- (void)URLSession:(id)arg1 aggregateAssetDownloadTask:(id)arg2 didLoadTimeRange:(CDStruct_5c5366e1)arg3 totalTimeRangesLoaded:(id)arg4 timeRangeExpectedToLoad:(CDStruct_5c5366e1)arg5 forMediaSelection:(id)arg6;
- (void)URLSession:(id)arg1 aggregateAssetDownloadTask:(id)arg2 didCompleteForMediaSelection:(id)arg3;
- (void)URLSession:(id)arg1 aggregateAssetDownloadTask:(id)arg2 willDownloadToURL:(id)arg3;
- (void)URLSession:(id)arg1 assetDownloadTask:(id)arg2 didLoadTimeRange:(CDStruct_5c5366e1)arg3 totalTimeRangesLoaded:(id)arg4 timeRangeExpectedToLoad:(CDStruct_5c5366e1)arg5;
- (void)onDownloadCompleted;
- (void)handleLicenseDictionary:(id)arg1 licenseChallengeResponse:(id)arg2 request:(id)arg3;
- (void)_recordLicenseHash:(id)arg1;
- (void)handleLicenseError:(id)arg1 request:(id)arg2;
- (void)updateLinksAndSavePendingLicenseData:(id)arg1;
- (void)recoverDownload;
- (_Bool)sendLoggingSessionEvent:(unsigned long long)arg1 withPayload:(id)arg2;
- (void)getFpsCkcWithSpcData:(id)arg1 forAssetId:(id)arg2 forLoadingRequest:(id)arg3;
- (_Bool)alreadyKnowsAboutTask:(id)arg1;
- (void)addRecoveredUrlTask:(id)arg1;
- (id)playlistForPlaylistKey:(id)arg1;
- (void)refreshLicense:(_Bool)arg1;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (_Bool)checkIfDownloadIsActuallyComplete;
- (void)_initiateDownloadForQuality:(id)arg1 trackingInfo:(id)arg2;
- (void)initiateDownloadForQuality:(id)arg1 trackingInfo:(id)arg2;
- (void)resetDownloadStateToBackingDataOnly;
- (void)startDownloadFromTheTop:(id)arg1 trackingInfo:(id)arg2;
- (_Bool)considerErrorRecoveryScenariosForPendingTracks;
- (void)stopTryingToWork;
- (_Bool)doesEverythingSeemInOrder;
- (void)_handleAsyncLoadResponseOnMyQueue;
- (_Bool)verifyLicenseWasWellRecieved;
- (void)_handleAsyncLoadResponse;
- (void)_loadAVAssetValues;
- (void)_requestContentKey;
- (void)movieOpened:(id)arg1;
- (void)_handleActivatedLicenseOnQueue:(id)arg1;
- (void)recordLicenseReceivedTime;
- (void)_handleActivatedLicenseByContinuing:(id)arg1;
- (void)activateLicenseAndContinue;
- (void)beginActualDownloadForAsset;
- (id)verifyCompletedTracksAreActuallyOnDisk;
- (void)startImageSubsTask;
- (void)reportTimeSizeAndBitrate;
- (void)startAggregateTask;
- (void)handlePrematureDelegateCall:(id)arg1;
- (void)loadAndResumeAllMyTasks;
- (id)buildSecondaryTrackMap;
- (id)normalizeTracks:(id)arg1;
- (void)openMovieForDownload:(long long)arg1 withQuality:(id)arg2;
- (void)createOfflineDownloadMediaController;
- (void)retryErroredTasks;
- (void)suspend;
- (void)resume;
- (long long)state;
- (id)initWithEpisodeInfo:(id)arg1 andManager:(id)arg2 andTask:(id)arg3;
- (id)initWithEpisodeInfo:(id)arg1 andManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

