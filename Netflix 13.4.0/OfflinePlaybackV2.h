//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/AudioSessionAnnouncerDelegate-Protocol.h>
#import <Nbp/NfOfflinePlayback-Protocol.h>
#import <Nbp/NfPlaybackLoggingController-Protocol.h>
#import <Nbp/NfSubtitleAudioController-Protocol.h>
#import <Nbp/NfSubtitleAudioControllerInternal-Protocol.h>

@class AVContentKeySession, AVPlayer, AVPlayerItem, AVURLAsset, AudioSessionAnnouncer, AudioSubtitleManager, BladeRunnerPlaybackReporter, NSArray, NSDate, NSDictionary, NSError, NSString, NbpImageBasedSubtitleController, OfflineKeyLoaderDelegate, OfflineRecordAccess, PlaybackAuxiliaryDisplayProvider, TimePitchAlgorithmManager;
@protocol NFImageBasedSubtitleController, NfPlaybackDelegate, OS_dispatch_queue, OfflineDependencyProvider, OfflinePlaybackDelegate;

@interface OfflinePlaybackV2 : NSObject <NfSubtitleAudioControllerInternal, NfOfflinePlayback, NfSubtitleAudioController, NfPlaybackLoggingController, AudioSessionAnnouncerDelegate>
{
    unsigned int _trackerId;
    unsigned int _avPlayerLoadRetryCount;
    _Bool _isUIAutoPlay;
    _Bool _playerItemIsReady;
    _Bool _playbackReachedEnd;
    _Bool _didUserStartPlayback;
    _Bool _playbackStalled;
    _Bool _isAirplayOn;
    _Bool _isAirplayMirroringOn;
    _Bool _autoStart;
    _Bool _isStreamingLicenseEnabled;
    _Bool _isTryingForAStreamingLicense;
    _Bool _playerShouldReportRateChange;
    float _rate;
    NSString *_uiLabel;
    id <NfPlaybackDelegate> _playbackDelegate;
    NSError *_playerError;
    BladeRunnerPlaybackReporter *_playbackReporter;
    NSString *_playbackId;
    id <OfflinePlaybackDelegate> _offlineDelegate;
    id <OfflineDependencyProvider> _provider;
    OfflineRecordAccess *_recordAccess;
    NSString *_movieId;
    double _bookmarkSeconds;
    double _durationSeconds;
    NSObject<OS_dispatch_queue> *_playbackQueue;
    AVURLAsset *_avAsset;
    OfflineKeyLoaderDelegate *_keyLoaderDelegate;
    AVPlayer *_avPlayer;
    AVPlayerItem *_avPlayerItem;
    id _periodicTimeObserver;
    double _playbackTime;
    long long _totalTransferredBytes;
    NSArray *_subtitleOptionsFromWatchableInfo;
    NSArray *_audioOptionsFromWatchableInfo;
    NSString *_mediaIdFromWatchableInfo;
    NSDate *_playWindowStart;
    PlaybackAuxiliaryDisplayProvider *_auxDisplay;
    NbpImageBasedSubtitleController *_nflxSubtitleController;
    NSDictionary *_trackingInfo;
    AudioSubtitleManager *_audioSubtitlesManager;
    AVContentKeySession *_keySession;
    NSError *_streamingLicenseError;
    NSDate *_offlinePlaybackStartTime;
    NSDate *_streamingLicenseAttemptDate;
    unsigned long long _fetchOptions;
    NSArray *_subtitleOptions;
    NSArray *_audioOptions;
    NSArray *_subsetSubtitleOptions;
    NSArray *_imageBasedSubtitleViewArray;
    TimePitchAlgorithmManager *_timePitchManager;
    AudioSessionAnnouncer *_asAnnouncer;
}

- (void).cxx_destruct;
@property(retain, nonatomic) AudioSessionAnnouncer *asAnnouncer; // @synthesize asAnnouncer=_asAnnouncer;
@property _Bool playerShouldReportRateChange; // @synthesize playerShouldReportRateChange=_playerShouldReportRateChange;
@property(retain, nonatomic) TimePitchAlgorithmManager *timePitchManager; // @synthesize timePitchManager=_timePitchManager;
@property(retain, nonatomic) NSArray *imageBasedSubtitleViewArray; // @synthesize imageBasedSubtitleViewArray=_imageBasedSubtitleViewArray;
@property(retain, nonatomic) NSArray *subsetSubtitleOptions; // @synthesize subsetSubtitleOptions=_subsetSubtitleOptions;
@property(retain, nonatomic) NSArray *audioOptions; // @synthesize audioOptions=_audioOptions;
@property(retain, nonatomic) NSArray *subtitleOptions; // @synthesize subtitleOptions=_subtitleOptions;
@property(nonatomic) unsigned long long fetchOptions; // @synthesize fetchOptions=_fetchOptions;
@property(retain) NSDate *streamingLicenseAttemptDate; // @synthesize streamingLicenseAttemptDate=_streamingLicenseAttemptDate;
@property _Bool isTryingForAStreamingLicense; // @synthesize isTryingForAStreamingLicense=_isTryingForAStreamingLicense;
@property _Bool isStreamingLicenseEnabled; // @synthesize isStreamingLicenseEnabled=_isStreamingLicenseEnabled;
@property(retain, nonatomic) NSDate *offlinePlaybackStartTime; // @synthesize offlinePlaybackStartTime=_offlinePlaybackStartTime;
@property(retain, nonatomic) NSError *streamingLicenseError; // @synthesize streamingLicenseError=_streamingLicenseError;
@property(retain, nonatomic) AVContentKeySession *keySession; // @synthesize keySession=_keySession;
@property(retain, nonatomic) AudioSubtitleManager *audioSubtitlesManager; // @synthesize audioSubtitlesManager=_audioSubtitlesManager;
@property(retain, nonatomic) NSDictionary *trackingInfo; // @synthesize trackingInfo=_trackingInfo;
@property(retain, nonatomic) NbpImageBasedSubtitleController *nflxSubtitleController; // @synthesize nflxSubtitleController=_nflxSubtitleController;
@property(retain, nonatomic) PlaybackAuxiliaryDisplayProvider *auxDisplay; // @synthesize auxDisplay=_auxDisplay;
@property(retain, nonatomic) NSDate *playWindowStart; // @synthesize playWindowStart=_playWindowStart;
@property(retain, nonatomic) NSString *mediaIdFromWatchableInfo; // @synthesize mediaIdFromWatchableInfo=_mediaIdFromWatchableInfo;
@property(retain, nonatomic) NSArray *audioOptionsFromWatchableInfo; // @synthesize audioOptionsFromWatchableInfo=_audioOptionsFromWatchableInfo;
@property(retain, nonatomic) NSArray *subtitleOptionsFromWatchableInfo; // @synthesize subtitleOptionsFromWatchableInfo=_subtitleOptionsFromWatchableInfo;
@property(nonatomic) _Bool autoStart; // @synthesize autoStart=_autoStart;
@property(nonatomic) long long totalTransferredBytes; // @synthesize totalTransferredBytes=_totalTransferredBytes;
@property(nonatomic) double playbackTime; // @synthesize playbackTime=_playbackTime;
@property(nonatomic) float rate; // @synthesize rate=_rate;
@property(nonatomic) _Bool isAirplayMirroringOn; // @synthesize isAirplayMirroringOn=_isAirplayMirroringOn;
@property(nonatomic) _Bool isAirplayOn; // @synthesize isAirplayOn=_isAirplayOn;
@property(nonatomic) _Bool playbackStalled; // @synthesize playbackStalled=_playbackStalled;
@property(nonatomic) _Bool didUserStartPlayback; // @synthesize didUserStartPlayback=_didUserStartPlayback;
@property(nonatomic) _Bool playbackReachedEnd; // @synthesize playbackReachedEnd=_playbackReachedEnd;
@property(nonatomic) _Bool playerItemIsReady; // @synthesize playerItemIsReady=_playerItemIsReady;
@property(retain, nonatomic) id periodicTimeObserver; // @synthesize periodicTimeObserver=_periodicTimeObserver;
@property(retain, nonatomic) AVPlayerItem *avPlayerItem; // @synthesize avPlayerItem=_avPlayerItem;
@property(retain, nonatomic) AVPlayer *avPlayer; // @synthesize avPlayer=_avPlayer;
@property(retain, nonatomic) OfflineKeyLoaderDelegate *keyLoaderDelegate; // @synthesize keyLoaderDelegate=_keyLoaderDelegate;
@property(retain, nonatomic) AVURLAsset *avAsset; // @synthesize avAsset=_avAsset;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *playbackQueue; // @synthesize playbackQueue=_playbackQueue;
@property(nonatomic) double durationSeconds; // @synthesize durationSeconds=_durationSeconds;
@property(nonatomic) double bookmarkSeconds; // @synthesize bookmarkSeconds=_bookmarkSeconds;
@property(retain, nonatomic) NSString *movieId; // @synthesize movieId=_movieId;
@property(retain) OfflineRecordAccess *recordAccess; // @synthesize recordAccess=_recordAccess;
@property(retain) id <OfflineDependencyProvider> provider; // @synthesize provider=_provider;
@property(retain) id <OfflinePlaybackDelegate> offlineDelegate; // @synthesize offlineDelegate=_offlineDelegate;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
@property(retain, nonatomic) BladeRunnerPlaybackReporter *playbackReporter; // @synthesize playbackReporter=_playbackReporter;
@property(retain, nonatomic) NSError *playerError; // @synthesize playerError=_playerError;
@property(nonatomic) __weak id <NfPlaybackDelegate> playbackDelegate; // @synthesize playbackDelegate=_playbackDelegate;
@property(copy, nonatomic) NSString *uiLabel; // @synthesize uiLabel=_uiLabel;
@property(nonatomic) _Bool isUIAutoPlay; // @synthesize isUIAutoPlay=_isUIAutoPlay;
- (void)audioSessionAnnouncerAnnoucesChanges:(id)arg1;
- (id)currentAudioDownloadableId;
- (void)streamSelected:(int)arg1 downloadableId:(id)arg2 kbps:(unsigned int)arg3;
- (void)sendSpliceEventAudioId:(id)arg1 subtitleId:(id)arg2;
- (_Bool)isSupplemental;
- (_Bool)isOffline;
- (id)currentmovieDetails;
- (id)currentImageBasedSubtitleOptions;
- (id)currentSubtitleOptions;
- (id)currentSubsetSubtitleOptions;
- (id)currentAudioOptions;
- (void)subtitleBCP47:(id)arg1 trackid:(id)arg2;
- (void)audioBCP47:(id)arg1 audioChannels:(unsigned int)arg2;
- (int)shouldProceedIfAirplayIsOn;
- (void)willBeginSegmentTransitionWithPlaybackState:(id)arg1 delayToTransition:(long long)arg2 seamlessRequested:(_Bool)arg3;
- (void)willBeginSegmentTransitionWithPlaybackState:(id)arg1 delayToTransition:(long long)arg2 seamlessRequested:(_Bool)arg3 transitionWeight:(long long)arg4;
- (void)willBeginSegmentTransitionWithPlaybackState:(id)arg1 userInitiated:(_Bool)arg2 seamlessRequested:(_Bool)arg3 transitionWeight:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (void)didEndSegmentTransitionWithPlaybackState:(id)arg1 transitionType:(long long)arg2 success:(_Bool)arg3 transitionRecord:(id)arg4;
- (void)willBeginSegmentTransitionWithPlaybackState:(id)arg1 userInitiated:(_Bool)arg2 seamlessRequested:(_Bool)arg3 transitionWeight:(long long)arg4;
- (void)updateTrackingInfo:(id)arg1;
- (void)setPlaydelayTimestamp:(id)arg1;
- (void)didEndSegmentTransitionWithPlaybackState:(id)arg1 transitionType:(long long)arg2 success:(_Bool)arg3;
- (void)hasDisplayedErrorToUser;
- (void)pipActive:(_Bool)arg1;
- (void)airplayActive:(_Bool)arg1;
- (void)userInteraction;
- (void)userUnpaused;
- (void)userPaused;
- (void)beginSeek;
- (void)resumePlaybackFrom:(double)arg1 to:(double)arg2;
- (void)logPlaybackEndedWithError;
- (void)logPIPActive:(_Bool)arg1;
- (void)logAirPlayActive:(_Bool)arg1;
- (void)logPause:(_Bool)arg1;
- (void)logSeekFrom:(double)arg1 to:(double)arg2;
- (long long)trackerId;
- (void)subtitleSegmentsReady;
- (void)subtitleQOEDldId:(id)arg1 expected:(unsigned int)arg2 missed:(unsigned int)arg3;
- (void)selectSubtitleOption:(id)arg1;
- (void)selectAudioOption:(id)arg1;
- (void)enableStickyForSelectedAudioSubtitle;
- (id)availableSubtitleOptions;
- (id)availableAudioOptions;
- (id)selectedSubtitleOption;
- (id)selectedAudioOption;
- (void)playerPeriodicTimeObserverCallback:(CDStruct_1b6d18a9)arg1;
- (void)playerItemPlaybackStalled:(id)arg1;
- (void)playerItemNewAccessLogEntry:(id)arg1;
- (void)playerItemFailedToReachEnd:(id)arg1;
- (void)playerItemDidReachEnd:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_playerChanged:(id)arg1 keyPath:(id)arg2;
- (void)_playerItemLikelyToKeepUp:(id)arg1;
- (void)_playerItemStatusFailed:(id)arg1;
- (void)_playerItemStatusChanged:(id)arg1;
- (void)_playerItemStatusReadyToPlay:(id)arg1;
- (void)endObservingPlayer:(id)arg1;
- (void)beginObservingPlayer:(id)arg1;
- (void)endObservingPlayerItem:(id)arg1;
- (void)beginObservingPlayerItem:(id)arg1;
- (id)playlistForPlaylistKey:(id)arg1;
- (id)contentDataForLogicalName:(id)arg1 withLocation:(unsigned long long)arg2 andLength:(unsigned int)arg3;
- (void)setPlayerAuxiliaryDisplayProvider:(id)arg1;
- (void)loadPlayer:(double)arg1;
- (void)_handleAssetReady:(id)arg1 startingPtsSeconds:(double)arg2;
- (void)webVTTPlistLoad:(id)arg1;
- (void)startPlay;
- (id)getDownloadedPathUrl;
- (void)setupPlaybackReporter:(double)arg1;
- (id)playbackIdPrefix;
- (id)playerAuxiliaryDisplayProvider;
- (void)closePlayback;
- (void)startPlaydelayCounting;
- (void)setPlayerUIPresented:(id)arg1;
- (id)xid;
- (void)dealloc;
- (id)initWithDependencyProvider:(id)arg1 playbackDelegate:(id)arg2 fetchOptions:(unsigned long long)arg3 oxid:(id)arg4;
- (void)_generateSubtitleAudioOptionsFromManifest;
@property(readonly, nonatomic) id <NFImageBasedSubtitleController> imageBasedSubtitleController;
@property(readonly, nonatomic) double minimalVideoFps;
- (_Bool)isBranching;
- (id)aspectDetailsForMovie;
- (void)startPlaybackWithTrackingInfo:(id)arg1;
- (void)initiatePlayback:(id)arg1 duration:(double)arg2 startingPts:(double)arg3 creditsStart:(double)arg4 trackingInfo:(id)arg5;
- (id)_fixupMissingImageBasedSubs:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

