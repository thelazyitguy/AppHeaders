//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/NFMutablePlaygraph-Protocol.h>

@class NSMutableDictionary, NSNumber, NSString;

@interface MutablePlaygraph : NSObject <NFMutablePlaygraph>
{
    NSString *_playgraphId;
    double _duration;
    NSMutableDictionary *_playgraphDictionary;
    NSNumber *_defaultViewableId;
    NSString *_type;
    NSString *_transitionType;
    NSString *_initialSegmentId;
    NSMutableDictionary *_segmentMap;
}

+ (id)createPlaygraphWithViewableId:(id)arg1 segmentId:(id)arg2 startTimeSeconds:(double)arg3 endTimeSeconds:(double)arg4;
- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableDictionary *segmentMap; // @synthesize segmentMap=_segmentMap;
@property(retain, nonatomic) NSString *initialSegmentId; // @synthesize initialSegmentId=_initialSegmentId;
@property(retain, nonatomic) NSString *transitionType; // @synthesize transitionType=_transitionType;
@property(retain, nonatomic) NSString *type; // @synthesize type=_type;
- (void)updateDefaultNextFromSegment:(id)arg1 toSegment:(id)arg2;
- (void)removeSegment:(id)arg1;
- (void)addTransitionFromSegment:(id)arg1 toSegment:(id)arg2 asDefault:(_Bool)arg3 properties:(id)arg4;
- (void)supportSkippingSegment:(id)arg1 toSegment:(id)arg2 afterOffsetSeconds:(double)arg3 weight:(unsigned long long)arg4;
- (void)updatePropertiesForAllTransitionfrom:(id)arg1 properties:(id)arg2;
- (void)updatePropertiesForAllTransitionsTo:(id)arg1 properties:(id)arg2;
- (void)updatePropertiesForTransitionFrom:(id)arg1 to:(id)arg2 properties:(id)arg3;
- (id)findSegmentsWithNextContainsSegment:(id)arg1;
- (void)_updatePropertiesForTransitionFrom:(id)arg1 to:(id)arg2 properties:(id)arg3 ignoreIfNotFound:(_Bool)arg4;
- (id)dictionaryRepresentation;
- (void)insertSegmentBefore:(id)arg1 newSegmentId:(id)arg2 viewableId:(id)arg3 startTimeSeconds:(double)arg4 endTimeSeconds:(double)arg5;
- (void)insertSegmentAfter:(id)arg1 newSegmentId:(id)arg2 viewableId:(id)arg3 startTimeSeconds:(double)arg4 endTimeSeconds:(double)arg5 asDeafaultNext:(_Bool)arg6;
- (void)splitSegment:(id)arg1 atOffset:(double)arg2 firstSegmentId:(id)arg3 secondSegmentId:(id)arg4;
- (void)replaceSegmentReferencesFor:(id)arg1 with:(id)arg2;
- (CDStruct_aa637a14)positionAtViewableTime:(double)arg1 inVideoId:(id)arg2;
- (CDStruct_aa637a14)positionAtSegment:(id)arg1 segmentOffset:(double)arg2;
- (CDStruct_aa637a14)positionAtSegment:(id)arg1 viewableTime:(double)arg2;
- (CDStruct_aa637a14)positionAtStartOfSegment:(id)arg1;
- (CDStruct_aa637a14)positionAtPlaygraphOffsetAlongDefaultPlaybackPath:(double)arg1;
- (CDStruct_aa637a14)initialPosition;
- (void)calculateDefaultPathDuration;
- (void)bredthFirstTraversalFromSegmentId:(id)arg1 maxDepth:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (_Bool)depthFirstTraversalFromSegment:(id)arg1 segmentDepth:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3 visitedSegments:(id)arg4;
- (void)depthFirstTraversalFromSegmentId:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)defaultPathTraversal:(CDUnknownBlockType)arg1;
- (double)playerTimeForPlaygraphOffset:(double)arg1;
- (double)playgraphOffsetForPlayerTime:(double)arg1 inSegment:(id)arg2;
- (_Bool)isPlaybackContiguousFromSegment:(id)arg1 toSegment:(id)arg2;
- (id)segmentIdAtPlaygraphTime:(double)arg1;
- (id)segmentIdsForPosition:(double)arg1 inViewableId:(unsigned long long)arg2;
- (id)segmentById:(id)arg1;
- (id)buildTransitions:(id)arg1 fromSourceSegment:(id)arg2;
- (id)buildSegment:(id)arg1 withDetails:(id)arg2 defaultViewableId:(id)arg3;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) NSString *playgraphId;
- (void)validatePlaygraph;
- (void)load;
- (id)initWithDictionary:(id)arg1 defaultViewableId:(id)arg2;
- (id)initWithDictionary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

