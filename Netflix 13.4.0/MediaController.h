//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <NFPlaylistGeneration/MovieHeaderDownloaderDelegate-Protocol.h>
#import <NFPlaylistGeneration/PlaylistBuilderDelegate-Protocol.h>
#import <NFPlaylistGeneration/_TtP16NFManifestCommon26NFFilteredManifestDelegate_-Protocol.h>

@class HlsPlaylistBuilder, NSArray, NSData, NSDictionary, NSMutableDictionary, NSNumber, NSString;
@protocol CdnSelectionDelegate, MediaControllerDelegate, MovieHeaderProtocol, PlatformConfigProvider, SidxInfoFactoryProtocol, StartPlayEventReporterDelegate, _TtP16NFManifestCommon17NFCachingManifest_;

@interface MediaController : NSObject <_TtP16NFManifestCommon26NFFilteredManifestDelegate_, PlaylistBuilderDelegate, MovieHeaderDownloaderDelegate>
{
    _Bool _isVideoDrmed;
    _Bool _restrictPhoneVideoByVmaf;
    _Bool _requireAdditionalVideoFilterPass;
    _Bool _vmafFilteringForceOneHDStream;
    _Bool _isLive;
    _Bool _wifi;
    _Bool _alwaysLimitHeightToScreen;
    _Bool _hdmiDongleUseSuspected;
    _Bool _prefetchCancelled;
    _Bool _headerDownloadStarted;
    _Bool _isBranching;
    id <PlatformConfigProvider> _playbackConfig;
    NSString *_movieId;
    NSString *_playbackId;
    NSDictionary *_watermarkOption;
    NSArray *_subtitleOptions;
    NSArray *_audioOptions;
    NSArray *_videoOptions;
    NSArray *_mediaArray;
    NSDictionary *_videoAspectDetails;
    NSString *_playbackContextId;
    NSString *_playbackCorrelationId;
    NSString *_additionalGroupNames;
    NSString *_mediaId;
    double _expiration;
    unsigned long long _manifestLifespanInMS;
    long long _duration;
    NSString *_xid;
    id <CdnSelectionDelegate> _cdnSelectionDelegate;
    id <StartPlayEventReporterDelegate> _startPlayEventReporterDelegate;
    NSString *_prereleasePIN;
    NSNumber *_moviePeakBandwidthMultiplier;
    NSNumber *_movieNominalToPeakBandwidthMultiplier;
    NSNumber *_movieIFrameBandwidthMultiplier;
    long long _variantCountVideo;
    long long _variantCountAudio;
    long long _variantCountText;
    long long _variantCountForcedNarrative;
    long long _requestedVmafType;
    long long _restrictPhoneVideoMaximumVmaf;
    long long _restrictPhoneVideoMaximumBitrate;
    long long _restrictPhoneVideoMaximum265Bitrate;
    long long _restrictPhoneVideoMaximum264Bitrate;
    unsigned long long _vmafFilteringHDStreamHeightConsideration;
    long long _playlistMode;
    id <SidxInfoFactoryProtocol> _SidxInfoFactory;
    NSMutableDictionary *_countedStartPlayEvents;
    id <MovieHeaderProtocol> _movieHeaderDownloader;
    HlsPlaylistBuilder *_playlistBuilder;
    id <MediaControllerDelegate> _mediaControllerDelegate;
    id <_TtP16NFManifestCommon17NFCachingManifest_> _manifest;
    NSDictionary *_rawManifest;
    NSNumber *_totalPlaylistTimeNumber;
    NSDictionary *_choiceMap;
    unsigned long long _fetchOptions;
    NSData *_fairplayAppCert;
    NSString *_fairplayAppCertSupportedVersions;
    NSMutableDictionary *_dlid2pssh;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableDictionary *dlid2pssh; // @synthesize dlid2pssh=_dlid2pssh;
@property(retain, nonatomic) NSString *fairplayAppCertSupportedVersions; // @synthesize fairplayAppCertSupportedVersions=_fairplayAppCertSupportedVersions;
@property(retain, nonatomic) NSData *fairplayAppCert; // @synthesize fairplayAppCert=_fairplayAppCert;
@property(nonatomic) unsigned long long fetchOptions; // @synthesize fetchOptions=_fetchOptions;
@property(nonatomic) _Bool isBranching; // @synthesize isBranching=_isBranching;
@property(nonatomic) _Bool headerDownloadStarted; // @synthesize headerDownloadStarted=_headerDownloadStarted;
@property(nonatomic) _Bool prefetchCancelled; // @synthesize prefetchCancelled=_prefetchCancelled;
@property(retain, nonatomic) NSDictionary *choiceMap; // @synthesize choiceMap=_choiceMap;
@property(retain, nonatomic) NSNumber *totalPlaylistTimeNumber; // @synthesize totalPlaylistTimeNumber=_totalPlaylistTimeNumber;
@property(retain, nonatomic) NSDictionary *rawManifest; // @synthesize rawManifest=_rawManifest;
@property(retain, nonatomic) id <_TtP16NFManifestCommon17NFCachingManifest_> manifest; // @synthesize manifest=_manifest;
@property(nonatomic) __weak id <MediaControllerDelegate> mediaControllerDelegate; // @synthesize mediaControllerDelegate=_mediaControllerDelegate;
@property(retain, nonatomic) HlsPlaylistBuilder *playlistBuilder; // @synthesize playlistBuilder=_playlistBuilder;
@property(retain, nonatomic) id <MovieHeaderProtocol> movieHeaderDownloader; // @synthesize movieHeaderDownloader=_movieHeaderDownloader;
@property(nonatomic, getter=isHdmiDongleUseSuspected) _Bool hdmiDongleUseSuspected; // @synthesize hdmiDongleUseSuspected=_hdmiDongleUseSuspected;
@property(nonatomic) _Bool alwaysLimitHeightToScreen; // @synthesize alwaysLimitHeightToScreen=_alwaysLimitHeightToScreen;
@property(retain, nonatomic) NSMutableDictionary *countedStartPlayEvents; // @synthesize countedStartPlayEvents=_countedStartPlayEvents;
@property(retain, nonatomic) id <SidxInfoFactoryProtocol> SidxInfoFactory; // @synthesize SidxInfoFactory=_SidxInfoFactory;
@property(nonatomic) long long playlistMode; // @synthesize playlistMode=_playlistMode;
@property(nonatomic) _Bool wifi; // @synthesize wifi=_wifi;
@property(nonatomic) _Bool isLive; // @synthesize isLive=_isLive;
@property unsigned long long vmafFilteringHDStreamHeightConsideration; // @synthesize vmafFilteringHDStreamHeightConsideration=_vmafFilteringHDStreamHeightConsideration;
@property _Bool vmafFilteringForceOneHDStream; // @synthesize vmafFilteringForceOneHDStream=_vmafFilteringForceOneHDStream;
@property(nonatomic) _Bool requireAdditionalVideoFilterPass; // @synthesize requireAdditionalVideoFilterPass=_requireAdditionalVideoFilterPass;
@property(nonatomic) long long restrictPhoneVideoMaximum264Bitrate; // @synthesize restrictPhoneVideoMaximum264Bitrate=_restrictPhoneVideoMaximum264Bitrate;
@property(nonatomic) long long restrictPhoneVideoMaximum265Bitrate; // @synthesize restrictPhoneVideoMaximum265Bitrate=_restrictPhoneVideoMaximum265Bitrate;
@property(nonatomic) long long restrictPhoneVideoMaximumBitrate; // @synthesize restrictPhoneVideoMaximumBitrate=_restrictPhoneVideoMaximumBitrate;
@property(nonatomic) long long restrictPhoneVideoMaximumVmaf; // @synthesize restrictPhoneVideoMaximumVmaf=_restrictPhoneVideoMaximumVmaf;
@property(nonatomic) _Bool restrictPhoneVideoByVmaf; // @synthesize restrictPhoneVideoByVmaf=_restrictPhoneVideoByVmaf;
@property(nonatomic) long long requestedVmafType; // @synthesize requestedVmafType=_requestedVmafType;
@property(nonatomic) long long variantCountForcedNarrative; // @synthesize variantCountForcedNarrative=_variantCountForcedNarrative;
@property(nonatomic) long long variantCountText; // @synthesize variantCountText=_variantCountText;
@property(nonatomic) long long variantCountAudio; // @synthesize variantCountAudio=_variantCountAudio;
@property(nonatomic) long long variantCountVideo; // @synthesize variantCountVideo=_variantCountVideo;
@property(retain, nonatomic) NSNumber *movieIFrameBandwidthMultiplier; // @synthesize movieIFrameBandwidthMultiplier=_movieIFrameBandwidthMultiplier;
@property(retain, nonatomic) NSNumber *movieNominalToPeakBandwidthMultiplier; // @synthesize movieNominalToPeakBandwidthMultiplier=_movieNominalToPeakBandwidthMultiplier;
@property(retain, nonatomic) NSNumber *moviePeakBandwidthMultiplier; // @synthesize moviePeakBandwidthMultiplier=_moviePeakBandwidthMultiplier;
@property(nonatomic) _Bool isVideoDrmed; // @synthesize isVideoDrmed=_isVideoDrmed;
@property(retain, nonatomic) NSString *prereleasePIN; // @synthesize prereleasePIN=_prereleasePIN;
@property(nonatomic) __weak id <StartPlayEventReporterDelegate> startPlayEventReporterDelegate; // @synthesize startPlayEventReporterDelegate=_startPlayEventReporterDelegate;
@property(nonatomic) __weak id <CdnSelectionDelegate> cdnSelectionDelegate; // @synthesize cdnSelectionDelegate=_cdnSelectionDelegate;
@property(retain, nonatomic) NSString *xid; // @synthesize xid=_xid;
@property(readonly, nonatomic) long long duration; // @synthesize duration=_duration;
@property(readonly, nonatomic) unsigned long long manifestLifespanInMS; // @synthesize manifestLifespanInMS=_manifestLifespanInMS;
@property(nonatomic) double expiration; // @synthesize expiration=_expiration;
@property(retain, nonatomic) NSString *mediaId; // @synthesize mediaId=_mediaId;
@property(readonly, nonatomic) NSString *additionalGroupNames; // @synthesize additionalGroupNames=_additionalGroupNames;
@property(retain, nonatomic) NSString *playbackCorrelationId; // @synthesize playbackCorrelationId=_playbackCorrelationId;
@property(retain, nonatomic) NSString *playbackContextId; // @synthesize playbackContextId=_playbackContextId;
@property(readonly, nonatomic) NSDictionary *videoAspectDetails; // @synthesize videoAspectDetails=_videoAspectDetails;
@property(retain, nonatomic) NSArray *mediaArray; // @synthesize mediaArray=_mediaArray;
@property(retain, nonatomic) NSArray *videoOptions; // @synthesize videoOptions=_videoOptions;
@property(retain, nonatomic) NSArray *audioOptions; // @synthesize audioOptions=_audioOptions;
@property(retain, nonatomic) NSArray *subtitleOptions; // @synthesize subtitleOptions=_subtitleOptions;
@property(retain, nonatomic) NSDictionary *watermarkOption; // @synthesize watermarkOption=_watermarkOption;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
@property(retain, nonatomic) NSString *movieId; // @synthesize movieId=_movieId;
@property(retain, nonatomic) id <PlatformConfigProvider> playbackConfig; // @synthesize playbackConfig=_playbackConfig;
- (void)addProfiles:(id)arg1 toArray:(id)arg2 ifNotIn:(id)arg3;
- (void)addProfile:(long long)arg1 toArray:(id)arg2 ifNotIn:(id)arg3;
- (void)populateVideoProfiles:(id)arg1 withExclusions:(id)arg2;
- (id)contentProfiles;
- (_Bool)shouldRequestDV;
- (_Bool)shouldRequestHEVC;
- (id)startPlayEventReporterDelegateForPlaylistBuilder:(id)arg1;
- (id)inititalBandwidthCapReporterDelegateForPlaylistBuilder:(id)arg1;
- (id)deviceModelForPlaylistBuilder:(id)arg1;
- (id)platformConfigProviderForPlaylistBuilder:(id)arg1;
- (_Bool)isWifiForPlaylistBuilder:(id)arg1;
- (_Bool)isFairplaySupportedForPlaylistBuilder:(id)arg1;
- (_Bool)isDVSupportedForPlaylistBuilder:(id)arg1;
- (_Bool)isHEVCSupportedForPlaylistBuilder:(id)arg1;
- (float)movieIFrameBandwidthMultiplierForPlaylistBuilder:(id)arg1;
- (float)moviePeakBandwidthMultiplierForPlaylistBuilder:(id)arg1;
- (float)movieNominalToPeakBandwidthMultiplierForPlaylistBuilder:(id)arg1;
- (id)platformConfigProviderForFilteredManifest:(id)arg1;
- (unsigned long long)videoBitrateCapForFilteredManifest:(id)arg1;
- (_Bool)isAudioStreamAllowed:(id)arg1 forFilteredManifest:(id)arg2;
- (_Bool)isVideoStreamAllowed:(id)arg1 forFilteredManifest:(id)arg2;
- (_Bool)isVideoStream:(id)arg1 vmafPermittedForFilteredManifest:(id)arg2;
- (_Bool)isVideoHeightAllowed:(unsigned long long)arg1 forFilteredManifest:(id)arg2;
- (_Bool)offlineStateForFilteredManifest:(id)arg1;
- (_Bool)wifiStateForFilteredManifest:(id)arg1;
- (void)reportAppError:(id)arg1 withParam:(id)arg2 isSevere:(_Bool)arg3;
- (id)sidxInfoFactory;
- (id)psshCoordinator;
- (id)contentHeaderCache;
- (id)platformConfigProvider;
- (id)platformLogblobSink;
- (unsigned long long)maximumVideoVmafFilter;
- (unsigned long long)minimumScreenHeightFilter;
- (unsigned long long)currentModeHeight;
- (unsigned long long)currentModeWidth;
- (void)movieHeaderDownloaderFinishedWithError:(id)arg1;
- (void)_populateVideoResolutionMap:(id)arg1;
- (void)_updateMaxBitrateForMovieDetails:(id)arg1;
- (_Bool)isVideoHeightAllowedUnderCellular:(unsigned long long)arg1;
- (void)_sendLicenseRequestEnd;
- (void)_sendLDLicenseRequestEnd;
- (void)_sendLicenseRequestStart;
- (void)_sendLDLicenseRequestStart;
- (void)_sendEndVariantPlaylist:(unsigned long long)arg1 playlistKey:(id)arg2;
- (void)_sendStartVariantPlaylist:(unsigned long long)arg1 playlistKey:(id)arg2;
- (void)_sendEndMovieHeaderDownload;
- (void)_sendStartMovieHeaderDownload;
- (void)_sendEndPlaylistBuild;
- (void)_sendStartPlaylistBuild;
- (void)recordCountedStartPlayEvent:(id)arg1;
- (double)peakBpsFromNominalBps:(double)arg1;
- (id)drmTypeString;
- (void)setUrlForOfflinePlaylist:(id)arg1 forDownloadableId:(id)arg2;
- (id)downloadUrlForDownloadableId:(id)arg1;
- (id)createPlaylistBuilder;
- (id)createPlaylistParameter;
- (id)buildMovieDetails:(id)arg1;
- (double)findMinimalVideoFps;
- (id)buildMasterPlaylistForExternalDisplay:(id)arg1;
- (id)kbpsForDownloadable:(id)arg1;
- (id)buildDownloadableSizeMap;
- (id)buildMediaControllerSpecificMovieDetails:(id)arg1;
- (void)buildVariantPlaylist:(id)arg1 forKey:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (long long)_increaseVariantSentCount:(id)arg1;
- (id)_errorFromResponseError:(id)arg1 errorCode:(long long)arg2;
- (int)errorCodeForLicenseFailures;
- (void)setupVmafFiltering;
- (void)setupHdmiDongleUseSuspected;
- (void)openMovieWithRequest:(id)arg1;
- (void)updatePlaybackTime:(double)arg1;
- (_Bool)isLiveContent;
- (void)startMovieHeaderDownload;
- (void)createMovieHeaderDownloader;
- (_Bool)isOffline;
- (void)retrieveManifestAsync;
- (void)retrieveManifest:(CDUnknownBlockType)arg1;
- (id)flavorForManifestRequest;
- (id)buildMediaControllerSpecificManifestArguments;
- (id)getExcludedProfiles;
- (_Bool)processManifest:(id)arg1 fromArguments:(id)arg2;
- (void)processChoiceMap:(id)arg1;
- (_Bool)isVideoDrmed:(id)arg1;
- (long long)videoBitrateCapKbpsUnderCellular;
- (id)fixUpSubtitleLanguageDescriptions:(id)arg1;
- (_Bool)didCancelPrefetch;
- (_Bool)shouldCancelPrefetch;
- (void)cancelPrefetch;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 fetchOptions:(unsigned long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

