//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/BladeRunnerConsecutiveErrorManagerDelegate-Protocol.h>
#import <Nbp/BladeRunnerRateLimitManagerDelegate-Protocol.h>
#import <Nbp/BladeRunnerSyntheticStopEventStoreDelegate-Protocol.h>
#import <Nbp/PlatformLogger-Protocol.h>

@class BladeRunnerCompletionBlockMap, BladeRunnerConsecutiveErrorManager, BladeRunnerEventsTable, BladeRunnerHealthState, BladeRunnerLogblobTable, BladeRunnerPeriodicCallback, BladeRunnerRateLimitManager, BladeRunnerSyntheticStopEventStore, DedicatedStorageContainer, MonoClockTimestamp, NFWeakObjectMap, NSDictionary, NSMapTable, NSMutableDictionary, NSSet, NSString, NetflixReachability, RebuildableBlobTable, RingBuffer;
@protocol AppleNativeStorage, AppleStorageContainer, BladeRunnerFTLStateProvider, LoggingDependencyProvider, LoggingNetworkDelegate, LoggingValidationDelegate, OS_dispatch_queue, OS_dispatch_source;

@interface BladeRunnerLogging : NSObject <BladeRunnerConsecutiveErrorManagerDelegate, BladeRunnerRateLimitManagerDelegate, BladeRunnerSyntheticStopEventStoreDelegate, PlatformLogger>
{
    _Bool _eventRequestInProcess;
    _Bool _logblobRequestInProcess;
    _Bool _eventLoggingEnabled;
    _Bool _logblobLoggingEnabled;
    _Bool _loggerEnabled;
    _Bool _postTableSetupComplete;
    _Bool _suspendEventsRateLimiterForAutomationFlush;
    _Bool _suspendLogblobRateLimiterForAutomationFlush;
    id <BladeRunnerFTLStateProvider> _ftlStateProvider;
    BladeRunnerSyntheticStopEventStore *_syntheticStopEventStore;
    BladeRunnerSyntheticStopEventStore *_syntheticEndPlayLogblobStore;
    id <LoggingDependencyProvider> _dependencyProvider;
    id <LoggingNetworkDelegate> _loggingNetworkDelegate;
    id <LoggingValidationDelegate> _loggingValidationDelegate;
    NSObject<AppleNativeStorage> *_rowBasedStorage;
    NSMutableDictionary *_logblobDefaults;
    DedicatedStorageContainer *_synEventTable;
    DedicatedStorageContainer *_synBlobTable;
    DedicatedStorageContainer *_auditBlobTable;
    id <AppleStorageContainer> _auditStorage;
    NetflixReachability *_reachability;
    unsigned long long _networkStatus;
    NSString *_appId;
    NSString *_sessionId;
    unsigned long long _licenseSyncBlockedCount;
    MonoClockTimestamp *_eventRequestInProcessTimestamp;
    MonoClockTimestamp *_logblobRequestInProcessTimestamp;
    BladeRunnerEventsTable *_eventsTable;
    BladeRunnerLogblobTable *_logblobTable;
    RebuildableBlobTable *_syntheticEndplayTable;
    RebuildableBlobTable *_syntheticStopEventTable;
    RebuildableBlobTable *_auditStorageTable;
    RingBuffer *_pendingLogblobs;
    unsigned long long _pendingLogblobsMaximum;
    RingBuffer *_pendingEvents;
    unsigned long long _pendingEventsMaximum;
    NSObject<OS_dispatch_queue> *_processingQueue;
    NSObject<OS_dispatch_source> *_eventsCoalescingTimer;
    NSObject<OS_dispatch_source> *_logblobCoalescingTimer;
    BladeRunnerHealthState *_auditStateOnline;
    BladeRunnerHealthState *_auditStateOffline;
    BladeRunnerPeriodicCallback *_auditStateSavePeriodicCallback;
    BladeRunnerPeriodicCallback *_auditStateSendPeriodicCallback;
    BladeRunnerConsecutiveErrorManager *_consecutiveErrorManager;
    BladeRunnerRateLimitManager *_eventsRateLimitManager;
    BladeRunnerRateLimitManager *_logblobRateLimitManager;
    NSDictionary *_logblobTypeRateLimits;
    NSSet *_blockedLogblobTypes;
    unsigned long long _coalescingEventsDelayMS;
    unsigned long long _coalescingLogblobsDelayMS;
    BladeRunnerCompletionBlockMap *_completionBlockMap;
    NSMapTable *_logblobTranslationDelegates;
    NSMapTable *_eventTranslationDelegates;
    NFWeakObjectMap *_eventCompletionDelegates;
    unsigned long long _remainingImmediateLogblobLimit;
    unsigned long long _remainingIndexRebuildLimit;
    unsigned long long _remainingDatabaseRebuildLimit;
    unsigned long long _remainingMaintenanceCommandLimit;
    unsigned long long _remainingLowDiskAnnouncementLimit;
}

+ (long long)correctedTime;
+ (id)generateId;
+ (_Bool)isOnlineEvent:(id)arg1;
+ (_Bool)shouldStripUserDataForEntry:(id)arg1;
+ (_Bool)isLastRetryForEntry:(id)arg1;
+ (id)diskspaceReport;
+ (id)completionBlockEventType;
+ (_Bool)shouldAnnounceLowDiskSpaceFromErrors:(id)arg1;
+ (_Bool)shouldRecreateTableFromRebuildIndexResponseDictionary:(id)arg1;
+ (id)rebuildIndexForTable:(id)arg1;
+ (id)storagePath:(_Bool)arg1;
+ (id)storageDirectory;
- (void).cxx_destruct;
@property(nonatomic) unsigned long long remainingLowDiskAnnouncementLimit; // @synthesize remainingLowDiskAnnouncementLimit=_remainingLowDiskAnnouncementLimit;
@property(nonatomic) unsigned long long remainingMaintenanceCommandLimit; // @synthesize remainingMaintenanceCommandLimit=_remainingMaintenanceCommandLimit;
@property(nonatomic) unsigned long long remainingDatabaseRebuildLimit; // @synthesize remainingDatabaseRebuildLimit=_remainingDatabaseRebuildLimit;
@property(nonatomic) unsigned long long remainingIndexRebuildLimit; // @synthesize remainingIndexRebuildLimit=_remainingIndexRebuildLimit;
@property(nonatomic) unsigned long long remainingImmediateLogblobLimit; // @synthesize remainingImmediateLogblobLimit=_remainingImmediateLogblobLimit;
@property(nonatomic) _Bool suspendLogblobRateLimiterForAutomationFlush; // @synthesize suspendLogblobRateLimiterForAutomationFlush=_suspendLogblobRateLimiterForAutomationFlush;
@property(nonatomic) _Bool suspendEventsRateLimiterForAutomationFlush; // @synthesize suspendEventsRateLimiterForAutomationFlush=_suspendEventsRateLimiterForAutomationFlush;
@property(retain, nonatomic) NFWeakObjectMap *eventCompletionDelegates; // @synthesize eventCompletionDelegates=_eventCompletionDelegates;
@property(retain, nonatomic) NSMapTable *eventTranslationDelegates; // @synthesize eventTranslationDelegates=_eventTranslationDelegates;
@property(retain, nonatomic) NSMapTable *logblobTranslationDelegates; // @synthesize logblobTranslationDelegates=_logblobTranslationDelegates;
@property(retain, nonatomic) BladeRunnerCompletionBlockMap *completionBlockMap; // @synthesize completionBlockMap=_completionBlockMap;
@property(nonatomic) unsigned long long coalescingLogblobsDelayMS; // @synthesize coalescingLogblobsDelayMS=_coalescingLogblobsDelayMS;
@property(nonatomic) unsigned long long coalescingEventsDelayMS; // @synthesize coalescingEventsDelayMS=_coalescingEventsDelayMS;
@property(retain, nonatomic) NSSet *blockedLogblobTypes; // @synthesize blockedLogblobTypes=_blockedLogblobTypes;
@property(retain, nonatomic) NSDictionary *logblobTypeRateLimits; // @synthesize logblobTypeRateLimits=_logblobTypeRateLimits;
@property(retain, nonatomic) BladeRunnerRateLimitManager *logblobRateLimitManager; // @synthesize logblobRateLimitManager=_logblobRateLimitManager;
@property(retain, nonatomic) BladeRunnerRateLimitManager *eventsRateLimitManager; // @synthesize eventsRateLimitManager=_eventsRateLimitManager;
@property(retain, nonatomic) BladeRunnerConsecutiveErrorManager *consecutiveErrorManager; // @synthesize consecutiveErrorManager=_consecutiveErrorManager;
@property(retain, nonatomic) BladeRunnerPeriodicCallback *auditStateSendPeriodicCallback; // @synthesize auditStateSendPeriodicCallback=_auditStateSendPeriodicCallback;
@property(retain, nonatomic) BladeRunnerPeriodicCallback *auditStateSavePeriodicCallback; // @synthesize auditStateSavePeriodicCallback=_auditStateSavePeriodicCallback;
@property(retain, nonatomic) BladeRunnerHealthState *auditStateOffline; // @synthesize auditStateOffline=_auditStateOffline;
@property(retain, nonatomic) BladeRunnerHealthState *auditStateOnline; // @synthesize auditStateOnline=_auditStateOnline;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *logblobCoalescingTimer; // @synthesize logblobCoalescingTimer=_logblobCoalescingTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *eventsCoalescingTimer; // @synthesize eventsCoalescingTimer=_eventsCoalescingTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *processingQueue; // @synthesize processingQueue=_processingQueue;
@property(nonatomic) unsigned long long pendingEventsMaximum; // @synthesize pendingEventsMaximum=_pendingEventsMaximum;
@property(retain, nonatomic) RingBuffer *pendingEvents; // @synthesize pendingEvents=_pendingEvents;
@property(nonatomic) unsigned long long pendingLogblobsMaximum; // @synthesize pendingLogblobsMaximum=_pendingLogblobsMaximum;
@property(retain, nonatomic) RingBuffer *pendingLogblobs; // @synthesize pendingLogblobs=_pendingLogblobs;
@property(retain, nonatomic) RebuildableBlobTable *auditStorageTable; // @synthesize auditStorageTable=_auditStorageTable;
@property(retain, nonatomic) RebuildableBlobTable *syntheticStopEventTable; // @synthesize syntheticStopEventTable=_syntheticStopEventTable;
@property(retain, nonatomic) RebuildableBlobTable *syntheticEndplayTable; // @synthesize syntheticEndplayTable=_syntheticEndplayTable;
@property(retain, nonatomic) BladeRunnerLogblobTable *logblobTable; // @synthesize logblobTable=_logblobTable;
@property(retain, nonatomic) BladeRunnerEventsTable *eventsTable; // @synthesize eventsTable=_eventsTable;
@property(nonatomic) _Bool postTableSetupComplete; // @synthesize postTableSetupComplete=_postTableSetupComplete;
@property(nonatomic) _Bool loggerEnabled; // @synthesize loggerEnabled=_loggerEnabled;
@property(nonatomic) _Bool logblobLoggingEnabled; // @synthesize logblobLoggingEnabled=_logblobLoggingEnabled;
@property(nonatomic) _Bool eventLoggingEnabled; // @synthesize eventLoggingEnabled=_eventLoggingEnabled;
@property(retain, nonatomic) MonoClockTimestamp *logblobRequestInProcessTimestamp; // @synthesize logblobRequestInProcessTimestamp=_logblobRequestInProcessTimestamp;
@property(retain, nonatomic) MonoClockTimestamp *eventRequestInProcessTimestamp; // @synthesize eventRequestInProcessTimestamp=_eventRequestInProcessTimestamp;
@property(nonatomic) _Bool logblobRequestInProcess; // @synthesize logblobRequestInProcess=_logblobRequestInProcess;
@property(nonatomic) _Bool eventRequestInProcess; // @synthesize eventRequestInProcess=_eventRequestInProcess;
@property(nonatomic) unsigned long long licenseSyncBlockedCount; // @synthesize licenseSyncBlockedCount=_licenseSyncBlockedCount;
@property(copy, nonatomic) NSString *sessionId; // @synthesize sessionId=_sessionId;
@property(copy, nonatomic) NSString *appId; // @synthesize appId=_appId;
@property(nonatomic) unsigned long long networkStatus; // @synthesize networkStatus=_networkStatus;
@property(retain, nonatomic) NetflixReachability *reachability; // @synthesize reachability=_reachability;
@property(retain, nonatomic) id <AppleStorageContainer> auditStorage; // @synthesize auditStorage=_auditStorage;
@property(retain, nonatomic) DedicatedStorageContainer *auditBlobTable; // @synthesize auditBlobTable=_auditBlobTable;
@property(retain, nonatomic) DedicatedStorageContainer *synBlobTable; // @synthesize synBlobTable=_synBlobTable;
@property(retain, nonatomic) DedicatedStorageContainer *synEventTable; // @synthesize synEventTable=_synEventTable;
@property(retain, nonatomic) NSMutableDictionary *logblobDefaults; // @synthesize logblobDefaults=_logblobDefaults;
@property(retain, nonatomic) NSObject<AppleNativeStorage> *rowBasedStorage; // @synthesize rowBasedStorage=_rowBasedStorage;
@property(nonatomic) __weak id <LoggingValidationDelegate> loggingValidationDelegate; // @synthesize loggingValidationDelegate=_loggingValidationDelegate;
@property(nonatomic) __weak id <LoggingNetworkDelegate> loggingNetworkDelegate; // @synthesize loggingNetworkDelegate=_loggingNetworkDelegate;
@property(nonatomic) __weak id <LoggingDependencyProvider> dependencyProvider; // @synthesize dependencyProvider=_dependencyProvider;
@property(readonly, nonatomic) BladeRunnerSyntheticStopEventStore *syntheticEndPlayLogblobStore; // @synthesize syntheticEndPlayLogblobStore=_syntheticEndPlayLogblobStore;
@property(readonly, nonatomic) BladeRunnerSyntheticStopEventStore *syntheticStopEventStore; // @synthesize syntheticStopEventStore=_syntheticStopEventStore;
- (void)failureToClearTimestampsInSyntheticStopStore:(id)arg1;
- (void)failureToClearSyntheticStopStore:(id)arg1 forXidTimestamp:(id)arg2;
- (void)failureToClearSyntheticStopStore:(id)arg1 forXid:(id)arg2;
- (void)failureToClearSyntheticStopStore:(id)arg1 events:(id)arg2;
@property(nonatomic) __weak id <BladeRunnerFTLStateProvider> ftlStateProvider; // @synthesize ftlStateProvider=_ftlStateProvider;
- (id)offlineState;
- (void)consecutiveErrorManager:(id)arg1 didBackoffForDuration:(unsigned long long)arg2;
- (void)rateLimitManager:(id)arg1 didStartNextInterval:(unsigned long long)arg2;
- (id)errorFromServerResponse:(id)arg1;
- (void)_processResponse:(id)arg1 forLogblobs:(id)arg2 withWorkUnit:(id)arg3 error:(id)arg4;
- (void)_processLogblobEntries:(id)arg1 withWorkUnit:(id)arg2;
- (void)_processLogblobs;
- (void)notifyEventCompletionDelegate:(id)arg1 responsePayload:(id)arg2 error:(id)arg3;
- (id)translateEntry:(id)arg1;
- (_Bool)doesErrorRequireStrippingUserDataOnNextRetry:(id)arg1;
- (_Bool)incrementRetryCountForError:(id)arg1;
- (_Bool)isFatalError:(id)arg1;
- (long long)workUnitResultCodeForRetryError:(id)arg1;
- (void)saveAuditState;
- (void)resetAuditState;
- (id)auditStateForEvent:(id)arg1;
- (id)auditStateForLogblob:(id)arg1;
- (_Bool)hasAuditState;
- (id)offlineAuditStateStorageKey;
- (id)onlineAuditStateStorageKey;
- (void)sendAuditLogBlob;
- (void)resetPeriodicAuditStateSave;
- (void)resetPeriodicAuditStateSend;
- (void)announceLowDiskSpaceError;
- (void)_processResponse:(id)arg1 forEventsWorkUnit:(id)arg2 error:(id)arg3;
- (void)_processFailedEntry:(id)arg1 forError:(id)arg2 withWorkUnitResult:(id)arg3;
- (void)_processCompleteEntry:(id)arg1 forResponse:(id)arg2 withWorkUnitResult:(id)arg3;
- (void)_processEvents;
- (id)eventsWorkUnit;
- (_Bool)canBatchEvent:(id)arg1 withFirstEvent:(id)arg2 shouldStop:(_Bool *)arg3;
- (id)unbatchableEvents;
- (unsigned long long)logblobBatchSizeForConnectivity;
- (unsigned long long)eventsBatchSizeForConnectivityAndRateLimit;
- (unsigned long long)eventsBatchSizeForConnectivity;
- (unsigned long long)recommendedBatchSizeForEntityWireSize:(unsigned long long)arg1;
- (unsigned long long)payloadSizeForConnectivity;
- (unsigned int)logblobCoalescingSizeForConnectivity;
- (unsigned int)eventsCoalescingSizeForConnectivity;
- (_Bool)canEnqueueLogblob:(id)arg1;
- (void)removeStaleSyncDeactivateEvents;
- (void)checkForSyntheticLogblobs;
- (void)checkForSyntheticEvents;
- (id)commonLogblobWithXid:(id)arg1;
- (id)baseLogblobWithXid:(id)arg1;
- (id)updateDispatchSource:(id)arg1 withDelay:(unsigned long long)arg2 withCoalescingBlock:(CDUnknownBlockType)arg3;
- (void)_processNextEvent;
- (void)startEventsCoalescingTimerWithDelay:(unsigned long long)arg1;
- (void)startEventsCoalescingTimer;
- (void)_recordEventsDisabledReason;
- (void)_validateNetworkStatusWithPDSEvent:(id)arg1;
- (void)_eventAddEntries:(id)arg1;
- (void)_processNextLogblob;
- (void)startLogblobCoalescingTimerWithDelay:(unsigned long long)arg1;
- (void)startLogblobCoalescingTimer;
- (void)_recordLogblobDisabledReason;
- (void)logblobAddEntries:(id)arg1;
- (void)trimTablesToMaximum;
- (void)_sendImmediateLogblobForErrors:(id)arg1 andContext:(id)arg2;
- (void)_consumePendingEvents;
- (void)_holdPendingEvents:(id)arg1;
- (void)_consumePendingLogblobs;
- (void)_holdPendingLogblobs:(id)arg1;
- (void)_processCompletionBlockList:(id)arg1 withError:(id)arg2;
- (void)processCompletionBlockForEvent:(id)arg1;
- (void)failAllCompletionBlocksWithError:(id)arg1;
- (_Bool)canProcessEvents;
- (void)_processEventsDirectly;
- (void)processEvents;
- (void)_processLogblogsDirectly;
- (void)processLogblogs;
- (void)restartProcessingPump;
- (void)handleNetworkInterfaceChange:(id)arg1;
- (void)setupReachability;
- (void)teardownReachability;
- (void)runIntegrityCheck;
- (void)performDatabaseRoutineMaintenance;
- (void)performDatabaseStartupMaintenance;
- (id)rebuildLogblobIndex;
- (id)rebuildEventsIndex;
- (void)handleEventsTableReadyNotification:(id)arg1;
- (void)setupEventsTableReadyNotification;
- (void)teardownEventsTableReadyNotification;
- (void)beginBackgroundProcessing:(id)arg1;
- (void)teardownBackgroundProcessing;
- (void)setupBackgroundProcessing;
- (id)eventTypeForEvent:(id)arg1;
- (void)logSend:(id)arg1 logblob:(id)arg2 severityTag:(id)arg3 xid:(id)arg4 esn:(id)arg5;
- (_Bool)isValidLogblob:(id)arg1;
- (void)setupPendingCounts;
- (void)setupCoalescingDelays;
- (void)setupRateLimits;
- (void)createTables;
- (void)rebuildDatabase;
- (void)setupTables;
- (void)setupSyntheticStopStorage;
- (void)setupAuditStorage;
- (void)handleAutomationCommandNotification:(id)arg1;
- (void)_handleFlushArguments:(id)arg1;
- (void)flushLogblobsForAutomation;
- (void)flushEventsForAutomation;
- (id)copyLogblobDefaults;
- (void)removeLogblobDefaults:(id)arg1;
- (void)addLogblobDefaults:(id)arg1;
- (void)removeEventCompletionDelegate:(id)arg1;
- (id)addEventCompletionDelegate:(id)arg1 forEventType:(id)arg2;
- (void)setEventTranslationDelegate:(id)arg1 forEventType:(id)arg2;
- (void)setLogblobTranslationDelegate:(id)arg1 forLogblobType:(id)arg2;
- (_Bool)isLicenseSyncBlocked;
- (_Bool)queueContainsEventOfType:(id)arg1;
- (void)setLicenseSyncBlocked:(_Bool)arg1;
- (void)eventAddEntries:(id)arg1;
- (void)storeOrSendEvent:(unsigned long long)arg1 withPayload:(id)arg2;
- (void)logSend:(id)arg1 logblob:(id)arg2 severity:(_Bool)arg3 xid:(id)arg4 esn:(id)arg5;
- (void)logSend:(id)arg1 logblob:(id)arg2 severity:(_Bool)arg3;
- (void)scheduleEventCompletionBlock:(CDUnknownBlockType)arg1;
- (void)flushLogblobs;
- (void)flushEvents;
- (void)resumeAllTimers;
- (void)stopAllTimers;
- (void)dealloc;
- (void)shutdown;
- (id)initWithDependencyProvider:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

