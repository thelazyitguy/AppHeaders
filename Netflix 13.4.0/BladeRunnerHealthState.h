//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Nbp/BladeRunnerStorageState.h>

@class BladeRunnerEventHistogram, NSString;

@interface BladeRunnerHealthState : BladeRunnerStorageState
{
    NSString *_eventLastError;
    NSString *_eventRetryDropLastError;
    NSString *_eventRetryLastError;
    NSString *_logblobProcessingError;
    NSString *_logblobResponseError;
    NSString *_logblobEntryRetryError;
    NSString *_logblobEntryRetryDropError;
    BladeRunnerEventHistogram *_noticeHistogram;
    BladeRunnerEventHistogram *_errorHistogram;
    BladeRunnerEventHistogram *_fatalEventErrorsHistogram;
    BladeRunnerEventHistogram *_logblobFailure;
    BladeRunnerEventHistogram *_logblobSuccess;
    BladeRunnerEventHistogram *_logblobEnqueue;
    BladeRunnerEventHistogram *_eventFailure;
    BladeRunnerEventHistogram *_eventSuccess;
    BladeRunnerEventHistogram *_eventEnqueue;
}

+ (id)storageAccount;
- (void).cxx_destruct;
@property(retain, nonatomic) BladeRunnerEventHistogram *eventEnqueue; // @synthesize eventEnqueue=_eventEnqueue;
@property(retain, nonatomic) BladeRunnerEventHistogram *eventSuccess; // @synthesize eventSuccess=_eventSuccess;
@property(retain, nonatomic) BladeRunnerEventHistogram *eventFailure; // @synthesize eventFailure=_eventFailure;
@property(retain, nonatomic) BladeRunnerEventHistogram *logblobEnqueue; // @synthesize logblobEnqueue=_logblobEnqueue;
@property(retain, nonatomic) BladeRunnerEventHistogram *logblobSuccess; // @synthesize logblobSuccess=_logblobSuccess;
@property(retain, nonatomic) BladeRunnerEventHistogram *logblobFailure; // @synthesize logblobFailure=_logblobFailure;
@property(retain, nonatomic) BladeRunnerEventHistogram *fatalEventErrorsHistogram; // @synthesize fatalEventErrorsHistogram=_fatalEventErrorsHistogram;
@property(retain, nonatomic) BladeRunnerEventHistogram *errorHistogram; // @synthesize errorHistogram=_errorHistogram;
@property(retain, nonatomic) BladeRunnerEventHistogram *noticeHistogram; // @synthesize noticeHistogram=_noticeHistogram;
@property(copy, nonatomic) NSString *logblobEntryRetryDropError; // @synthesize logblobEntryRetryDropError=_logblobEntryRetryDropError;
@property(copy, nonatomic) NSString *logblobEntryRetryError; // @synthesize logblobEntryRetryError=_logblobEntryRetryError;
@property(copy, nonatomic) NSString *logblobResponseError; // @synthesize logblobResponseError=_logblobResponseError;
@property(copy, nonatomic) NSString *logblobProcessingError; // @synthesize logblobProcessingError=_logblobProcessingError;
@property(copy, nonatomic) NSString *eventRetryLastError; // @synthesize eventRetryLastError=_eventRetryLastError;
@property(copy, nonatomic) NSString *eventRetryDropLastError; // @synthesize eventRetryDropLastError=_eventRetryDropLastError;
@property(copy, nonatomic) NSString *eventLastError; // @synthesize eventLastError=_eventLastError;
@property(readonly, nonatomic) unsigned long long logblobEntryProcessingErrorCount;
@property(readonly, nonatomic) unsigned long long logblobProcessingErrorCount;
@property(readonly, nonatomic) unsigned long long logblobEntryDequeueCount;
@property(readonly, nonatomic) unsigned long long logblobEntryEnqueueCount;
@property(readonly, nonatomic) unsigned long long logblobEntryCompleteCount;
@property(readonly, nonatomic) unsigned long long logblobEntryErrorCount;
@property(readonly, nonatomic) unsigned long long logblobEntryRetryDropCount;
@property(readonly, nonatomic) unsigned long long logblobEntryRetryCount;
@property(readonly, nonatomic) unsigned long long logblobDequeueCount;
@property(readonly, nonatomic) unsigned long long logblobEnqueueCount;
@property(readonly, nonatomic) unsigned long long logblobCompleteCount;
@property(readonly, nonatomic) unsigned long long logblobErrorCount;
@property(readonly, nonatomic) unsigned long long eventDequeueCount;
@property(readonly, nonatomic) unsigned long long eventEnqueueCount;
@property(readonly, nonatomic) unsigned long long eventCompleteCount;
@property(readonly, nonatomic) unsigned long long eventInvalidActionCount;
@property(readonly, nonatomic) unsigned long long eventDroppedCredentialsRecoveryCount;
@property(readonly, nonatomic) unsigned long long eventRetryDropCount;
@property(readonly, nonatomic) unsigned long long eventRetryCount;
- (void)loadHistogramsFromStateObject:(id)arg1;
- (id)eventEnqueueHistogramKey;
- (id)eventSuccessHistogramKey;
- (id)eventFailureHistogramKey;
- (id)logblobEnqueueHistogramKey;
- (id)logblobSuccessHistogramKey;
- (id)logblobFailureHistogramKey;
- (id)fatalEventErrorsHistogramKey;
- (id)errorHistogramKey;
- (id)noticeHistogramKey;
- (void)addError:(id)arg1 toHistogram:(id)arg2;
- (void)incrementEnqueuedEvent:(id)arg1;
- (void)incrementSuccessfulEvent:(id)arg1;
- (void)incrementFailedEvent:(id)arg1;
- (void)incrementEnqueuedLogblob:(id)arg1;
- (void)incrementSuccessfulLogblob:(id)arg1;
- (void)incrementFailedLogblob:(id)arg1;
- (void)setLastLogblobEntryRetryDropError:(id)arg1;
- (void)setLastLogblobEntryRetryError:(id)arg1;
- (void)setLastLogblobResponseError:(id)arg1;
- (void)setLastLogblobProcessingError:(id)arg1;
- (void)setLastEventRetryError:(id)arg1;
- (void)setLastEventRetryDropError:(id)arg1;
- (void)incrementNoticeEvent:(id)arg1;
- (void)incrementEventDequeueCount:(unsigned long long)arg1;
- (void)incrementEventEnqueueCount:(unsigned long long)arg1;
- (void)incrementEventCompleteCount;
- (void)incrementEventInvalidActionCount;
- (void)incrementEventDroppedCredentialsRecoveryCount;
- (void)incrementEventRetryDropCount;
- (void)incrementEventRetryCount;
- (void)incrementLogblobEntryRetryDropCount;
- (void)incrementLogblobEntryRetryCount;
- (void)incrementLogblobEntryDequeueCount:(unsigned long long)arg1;
- (void)incrementLogblobEntryEnqueueCount:(unsigned long long)arg1;
- (void)incrementLogblobEntryCompleteCount:(unsigned long long)arg1;
- (void)incrementLogblobEntryErrorCount:(unsigned long long)arg1;
- (void)incrementLogblobEntryProcessingErrorCount:(unsigned long long)arg1;
- (id)stateDictionary;
- (void)loadStateObject:(id)arg1;
- (id)initWithStateStorageKey:(id)arg1;

@end

