//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Nbp/CdnSelectionDelegate-Protocol.h>
#import <Nbp/NSURLSessionDelegate-Protocol.h>
#import <Nbp/NfOfflineDownloader-Protocol.h>
#import <Nbp/OfflineMediaControllerDelegate-Protocol.h>

@class APIStateStore, BladeRunnerLoggingSession, BladeRunnerPlaybackReporter, ManifestDeviceDetails, ManifestFetchAgent, NSDate, NSDictionary, NSError, NSMutableDictionary, NSNumber, NSString, OfflineContentManager, OfflineDownloadMediaController, WatchableInfo;
@protocol InititalBandwidthCapReporterDelegate, OS_dispatch_queue;

@interface OfflineDownloader : NSObject <OfflineMediaControllerDelegate, NfOfflineDownloader, CdnSelectionDelegate, NSURLSessionDelegate>
{
    _Bool _licenseRefresh;
    _Bool _autoRefresh;
    _Bool _resolved;
    _Bool _alreadySentOpened;
    _Bool _alreadySentReadyEvent;
    _Bool _taskFromBackground;
    _Bool _alreadySawYearlyWarning;
    _Bool _percentUpdated;
    _Bool _started;
    _Bool _suspended;
    _Bool _canceling;
    _Bool _completed;
    APIStateStore *_stateStore;
    NSString *_playbackId;
    WatchableInfo *_watchableInfo;
    double _lastTimeSomethingHappened;
    NSString *_movieId;
    OfflineDownloadMediaController *_offlineDownloadMediaController;
    NSObject<OS_dispatch_queue> *_downloadQueue;
    OfflineContentManager *_manager;
    NSString *_downloadTransactionId;
    BladeRunnerLoggingSession *_loggingSession;
    NSNumber *_primaryTrackWeight;
    NSDictionary *_pendingLicenseData;
    NSMutableDictionary *_pendingPercentages;
    NSMutableDictionary *_pendingErrors;
    NSMutableDictionary *_downloadTasks;
    NSString *_offlineTransactionId;
    NSError *_errorOverride;
    NSObject *_stateObject;
    double _lastUIUpdatePercentage;
    double _lastLoggingUpdatePercentage;
    NSDictionary *_trackingInfo;
    CDUnknownBlockType _cancellationCallback;
    NSDate *_startTime;
    ManifestDeviceDetails *_manifestDeviceDetails;
    ManifestFetchAgent *_manifestFetchAgent;
    double _lastUIPercentageTime;
    double _lastUIPercentage;
    long long _progressEventsPerDownload;
    BladeRunnerPlaybackReporter *_playbackReporter;
    NSObject<OS_dispatch_queue> *_serialQueue;
    id <InititalBandwidthCapReporterDelegate> _bandwidthCapReporterDelegate;
    struct CGSize _mainScreenCurrentModeSize;
    struct CGSize _mainScreenNativeSize;
}

+ (long long)nflx_freeStorageInBytes;
- (void).cxx_destruct;
@property(retain, nonatomic) id <InititalBandwidthCapReporterDelegate> bandwidthCapReporterDelegate; // @synthesize bandwidthCapReporterDelegate=_bandwidthCapReporterDelegate;
@property(nonatomic) struct CGSize mainScreenNativeSize; // @synthesize mainScreenNativeSize=_mainScreenNativeSize;
@property(nonatomic) struct CGSize mainScreenCurrentModeSize; // @synthesize mainScreenCurrentModeSize=_mainScreenCurrentModeSize;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) BladeRunnerPlaybackReporter *playbackReporter; // @synthesize playbackReporter=_playbackReporter;
@property(nonatomic) long long progressEventsPerDownload; // @synthesize progressEventsPerDownload=_progressEventsPerDownload;
@property(nonatomic) double lastUIPercentage; // @synthesize lastUIPercentage=_lastUIPercentage;
@property(nonatomic) double lastUIPercentageTime; // @synthesize lastUIPercentageTime=_lastUIPercentageTime;
@property(retain, nonatomic) ManifestFetchAgent *manifestFetchAgent; // @synthesize manifestFetchAgent=_manifestFetchAgent;
@property(retain, nonatomic) ManifestDeviceDetails *manifestDeviceDetails; // @synthesize manifestDeviceDetails=_manifestDeviceDetails;
@property(retain, nonatomic) NSDate *startTime; // @synthesize startTime=_startTime;
@property(copy) CDUnknownBlockType cancellationCallback; // @synthesize cancellationCallback=_cancellationCallback;
@property(retain, nonatomic) NSDictionary *trackingInfo; // @synthesize trackingInfo=_trackingInfo;
@property(nonatomic) double lastLoggingUpdatePercentage; // @synthesize lastLoggingUpdatePercentage=_lastLoggingUpdatePercentage;
@property(nonatomic) double lastUIUpdatePercentage; // @synthesize lastUIUpdatePercentage=_lastUIUpdatePercentage;
@property(nonatomic) _Bool completed; // @synthesize completed=_completed;
@property(nonatomic) _Bool canceling; // @synthesize canceling=_canceling;
@property(nonatomic) _Bool suspended; // @synthesize suspended=_suspended;
@property(nonatomic) _Bool started; // @synthesize started=_started;
@property(retain, nonatomic) NSObject *stateObject; // @synthesize stateObject=_stateObject;
@property(retain, nonatomic) NSError *errorOverride; // @synthesize errorOverride=_errorOverride;
@property(retain, nonatomic) NSString *offlineTransactionId; // @synthesize offlineTransactionId=_offlineTransactionId;
@property(retain, nonatomic) NSMutableDictionary *downloadTasks; // @synthesize downloadTasks=_downloadTasks;
@property(retain, nonatomic) NSMutableDictionary *pendingErrors; // @synthesize pendingErrors=_pendingErrors;
@property(retain, nonatomic) NSMutableDictionary *pendingPercentages; // @synthesize pendingPercentages=_pendingPercentages;
@property(retain, nonatomic) NSDictionary *pendingLicenseData; // @synthesize pendingLicenseData=_pendingLicenseData;
@property(nonatomic) _Bool percentUpdated; // @synthesize percentUpdated=_percentUpdated;
@property(nonatomic) _Bool alreadySawYearlyWarning; // @synthesize alreadySawYearlyWarning=_alreadySawYearlyWarning;
@property(nonatomic) _Bool taskFromBackground; // @synthesize taskFromBackground=_taskFromBackground;
@property(nonatomic) _Bool alreadySentReadyEvent; // @synthesize alreadySentReadyEvent=_alreadySentReadyEvent;
@property(nonatomic) _Bool alreadySentOpened; // @synthesize alreadySentOpened=_alreadySentOpened;
@property(retain, nonatomic) NSNumber *primaryTrackWeight; // @synthesize primaryTrackWeight=_primaryTrackWeight;
@property(nonatomic) _Bool resolved; // @synthesize resolved=_resolved;
@property(retain, nonatomic) BladeRunnerLoggingSession *loggingSession; // @synthesize loggingSession=_loggingSession;
@property(retain, nonatomic) NSString *downloadTransactionId; // @synthesize downloadTransactionId=_downloadTransactionId;
@property(nonatomic) _Bool autoRefresh; // @synthesize autoRefresh=_autoRefresh;
@property(nonatomic) _Bool licenseRefresh; // @synthesize licenseRefresh=_licenseRefresh;
@property(nonatomic) __weak OfflineContentManager *manager; // @synthesize manager=_manager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *downloadQueue; // @synthesize downloadQueue=_downloadQueue;
@property(retain, nonatomic) OfflineDownloadMediaController *offlineDownloadMediaController; // @synthesize offlineDownloadMediaController=_offlineDownloadMediaController;
@property(retain, nonatomic) NSString *movieId; // @synthesize movieId=_movieId;
@property(nonatomic) double lastTimeSomethingHappened; // @synthesize lastTimeSomethingHappened=_lastTimeSomethingHappened;
@property(nonatomic) __weak WatchableInfo *watchableInfo; // @synthesize watchableInfo=_watchableInfo;
@property(retain, nonatomic) NSString *playbackId; // @synthesize playbackId=_playbackId;
- (void)cdnSelector:(id)arg1 contentHeaderForDownloadable:(id)arg2 failedWithError:(id)arg3;
- (void)cdnSelector:(id)arg1 updateCdnStatistics:(id)arg2 isInitialCdnSelection:(_Bool)arg3;
- (void)cdnSelector:(id)arg1 didSelectCdn:(unsigned int)arg2 forDownloadableId:(id)arg3;
- (id)areLicenseLimitationsWorthWarningAbout:(id)arg1;
- (void)tellBladeRunnerDownloadIsStarting;
- (void)tellBladeRunnerLicenseIsActive:(CDUnknownBlockType)arg1;
- (void)retryErroredTasks;
- (void)getFpsCkcWithSpcData:(id)arg1 forAssetId:(id)arg2 forLoadingRequest:(id)arg3;
- (void)handlePrematureDelegateCall:(id)arg1;
- (void)addRecoveredUrlTask:(id)arg1;
- (void)stopTryingToWork;
- (_Bool)alreadyKnowsAboutTask:(id)arg1;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)dispatchSyncIfPossible:(CDUnknownBlockType)arg1;
- (void)handleCompletionForTask:(id)arg1 error:(id)arg2;
- (void)removeDownloadedContent;
- (id)verifyCompletedTracksAreActuallyOnDisk;
- (void)fireCompleteEvents:(id)arg1;
- (_Bool)sendLoggingSessionEvent:(unsigned long long)arg1 withPayload:(id)arg2;
- (void)logDownloadError:(id)arg1;
- (void)handleLicenseRefreshCompleted:(id)arg1;
- (void)handleLicenseRefreshError:(id)arg1;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
- (void)startWaywardTasks;
- (void)licenseReceivedWithLicense:(id)arg1 andError:(id)arg2 forLoadingRequest:(id)arg3;
- (void)widevineServerCertReceived:(id)arg1 andError:(id)arg2;
- (void)licenseReceivedWithLicense:(id)arg1 stateData:(id)arg2 forLoadingRequest:(id)arg3 andError:(id)arg4;
- (unsigned short)proxyServerPort;
- (void)manifestIsReady;
- (id)playbackRequest;
- (_Bool)hasStartedPlayDelayCounting;
- (void)movieOpenedWithMovieDetails:(id)arg1 andError:(id)arg2;
- (id)errorWithRetryFlagForError:(id)arg1;
- (id)inititalBandwidthCapReporterDelegate;
- (id)platformLogblobSink;
- (id)contentHeaderCache;
- (id)manifestFetchDelegate;
- (id)playbackDeviceDetails;
- (_Bool)isWiFiOrEthernet;
- (_Bool)isExternalPlaybackSuspected;
- (void)licenseReceived:(id)arg1 andError:(id)arg2 forLoadingRequest:(id)arg3;
- (void)movieOpened:(id)arg1;
- (void)buildTracksForImageBasedSubtitles:(id)arg1;
- (double)downloadedPercentage;
- (double)downloadedPendingPercentage;
- (int)currentTrackIndex;
- (id)currentTrack;
- (id)getTrackWithLogicalName:(id)arg1;
- (id)updateExpectedSize:(unsigned long long)arg1 forLogicalName:(id)arg2 tracks:(id)arg3;
- (id)markTrackWithLogicalNameDone:(id)arg1 tracks:(id)arg2;
- (id)updatePercentForTrackWithLogicalName:(id)arg1 percent:(double)arg2 tracks:(id)arg3;
- (id)markCurrentTrackDone:(id)arg1;
- (id)normalizeTracks:(id)arg1;
- (void)persistAudioAndSubtitlesForPlayback:(id *)arg1;
- (id)errorForRecoveryFrom:(id)arg1;
- (_Bool)doesEverythingSeemInOrder;
- (void)suspend;
- (void)resume;
- (void)cancel;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (void)updateDownloadProgress;
- (void)onDownloadCompleted;
- (void)updateGlobaDebugState:(id)arg1;
- (void)updateInternalDebugState:(id)arg1;
- (id)playlistForPlaylistKey:(id)arg1;
- (void)doNextStep;
- (void)updateDownloadProgressBasedOnTrackProgress:(double)arg1;
- (void)openMovieForDownload:(long long)arg1 withQuality:(id)arg2;
@property(readonly, nonatomic, getter=stateStore) __weak APIStateStore *stateStore; // @synthesize stateStore=_stateStore;
- (long long)state;
- (void)handleDownloadTask:(id)arg1 error:(id)arg2;
- (void)updateLastTimeSomethingHappened;
- (void)initiateDownloadForQuality:(id)arg1 trackingInfo:(id)arg2;
- (void)setPendingTracks:(id)arg1 withTrackingInfo:(id)arg2;
- (void)setupLoggingSession;
- (void)dealloc;
- (id)initWithEpisodeInfo:(id)arg1 andManager:(id)arg2 andTask:(id)arg3;
- (void)recoverDownloaderFromBackground;
- (void)processURLs;
- (void)createOfflineDownloadMediaController;
- (void)refreshLicense:(_Bool)arg1;
- (id)initWithEpisodeInfo:(id)arg1 andManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

