//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class DownloadInfo, LicenseInfo, NSArray, NSData, NSDate, NSDictionary, NSError, NSNumber, NSString, NflxMovieDetails, OfflineMetadataManager, OfflinePlayback;
@protocol NfOfflineContentManagerInternal, NfOfflineDownloader;

@interface WatchableInfo : NSObject
{
    NSError *_lastError;
    NSError *_lastErrorThatMatchesStorage;
    NSString *_watchableId;
    id <NfOfflineContentManagerInternal> _contentManager;
    id <NfOfflineDownloader> _offlineDownloader;
    OfflinePlayback *_offlinePlayback;
    NSString *_downloadTransactionId;
    OfflineMetadataManager *_metadataManager;
    NSArray *_cachedPendingTracks;
    NSObject *_licenseInfoLock;
    LicenseInfo *_licenseInfo;
}

- (void).cxx_destruct;
@property(retain, nonatomic) LicenseInfo *licenseInfo; // @synthesize licenseInfo=_licenseInfo;
@property(retain, nonatomic) NSObject *licenseInfoLock; // @synthesize licenseInfoLock=_licenseInfoLock;
@property(retain, nonatomic) NSArray *cachedPendingTracks; // @synthesize cachedPendingTracks=_cachedPendingTracks;
@property(nonatomic) __weak OfflineMetadataManager *metadataManager; // @synthesize metadataManager=_metadataManager;
@property(readonly, nonatomic) NSString *downloadTransactionId; // @synthesize downloadTransactionId=_downloadTransactionId;
@property(retain, nonatomic) OfflinePlayback *offlinePlayback; // @synthesize offlinePlayback=_offlinePlayback;
@property(retain, nonatomic) id <NfOfflineDownloader> offlineDownloader; // @synthesize offlineDownloader=_offlineDownloader;
@property(nonatomic) __weak id <NfOfflineContentManagerInternal> contentManager; // @synthesize contentManager=_contentManager;
@property(readonly, nonatomic) NSString *watchableId; // @synthesize watchableId=_watchableId;
@property(readonly, nonatomic) NSError *lastErrorThatMatchesStorage; // @synthesize lastErrorThatMatchesStorage=_lastErrorThatMatchesStorage;
@property(readonly, nonatomic) NSError *lastError; // @synthesize lastError=_lastError;
- (void)startPlayWindowIfNeeded;
- (void)refreshPlayWindow;
- (void)setBackingLicenseData:(id)arg1 error:(id *)arg2;
- (void)queueDeactivateEvent;
- (void)setLastAutoRefreshAttempt:(id)arg1;
@property(readonly) NSDate *lastAutoRefreshAttempt;
@property(readonly) _Bool shouldUseSecureInvalidationOfLicense;
- (void)setShouldUseSecureInvalidationOfLicense:(_Bool)arg1;
@property(readonly, nonatomic) NSDictionary *backingLicenseData;
@property(readonly, nonatomic) DownloadInfo *downloadInfo;
- (void)removeFromLocalStorage:(_Bool)arg1;
- (void)removeFilesAtDownloadPath;
- (void)createOfflinePlayback:(id)arg1 fetchOptions:(unsigned long long)arg2;
- (void)createOfflinePlayback:(id)arg1;
- (_Bool)isAVAggregrateDownload;
- (void)createOfflineDownloader;
- (void)createOfflineDownloaderFromBackgroundTask:(id)arg1;
- (void)setAudioTracks:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *audioTracks;
- (void)setSubtitleTracks:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *subtitleTracks;
- (long long)calculatedTotalSizeForPlaylistKey:(id)arg1;
- (long long)webvttCalculatedTotalSize;
- (long long)videoCalculatedTotalSize;
- (long long)audioCalculatedTotalSize;
- (long long)calculatedTotalSizeForPlaylistKeyPrefix:(id)arg1;
- (long long)playlistCalculatedTotalSize;
- (void)setShouldFireTardyDownloadComplete:(id)arg1;
@property(readonly, nonatomic) NSNumber *shouldFireTardyDownloadComplete;
- (void)setDidFireDownloadComplete:(id)arg1;
@property(readonly, nonatomic) NSNumber *didFireDownloadComplete;
- (void)setAutoRefreshAttempts:(id)arg1;
@property(readonly, nonatomic) NSNumber *autoRefreshAttempts;
- (id)loadLastError:(id *)arg1;
- (void)setLastError:(id)arg1 error:(id *)arg2;
- (void)removeDataForLogicalName:(id)arg1;
- (_Bool)hasDataForLogicalName:(id)arg1;
- (id)dataForLogicalName:(id)arg1 error:(id *)arg2;
- (void)setData:(id)arg1 forLogicalName:(id)arg2 error:(id *)arg3;
- (void)setLogicalName:(id)arg1 fromPath:(id)arg2 error:(id *)arg3;
- (unsigned long long)dataSizeForLogicalName:(id)arg1;
- (id)pathForLogicalName:(id)arg1;
- (void)setInfo:(id)arg1 withName:(id)arg2 error:(id *)arg3;
- (id)infoWithName:(id)arg1 error:(id *)arg2;
- (void)setLoggingDetails:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSDictionary *loggingDetails;
- (void)setMovieDetails:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NflxMovieDetails *movieDetails;
- (void)setBackingDownloadData:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSDictionary *backingDownloadData;
- (void)setPendingTracks:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *pendingTracks;
- (void)addPlaylist:(id)arg1 forTrack:(id)arg2 error:(id *)arg3;
- (id)playlistFor:(id)arg1;
@property(readonly, nonatomic) NSData *persistentBundle;
- (void)setPersistentBundle:(id)arg1 error:(id *)arg2;
- (id)sizeOfAsset;
- (void)setDebugState:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *debugState;
- (void)setDownloadSuspended:(_Bool)arg1 error:(id *)arg2;
@property(readonly, nonatomic) _Bool downloadSuspended;
- (void)setDownloadPath:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSString *downloadPath;
- (void)setApiStateLinksKey:(id)arg1 error:(id *)arg2;
@property(readonly) NSString *apiStateLinksKey;
- (void)setDownloadProgress:(double)arg1 error:(id *)arg2;
@property(readonly, nonatomic) double downloadProgress;
- (id)initWithWatchableId:(id)arg1 metadataManager:(id)arg2 contentManager:(id)arg3;

@end

