//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <ChromeInternal/ASControlNode.h>

@class ASTextNode, ASWeakMapEntry, CADisplayLink, NSRunLoop, NSString, NSThread, UIColor, UIImage;
@protocol ASAnimatedImageProtocol;

@interface ASImageNode : ASControlNode
{
    unsigned long long _animationState;
    // Error parsing type: {Mutex="_type"i""(?="_unfair"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"_runfair"{?="_lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"_thread"A^{_opaque_pthread_t}"_count"i}"_plain"{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}"_recursive"{recursive_mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}})}, name: _displayLinkLock
    id <ASAnimatedImageProtocol> _animatedImage;
    NSString *_animatedImageRunLoopMode;
    CADisplayLink *_displayLink;
    NSThread *_displayLinkThread;
    NSRunLoop *_displayLinkRunloop;
    unsigned long long _lastSuccessfulFrameIndex;
    double _playHead;
    unsigned long long _playedLoops;
    struct {
        unsigned int animatedImagePaused:1;
        unsigned int cropEnabled:1;
        unsigned int forceUpscaling:1;
    } _imageNodeFlags;
    UIImage *_image;
    ASWeakMapEntry *_weakCacheEntry;
    UIColor *_placeholderColor;
    CDUnknownBlockType _displayCompletionBlock;
    ASTextNode *_debugLabelNode;
    struct CGSize _forcedSize;
    struct CGRect _cropRect;
    struct CGRect _cropDisplayBounds;
    _Bool _flipsForRightToLeftLayoutDirection;
    _Bool _imageFlippedForRightToLeftLayoutDirection;
    CDUnknownBlockType _imageModificationBlock;
    double _lastDisplayLinkFire;
}

+ (id)createContentsForkey:(id)arg1 drawParameters:(id)arg2 isCancelled:(CDUnknownBlockType)arg3;
+ (id)contentsForkey:(id)arg1 drawParameters:(id)arg2 isCancelled:(CDUnknownBlockType)arg3;
+ (id)displayWithParameters:(id)arg1 isCancelled:(CDUnknownBlockType)arg2;
+ (_Bool)shouldShowImageScalingOverlay;
+ (void)setShouldShowImageScalingOverlay:(_Bool)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) double lastDisplayLinkFire; // @synthesize lastDisplayLinkFire=_lastDisplayLinkFire;
- (id)debugLabelAttributes;
- (void)layout;
- (void)animatedImageDidEnterState:(unsigned long long)arg1 fromState:(unsigned long long)arg2;
@property(copy) CDUnknownBlockType imageModificationBlock; // @synthesize imageModificationBlock=_imageModificationBlock;
@property struct CGSize forcedSize;
@property _Bool forceUpscaling;
@property struct CGRect cropRect;
- (void)setCropEnabled:(_Bool)arg1 recropImmediately:(_Bool)arg2 inBounds:(struct CGRect)arg3;
@property(getter=isCropEnabled) _Bool cropEnabled;
- (void)clearContents;
- (void)setNeedsDisplayWithCompletion:(CDUnknownBlockType)arg1;
- (void)displayDidFinish;
- (id)drawParametersForAsyncLayer:(id)arg1;
@property _Bool flipsForRightToLeftLayoutDirection;
@property(copy) UIColor *placeholderColor;
@property(retain) UIImage *image; // @synthesize image=_image;
- (void)_locked_setImage:(id)arg1;
- (void)_locked_setFlipsForRightToLeftLayoutDirection:(_Bool)arg1;
- (struct CGSize)calculateSizeThatFits:(struct CGSize)arg1;
- (id)placeholderImage;
- (void)dealloc;
- (id)init;
- (void)elm_applyImageProcessor:(id)arg1;
- (unsigned long long)frameIndexAtPlayHeadPosition:(double)arg1;
- (void)displayLinkFired:(id)arg1;
- (void)didExitDisplayState;
- (void)didExitVisibleState;
- (void)didEnterVisibleState;
- (void)_locked_stopAnimating;
- (void)stopAnimating;
- (void)animatedImageTransitionToState:(unsigned long long)arg1;
- (void)threadHandler:(id)arg1;
- (void)_locked_startAnimating;
- (void)startAnimating;
- (void)_locked_setShouldAnimate:(_Bool)arg1;
- (void)setShouldAnimate:(_Bool)arg1;
@property(copy) NSString *animatedImageRunLoopMode;
- (void)_locked_setCoverImage:(id)arg1;
- (void)setCoverImage:(id)arg1;
- (void)_locked_setCoverImageCompleted:(id)arg1;
- (void)setCoverImageCompleted:(id)arg1;
@property _Bool animatedImagePaused;
@property(retain) id <ASAnimatedImageProtocol> animatedImage;
- (void)animatedImageSet:(id)arg1 previousAnimatedImage:(id)arg2;
- (void)_locked_setAnimatedImage:(id)arg1;
- (void)invalidateAnimatedImage;

@end

