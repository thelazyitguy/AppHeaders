//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "NSObject-Protocol.h"

@class NSArray, NSURL, SPTCollectionPlatformFetchOptions;
@protocol SPTCollectionPlatformDataLoaderRequestToken;

@protocol SPTCollectionPlatformDataLoader <NSObject>
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeBansWithWithOptions:(SPTCollectionPlatformFetchOptions *)arg1 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *, SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg2 onError:(void (^)(NSError *))arg3;
- (void)fetchBansWithOptions:(SPTCollectionPlatformFetchOptions *)arg1 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *, SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg2 onError:(void (^)(NSError *))arg3;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeYourEpisodesWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg3 onError:(void (^)(NSError *))arg4;
- (void)fetchYourEpisodesWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 replyOnMainThread:(_Bool)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribePodcastsMetadataWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg3 onError:(void (^)(NSError *))arg4;
- (void)fetchPodcastsMetadataWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 replyOnMainThread:(_Bool)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeAllTracksMetadataWithOptions:(SPTCollectionPlatformFetchOptions *)arg1 onCompletion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg2 onError:(void (^)(NSError *))arg3;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeAllTracksWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg3 onError:(void (^)(NSError *))arg4;
- (void)fetchAllTracksWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 replyOnMainThread:(_Bool)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeArtistTracksForArtistURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 options:(SPTCollectionPlatformFetchOptions *)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (void)fetchArtistViewForArtistURL:(NSURL *)arg1 withMetadataProtocols:(NSArray *)arg2 andTracksProtocols:(NSArray *)arg3 options:(SPTCollectionPlatformFetchOptions *)arg4 replyOnMainThread:(_Bool)arg5 completion:(void (^)(id <SPTCollectionPlatformArtistMetadataFields>, SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg6 onError:(void (^)(NSError *))arg7;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeArtistViewForArtistURL:(NSURL *)arg1 withMetadataProtocols:(NSArray *)arg2 andTracksProtocols:(NSArray *)arg3 options:(SPTCollectionPlatformFetchOptions *)arg4 completion:(void (^)(id <SPTCollectionPlatformDataLoaderField>, SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg5 onError:(void (^)(NSError *))arg6;
- (void)fetchArtistTracksForArtistURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 options:(SPTCollectionPlatformFetchOptions *)arg3 replyOnMainThread:(_Bool)arg4 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg5 onError:(void (^)(NSError *))arg6;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeArtistsMetadataWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg3 onError:(void (^)(NSError *))arg4;
- (void)fetchArtistsMetadataWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 replyOnMainThread:(_Bool)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeAlbumTracksForAlbumURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 options:(SPTCollectionPlatformFetchOptions *)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (void)fetchAlbumTracksForAlbumURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 options:(SPTCollectionPlatformFetchOptions *)arg3 replyOnMainThread:(_Bool)arg4 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg5 onError:(void (^)(NSError *))arg6;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeAlbumViewForAlbumURL:(NSURL *)arg1 withMetadataProtocols:(NSArray *)arg2 andTracksProtocols:(NSArray *)arg3 options:(SPTCollectionPlatformFetchOptions *)arg4 completion:(void (^)(id <SPTCollectionPlatformDataLoaderField>, SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg5 onError:(void (^)(NSError *))arg6;
- (void)fetchAlbumViewForAlbumURL:(NSURL *)arg1 withMetadataProtocols:(NSArray *)arg2 andTracksProtocols:(NSArray *)arg3 options:(SPTCollectionPlatformFetchOptions *)arg4 replyOnMainThread:(_Bool)arg5 completion:(void (^)(id <SPTCollectionPlatformAlbumMetadataFields>, SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg6 onError:(void (^)(NSError *))arg7;
- (id <SPTCollectionPlatformDataLoaderRequestToken>)subscribeAlbumsMetadataWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg3 onError:(void (^)(NSError *))arg4;
- (void)fetchAlbumsMetadataWithPolicyProtocols:(NSArray *)arg1 options:(SPTCollectionPlatformFetchOptions *)arg2 replyOnMainThread:(_Bool)arg3 completion:(void (^)(SPTCollectionPlatformDataLoaderResponse<SPTCollectionPlatformDataLoaderField> *))arg4 onError:(void (^)(NSError *))arg5;
- (void)decorateAlbumsURLs:(NSArray *)arg1 withPolicyProtocols:(NSArray *)arg2 completion:(void (^)(NSArray *))arg3 onError:(void (^)(NSError *))arg4;
- (void)decorateAlbumURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 completion:(void (^)(id <SPTCollectionPlatformAlbumMetadataFields>))arg3 onError:(void (^)(NSError *))arg4;
- (void)decorateArtistURLs:(NSArray *)arg1 withPolicyProtocols:(NSArray *)arg2 completion:(void (^)(NSArray *))arg3 onError:(void (^)(NSError *))arg4;
- (void)decorateArtistURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 completion:(void (^)(id <SPTCollectionPlatformArtistMetadataFields>))arg3 onError:(void (^)(NSError *))arg4;
- (void)decorateTrackURLs:(NSArray *)arg1 withPolicyProtocols:(NSArray *)arg2 completion:(void (^)(NSArray *))arg3 onError:(void (^)(NSError *))arg4;
- (void)decorateTrackURL:(NSURL *)arg1 withPolicyProtocols:(NSArray *)arg2 completion:(void (^)(id <SPTCollectionPlatformTrackFields>))arg3 onError:(void (^)(NSError *))arg4;
@end

