//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class EAGLContext;
@protocol MTLCommandQueue, MTLDevice;

@interface DrishtiGraphGPUData : NSObject
{
    // Error parsing type: ^{GpuBufferMultiPool={Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{unordered_map<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry, drishti::GpuBufferMultiPool::BufferSpecHash, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, std::__1::allocator<std::__1::pair<const drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry> > >={__hash_table<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::__unordered_map_hasher<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, drishti::GpuBufferMultiPool::BufferSpecHash, true>, std::__1::__unordered_map_equal<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, true>, std::__1::allocator<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, drishti::GpuBufferMultiPool::BufferSpecHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, true> >=f}}}{EntryList=^{Entry}^{Entry}Q}i{vector<CFHolder<__CVOpenGLESTextureCache *>, std::__1::allocator<CFHolder<__CVOpenGLESTextureCache *> > >=^{CFHolder<__CVOpenGLESTextureCache *>}^{CFHolder<__CVOpenGLESTextureCache *>}{__compressed_pair<CFHolder<__CVOpenGLESTextureCache *> *, std::__1::allocator<CFHolder<__CVOpenGLESTextureCache *> > >=^{CFHolder<__CVOpenGLESTextureCache *>}}}}, name: _gpuBufferPool
    // Error parsing type: ^{GlContext={weak_ptr<drishti::GlContext>=^{GlContext}^{__shared_weak_count}}@{CFHolder<__CVOpenGLESTextureCache *>=^{__CVOpenGLESTextureCache}}{unique_ptr<drishti::GlContext::DedicatedThread, std::__1::default_delete<drishti::GlContext::DedicatedThread> >={__compressed_pair<drishti::GlContext::DedicatedThread *, std::__1::default_delete<drishti::GlContext::DedicatedThread> >=^{DedicatedThread}}}ii{set<absl::string_view, std::__1::less<absl::string_view>, std::__1::allocator<absl::string_view> >={__tree<absl::string_view, std::__1::less<absl::string_view>, std::__1::allocator<absl::string_view> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<absl::string_view, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<absl::string_view> >=Q}}}{atomic<long long>={__cxx_atomic_impl<long long, std::__1::__cxx_atomic_base_impl<long long> >=Aq}}{atomic<long long>={__cxx_atomic_impl<long long, std::__1::__cxx_atomic_base_impl<long long> >=Aq}}^{GlContext}{Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{CondVar={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{unique_ptr<mediapipe::GlProfilingHelper, std::__1::default_delete<mediapipe::GlProfilingHelper> >={__compressed_pair<mediapipe::GlProfilingHelper *, std::__1::default_delete<mediapipe::GlProfilingHelper> >=^{GlProfilingHelper}}}}, name: _glContext
    struct __CVOpenGLESTextureCache *_textureCache;
    id <MTLDevice> _mtlDevice;
    id <MTLCommandQueue> _mtlCommandQueue;
    struct __CVMetalTextureCache *_mtlTextureCache;
}

- (void).cxx_destruct;
@property(readonly) struct __CVMetalTextureCache *mtlTextureCache; // @synthesize mtlTextureCache=_mtlTextureCache;
@property(readonly) id <MTLCommandQueue> mtlCommandQueue; // @synthesize mtlCommandQueue=_mtlCommandQueue;
@property(readonly) id <MTLDevice> mtlDevice; // @synthesize mtlDevice=_mtlDevice;
// Error parsing type for property gpuBufferPool:
// Property attributes: T^{GpuBufferMultiPool={Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{unordered_map<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry, drishti::GpuBufferMultiPool::BufferSpecHash, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, std::__1::allocator<std::__1::pair<const drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry> > >={__hash_table<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::__unordered_map_hasher<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, drishti::GpuBufferMultiPool::BufferSpecHash, true>, std::__1::__unordered_map_equal<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, true>, std::__1::allocator<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, drishti::GpuBufferMultiPool::BufferSpecHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, true> >=f}}}{EntryList=^{Entry}^{Entry}Q}i{vector<CFHolder<__CVOpenGLESTextureCache *>, std::__1::allocator<CFHolder<__CVOpenGLESTextureCache *> > >=^{CFHolder<__CVOpenGLESTextureCache *>}^{CFHolder<__CVOpenGLESTextureCache *>}{__compressed_pair<CFHolder<__CVOpenGLESTextureCache *> *, std::__1::allocator<CFHolder<__CVOpenGLESTextureCache *> > >=^{CFHolder<__CVOpenGLESTextureCache *>}}}},R

@property(readonly) struct __CVOpenGLESTextureCache *textureCache; // @synthesize textureCache=_textureCache;
@property(readonly) EAGLContext *glContext;
- (void)dealloc;
-     // Error parsing type: @32@0:8^{GlContext={weak_ptr<drishti::GlContext>=^{GlContext}^{__shared_weak_count}}@{CFHolder<__CVOpenGLESTextureCache *>=^{__CVOpenGLESTextureCache}}{unique_ptr<drishti::GlContext::DedicatedThread, std::__1::default_delete<drishti::GlContext::DedicatedThread> >={__compressed_pair<drishti::GlContext::DedicatedThread *, std::__1::default_delete<drishti::GlContext::DedicatedThread> >=^{DedicatedThread}}}ii{set<absl::string_view, std::__1::less<absl::string_view>, std::__1::allocator<absl::string_view> >={__tree<absl::string_view, std::__1::less<absl::string_view>, std::__1::allocator<absl::string_view> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<absl::string_view, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<absl::string_view> >=Q}}}{atomic<long long>={__cxx_atomic_impl<long long, std::__1::__cxx_atomic_base_impl<long long> >=Aq}}{atomic<long long>={__cxx_atomic_impl<long long, std::__1::__cxx_atomic_base_impl<long long> >=Aq}}^{GlContext}{Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{CondVar={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{unique_ptr<mediapipe::GlProfilingHelper, std::__1::default_delete<mediapipe::GlProfilingHelper> >={__compressed_pair<mediapipe::GlProfilingHelper *, std::__1::default_delete<mediapipe::GlProfilingHelper> >=^{GlProfilingHelper}}}}16^{GpuBufferMultiPool={Mutex={atomic<long>={__cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> >=Aq}}}{unordered_map<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry, drishti::GpuBufferMultiPool::BufferSpecHash, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, std::__1::allocator<std::__1::pair<const drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry> > >={__hash_table<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::__unordered_map_hasher<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, drishti::GpuBufferMultiPool::BufferSpecHash, true>, std::__1::__unordered_map_equal<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, true>, std::__1::allocator<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, drishti::GpuBufferMultiPool::BufferSpecHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<drishti::GpuBufferMultiPool::BufferSpec, std::__1::__hash_value_type<drishti::GpuBufferMultiPool::BufferSpec, drishti::GpuBufferMultiPool::Entry>, std::__1::equal_to<drishti::GpuBufferMultiPool::BufferSpec>, true> >=f}}}{EntryList=^{Entry}^{Entry}Q}i{vector<CFHolder<__CVOpenGLESTextureCache *>, std::__1::allocator<CFHolder<__CVOpenGLESTextureCache *> > >=^{CFHolder<__CVOpenGLESTextureCache *>}^{CFHolder<__CVOpenGLESTextureCache *>}{__compressed_pair<CFHolder<__CVOpenGLESTextureCache *> *, std::__1::allocator<CFHolder<__CVOpenGLESTextureCache *> > >=^{CFHolder<__CVOpenGLESTextureCache *>}}}}24, name: initWithContext:multiPool:

@end

