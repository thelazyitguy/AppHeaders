//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSNumber.h>

#import "JavaLangComparable-Protocol.h"

@class JavaMathBigInteger, NSString;

@interface JavaMathBigDecimal : NSNumber <JavaLangComparable>
{
    JavaMathBigInteger *intVal_;
    int scale__;
    int precision_;
    NSString *stringCache_;
    long long intCompact_;
}

+ (void)initialize;
+ (const struct J2ObjcClassInfo *)__metadata;
+ (id)divideWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4 withInt:(int)arg5 withInt:(int)arg6;
+ (id)divideWithLong:(long long)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4 withInt:(int)arg5 withInt:(int)arg6;
+ (id)divideWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4 withInt:(int)arg5 withInt:(int)arg6;
+ (id)divideWithLong:(long long)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4 withInt:(int)arg5 withInt:(int)arg6;
+ (_Bool)longLongCompareMagnitudeWithLong:(long long)arg1 withLong:(long long)arg2 withLong:(long long)arg3 withLong:(long long)arg4;
+ (int)precisionWithLong:(long long)arg1 withLong:(long long)arg2;
+ (id)doRound128WithLong:(long long)arg1 withLong:(long long)arg2 withInt:(int)arg3 withInt:(int)arg4 withJavaMathMathContext:(id)arg5;
+ (id)multiplyAndRoundWithJavaMathBigInteger:(id)arg1 withJavaMathBigInteger:(id)arg2 withInt:(int)arg3 withJavaMathMathContext:(id)arg4;
+ (id)multiplyAndRoundWithLong:(long long)arg1 withJavaMathBigInteger:(id)arg2 withInt:(int)arg3 withJavaMathMathContext:(id)arg4;
+ (id)multiplyAndRoundWithLong:(long long)arg1 withLong:(long long)arg2 withInt:(int)arg3 withJavaMathMathContext:(id)arg4;
+ (id)multiplyWithJavaMathBigInteger:(id)arg1 withJavaMathBigInteger:(id)arg2 withInt:(int)arg3;
+ (id)multiplyWithLong:(long long)arg1 withJavaMathBigInteger:(id)arg2 withInt:(int)arg3;
+ (id)multiplyWithLong:(long long)arg1 withLong:(long long)arg2 withInt:(int)arg3;
+ (long long)multiplyWithLong:(long long)arg1 withLong:(long long)arg2;
+ (int)compareMagnitudeNormalizedWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4;
+ (int)compareMagnitudeNormalizedWithLong:(long long)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4;
+ (int)compareMagnitudeNormalizedWithLong:(long long)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4;
+ (_Bool)unsignedLongCompareEqWithLong:(long long)arg1 withLong:(long long)arg2;
+ (_Bool)unsignedLongCompareWithLong:(long long)arg1 withLong:(long long)arg2;
+ (long long)mulsubWithLong:(long long)arg1 withLong:(long long)arg2 withLong:(long long)arg3 withLong:(long long)arg4 withLong:(long long)arg5;
+ (long long)make64WithLong:(long long)arg1 withLong:(long long)arg2;
+ (long long)divWordWithLong:(long long)arg1 withLong:(long long)arg2;
+ (id)scaledTenPowWithInt:(int)arg1 withInt:(int)arg2 withInt:(int)arg3;
+ (id)roundedTenPowerWithInt:(int)arg1 withInt:(int)arg2 withInt:(int)arg3 withInt:(int)arg4;
+ (id)divideAndRound128WithLong:(long long)arg1 withLong:(long long)arg2 withLong:(long long)arg3 withInt:(int)arg4 withInt:(int)arg5 withInt:(int)arg6 withInt:(int)arg7;
+ (id)multiplyDivideAndRoundWithLong:(long long)arg1 withLong:(long long)arg2 withLong:(long long)arg3 withInt:(int)arg4 withInt:(int)arg5 withInt:(int)arg6;
+ (id)divideWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4 withLong:(long long)arg5 withJavaMathMathContext:(id)arg6;
+ (id)divideWithLong:(long long)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4 withLong:(long long)arg5 withJavaMathMathContext:(id)arg6;
+ (id)divideWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4 withLong:(long long)arg5 withJavaMathMathContext:(id)arg6;
+ (id)divideWithLong:(long long)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4 withLong:(long long)arg5 withJavaMathMathContext:(id)arg6;
+ (id)divideSmallFastPathWithLong:(long long)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4 withLong:(long long)arg5 withJavaMathMathContext:(id)arg6;
+ (id)bigMultiplyPowerTenWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2;
+ (id)bigMultiplyPowerTenWithLong:(long long)arg1 withInt:(int)arg2;
+ (id)addWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4;
+ (id)addWithLong:(long long)arg1 withInt:(int)arg2 withJavaMathBigInteger:(id)arg3 withInt:(int)arg4;
+ (id)addWithLong:(long long)arg1 withInt:(int)arg2 withLong:(long long)arg3 withInt:(int)arg4;
+ (id)addWithLong:(long long)arg1 withLong:(long long)arg2 withInt:(int)arg3;
+ (long long)addWithLong:(long long)arg1 withLong:(long long)arg2;
+ (id)stripZerosToMatchScaleWithJavaMathBigInteger:(id)arg1 withLong:(long long)arg2 withInt:(int)arg3 withInt:(int)arg4;
+ (id)createAndStripZerosToMatchScaleWithLong:(long long)arg1 withInt:(int)arg2 withLong:(long long)arg3;
+ (id)createAndStripZerosToMatchScaleWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withLong:(long long)arg3;
+ (_Bool)needIncrementWithJavaMathMutableBigInteger:(id)arg1 withInt:(int)arg2 withInt:(int)arg3 withJavaMathMutableBigInteger:(id)arg4 withJavaMathMutableBigInteger:(id)arg5;
+ (id)divideAndRoundWithJavaMathBigInteger:(id)arg1 withJavaMathBigInteger:(id)arg2 withInt:(int)arg3 withInt:(int)arg4 withInt:(int)arg5;
+ (id)divideAndRoundWithJavaMathBigInteger:(id)arg1 withJavaMathBigInteger:(id)arg2 withInt:(int)arg3;
+ (_Bool)needIncrementWithLong:(long long)arg1 withInt:(int)arg2 withInt:(int)arg3 withJavaMathMutableBigInteger:(id)arg4 withLong:(long long)arg5;
+ (id)divideAndRoundWithJavaMathBigInteger:(id)arg1 withLong:(long long)arg2 withInt:(int)arg3 withInt:(int)arg4 withInt:(int)arg5;
+ (id)divideAndRoundWithJavaMathBigInteger:(id)arg1 withLong:(long long)arg2 withInt:(int)arg3;
+ (_Bool)needIncrementWithLong:(long long)arg1 withInt:(int)arg2 withInt:(int)arg3 withLong:(long long)arg4 withLong:(long long)arg5;
+ (_Bool)commonNeedIncrementWithInt:(int)arg1 withInt:(int)arg2 withInt:(int)arg3 withBoolean:(_Bool)arg4;
+ (long long)divideAndRoundWithLong:(long long)arg1 withLong:(long long)arg2 withInt:(int)arg3;
+ (id)divideAndRoundWithLong:(long long)arg1 withLong:(long long)arg2 withInt:(int)arg3 withInt:(int)arg4 withInt:(int)arg5;
+ (id)divideAndRoundByTenPowWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withInt:(int)arg3;
+ (id)doRoundWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withJavaMathMathContext:(id)arg3;
+ (id)doRoundWithLong:(long long)arg1 withInt:(int)arg2 withJavaMathMathContext:(id)arg3;
+ (id)doRoundWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
+ (int)checkScaleWithJavaMathBigInteger:(id)arg1 withLong:(long long)arg2;
+ (int)checkScaleWithLong:(long long)arg1 withLong:(long long)arg2;
+ (int)checkScaleNonZeroWithLong:(long long)arg1;
+ (void)printWithNSString:(id)arg1 withJavaMathBigDecimal:(id)arg2;
+ (int)saturateLongWithLong:(long long)arg1;
+ (int)longCompareMagnitudeWithLong:(long long)arg1 withLong:(long long)arg2;
+ (long long)compactValForWithJavaMathBigInteger:(id)arg1;
+ (int)bigDigitLengthWithJavaMathBigInteger:(id)arg1;
+ (int)longDigitLengthWithLong:(long long)arg1;
+ (void)matchScaleWithJavaMathBigDecimalArray:(id)arg1;
+ (long long)longMultiplyPowerTenWithLong:(long long)arg1 withInt:(int)arg2;
+ (id)expandBigIntegerTenPowersWithInt:(int)arg1;
+ (id)bigTenToTheWithInt:(int)arg1;
+ (id)valueOfWithDouble:(double)arg1;
+ (id)zeroValueOfWithInt:(int)arg1;
+ (id)valueOfWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withInt:(int)arg3;
+ (id)valueOfWithLong:(long long)arg1 withInt:(int)arg2 withInt:(int)arg3;
+ (id)valueOfWithLong:(long long)arg1;
+ (id)valueOfWithLong:(long long)arg1 withInt:(int)arg2;
+ (long long)parseExpWithCharArray:(id)arg1 withInt:(int)arg2 withInt:(int)arg3;
- (void)dealloc;
- (id)audit;
- (int)checkScaleWithLong:(long long)arg1;
- (void)writeObjectWithJavaIoObjectOutputStream:(id)arg1;
- (void)readObjectWithJavaIoObjectInputStream:(id)arg1;
- (id)inflated;
- (id)bigMultiplyPowerTenWithInt:(int)arg1;
- (id)layoutCharsWithBoolean:(_Bool)arg1;
- (id)ulp;
- (double)doubleValue;
- (float)floatValue;
- (BOOL)byteValueExact;
- (short)shortValueExact;
- (int)intValueExact;
- (int)intValue;
- (long long)longValueExact;
- (long long)longLongValue;
- (id)toBigIntegerExact;
- (id)toBigInteger;
- (id)getValueStringWithInt:(int)arg1 withNSString:(id)arg2 withInt:(int)arg3;
- (id)toPlainString;
- (id)toEngineeringString;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
- (id)maxWithJavaMathBigDecimal:(id)arg1;
- (id)minWithJavaMathBigDecimal:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (int)compareMagnitudeWithJavaMathBigDecimal:(id)arg1;
- (int)compareToWithId:(id)arg1;
- (id)stripTrailingZeros;
- (id)scaleByPowerOfTenWithInt:(int)arg1;
- (id)movePointRightWithInt:(int)arg1;
- (id)movePointLeftWithInt:(int)arg1;
- (id)setScaleWithInt:(int)arg1;
- (id)setScaleWithInt:(int)arg1 withInt:(int)arg2;
- (id)setScaleWithInt:(int)arg1 withJavaMathRoundingMode:(id)arg2;
- (id)roundWithJavaMathMathContext:(id)arg1;
- (id)unscaledValue;
- (int)precision;
- (int)scale__;
- (int)signum;
- (id)plusWithJavaMathMathContext:(id)arg1;
- (id)plus;
- (id)negateWithJavaMathMathContext:(id)arg1;
- (id)negate;
- (id)absWithJavaMathMathContext:(id)arg1;
- (id)abs;
- (id)powWithInt:(int)arg1 withJavaMathMathContext:(id)arg2;
- (id)powWithInt:(int)arg1;
- (id)divideAndRemainderWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)divideAndRemainderWithJavaMathBigDecimal:(id)arg1;
- (id)remainderWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)remainderWithJavaMathBigDecimal:(id)arg1;
- (id)divideToIntegralValueWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)divideToIntegralValueWithJavaMathBigDecimal:(id)arg1;
- (id)divideWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)divideWithJavaMathBigDecimal:(id)arg1;
- (id)divideWithJavaMathBigDecimal:(id)arg1 withJavaMathRoundingMode:(id)arg2;
- (id)divideWithJavaMathBigDecimal:(id)arg1 withInt:(int)arg2;
- (id)divideWithJavaMathBigDecimal:(id)arg1 withInt:(int)arg2 withJavaMathRoundingMode:(id)arg3;
- (id)divideWithJavaMathBigDecimal:(id)arg1 withInt:(int)arg2 withInt:(int)arg3;
- (id)multiplyWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)multiplyWithJavaMathBigDecimal:(id)arg1;
- (id)subtractWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)subtractWithJavaMathBigDecimal:(id)arg1;
- (id)preAlignWithJavaMathBigDecimal:(id)arg1 withJavaMathBigDecimal:(id)arg2 withLong:(long long)arg3 withJavaMathMathContext:(id)arg4;
- (id)addWithJavaMathBigDecimal:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)addWithJavaMathBigDecimal:(id)arg1;
- (id)initWithLong:(long long)arg1 withJavaMathMathContext:(id)arg2;
- (id)initWithLong:(long long)arg1;
- (id)initWithInt:(int)arg1 withJavaMathMathContext:(id)arg2;
- (id)initWithInt:(int)arg1;
- (id)initWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2 withJavaMathMathContext:(id)arg3;
- (id)initWithJavaMathBigInteger:(id)arg1 withInt:(int)arg2;
- (id)initWithJavaMathBigInteger:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)initWithJavaMathBigInteger:(id)arg1;
- (id)initWithDouble:(double)arg1 withJavaMathMathContext:(id)arg2;
- (id)initWithDouble:(double)arg1;
- (id)initWithNSString:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)initWithNSString:(id)arg1;
- (id)initWithCharArray:(id)arg1 withJavaMathMathContext:(id)arg2;
- (id)initWithCharArray:(id)arg1;
- (int)adjustScaleWithInt:(int)arg1 withLong:(long long)arg2;
- (id)initWithCharArray:(id)arg1 withInt:(int)arg2 withInt:(int)arg3 withJavaMathMathContext:(id)arg4;
- (id)initWithCharArray:(id)arg1 withInt:(int)arg2 withInt:(int)arg3;
- (id)initWithJavaMathBigInteger:(id)arg1 withLong:(long long)arg2 withInt:(int)arg3 withInt:(int)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

