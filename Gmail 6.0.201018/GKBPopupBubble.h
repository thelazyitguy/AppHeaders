//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "GKBPopupAnimation-Protocol.h"

@class CAShapeLayer, UIBezierPath, UIColor;

@interface GKBPopupBubble : UIView <GKBPopupAnimation>
{
    unsigned long long _popupViewPosition;
    UIView *_contentView;
    struct CGSize _contentSize;
    CAShapeLayer *_shapeLayer;
    CAShapeLayer *_upperLayer;
    CAShapeLayer *_maskLayer;
    UIBezierPath *_path;
    UIBezierPath *_upperPath;
    double _offsetX;
    UIView *_anchorView;
    UIView *_containerView;
    struct CGRect _anchorRect;
    struct CGRect _anchorRectInScreen;
    struct CGRect _containerRect;
    struct CGRect _containerRectInScreen;
    struct CGRect _contentRect;
    struct CGRect _contentRectInScreen;
    _Bool _masksToShape;
    double _animationDelay;
    double _animationDuration;
    long long _layoutDirection;
    double _leftRightPadding;
    double _topBottomPadding;
    double _offsetToAnchor;
    double _cornerRadius;
    double _extendedWingCornerRadius;
    UIColor *_backgroundColor;
    UIColor *_shadowColor;
    double _shadowRadius;
    UIColor *_upperShadowColor;
    double _upperShadowRadius;
    struct CGSize _shadowOffset;
    struct CGSize _upperShadowOffset;
    struct CGVector _popupViewOffset;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool masksToShape; // @synthesize masksToShape=_masksToShape;
@property(retain, nonatomic) UIView *contentView; // @synthesize contentView=_contentView;
@property(readonly, nonatomic) struct CGVector popupViewOffset; // @synthesize popupViewOffset=_popupViewOffset;
@property(nonatomic) double upperShadowRadius; // @synthesize upperShadowRadius=_upperShadowRadius;
@property(nonatomic) struct CGSize upperShadowOffset; // @synthesize upperShadowOffset=_upperShadowOffset;
@property(retain, nonatomic) UIColor *upperShadowColor; // @synthesize upperShadowColor=_upperShadowColor;
@property(nonatomic) double shadowRadius; // @synthesize shadowRadius=_shadowRadius;
@property(nonatomic) struct CGSize shadowOffset; // @synthesize shadowOffset=_shadowOffset;
@property(retain, nonatomic) UIColor *shadowColor; // @synthesize shadowColor=_shadowColor;
@property(retain, nonatomic) UIColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(nonatomic) double extendedWingCornerRadius; // @synthesize extendedWingCornerRadius=_extendedWingCornerRadius;
@property(nonatomic) double cornerRadius; // @synthesize cornerRadius=_cornerRadius;
@property(nonatomic) double offsetToAnchor; // @synthesize offsetToAnchor=_offsetToAnchor;
@property(nonatomic) double topBottomPadding; // @synthesize topBottomPadding=_topBottomPadding;
@property(nonatomic) double leftRightPadding; // @synthesize leftRightPadding=_leftRightPadding;
@property(readonly, nonatomic) long long layoutDirection; // @synthesize layoutDirection=_layoutDirection;
@property(readonly, nonatomic) double animationDuration; // @synthesize animationDuration=_animationDuration;
@property(readonly, nonatomic) double animationDelay; // @synthesize animationDelay=_animationDelay;
- (void)hidePopupAnimationWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) unsigned long long popupViewPosition;
- (void)addLineFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2 inPath:(id)arg3 withRadius:(double)arg4;
- (double)signedAreaForTriangleWithFirstPoint:(struct CGPoint)arg1 secondPoint:(struct CGPoint)arg2 thirdPoint:(struct CGPoint)arg3;
- (double)angleFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2;
- (double)distanceFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2;
- (_Bool)addCornerWithPreviousPoint:(struct CGPoint)arg1 currentPoint:(struct CGPoint)arg2 nextPoint:(struct CGPoint)arg3 radius:(double)arg4 toPath:(id)arg5;
- (void)didMoveToWindow;
- (void)setupLayer:(id)arg1 forUpperPart:(_Bool)arg2;
- (void)createShape;
- (_Bool)centerAlignContentToAnchor;
- (_Bool)rightAlignContentToAnchorIfPossible;
- (_Bool)leftAlignContentToAnchorIfPossible;
- (void)resolveLayout;
- (void)initializeWithContentView:(id)arg1 anchorView:(id)arg2 contentSize:(struct CGSize)arg3 offsetX:(double)arg4 preferredLayoutDirection:(long long)arg5;

@end

