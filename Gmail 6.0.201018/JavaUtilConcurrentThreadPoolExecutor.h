//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "JavaUtilConcurrentAbstractExecutorService.h"

@class JavaUtilConcurrentAtomicAtomicInteger, JavaUtilConcurrentLocksReentrantLock, JavaUtilHashSet;
@protocol JavaUtilConcurrentBlockingQueue, JavaUtilConcurrentLocksCondition;

@interface JavaUtilConcurrentThreadPoolExecutor : JavaUtilConcurrentAbstractExecutorService
{
    JavaUtilConcurrentAtomicAtomicInteger *ctl_;
    id <JavaUtilConcurrentBlockingQueue> workQueue_;
    JavaUtilConcurrentLocksReentrantLock *mainLock_;
    JavaUtilHashSet *workers_;
    id <JavaUtilConcurrentLocksCondition> termination_;
    int largestPoolSize_;
    long long completedTaskCount_;
    unsigned long long threadFactory_;
    unsigned long long handler_;
    // Error parsing type: Aq, name: keepAliveTime_
    // Error parsing type: AB, name: allowCoreThreadTimeOut_
    // Error parsing type: Ai, name: corePoolSize_
    // Error parsing type: Ai, name: maximumPoolSize_
}

+ (void)initialize;
+ (const struct J2ObjcClassInfo *)__metadata;
+ (_Bool)isRunningWithInt:(int)arg1;
+ (_Bool)runStateAtLeastWithInt:(int)arg1 withInt:(int)arg2;
+ (_Bool)runStateLessThanWithInt:(int)arg1 withInt:(int)arg2;
+ (int)ctlOfWithInt:(int)arg1 withInt:(int)arg2;
+ (int)workerCountOfWithInt:(int)arg1;
+ (int)runStateOfWithInt:(int)arg1;
- (void)dealloc;
- (void)__javaClone:(id)arg1;
- (void)terminated;
- (void)afterExecuteWithJavaLangRunnable:(id)arg1 withJavaLangThrowable:(id)arg2;
- (void)beforeExecuteWithJavaLangThread:(id)arg1 withJavaLangRunnable:(id)arg2;
- (id)description;
- (long long)getCompletedTaskCount;
- (long long)getTaskCount;
- (int)getLargestPoolSize;
- (int)getActiveCount;
- (int)getPoolSize;
- (void)purge;
- (_Bool)removeWithJavaLangRunnable:(id)arg1;
- (id)getQueue;
- (long long)getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:(id)arg1;
- (void)setKeepAliveTimeWithLong:(long long)arg1 withJavaUtilConcurrentTimeUnit:(id)arg2;
- (int)getMaximumPoolSize;
- (void)setMaximumPoolSizeWithInt:(int)arg1;
- (void)allowCoreThreadTimeOutWithBoolean:(_Bool)arg1;
- (_Bool)allowsCoreThreadTimeOut;
- (int)prestartAllCoreThreads;
- (void)ensurePrestart;
- (_Bool)prestartCoreThread;
- (int)getCorePoolSize;
- (void)setCorePoolSizeWithInt:(int)arg1;
- (id)getRejectedExecutionHandler;
- (void)setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id)arg1;
- (id)getThreadFactory;
- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id)arg1;
- (void)java_finalize;
- (_Bool)awaitTerminationWithLong:(long long)arg1 withJavaUtilConcurrentTimeUnit:(id)arg2;
- (_Bool)isTerminated;
- (_Bool)isTerminating;
- (_Bool)isShutdown;
- (id)shutdownNow;
- (void)shutdown;
- (void)executeWithJavaLangRunnable:(id)arg1;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnit:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5 withJavaUtilConcurrentThreadFactory:(id)arg6 withJavaUtilConcurrentRejectedExecutionHandler:(id)arg7;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnit:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5 withJavaUtilConcurrentRejectedExecutionHandler:(id)arg6;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnit:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5 withJavaUtilConcurrentThreadFactory:(id)arg6;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnit:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5;
- (_Bool)runTaskWithBoolean:(_Bool)arg1 withJavaLangThread:(id)arg2 withJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg3;
- (void)runWorkerWithJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg1;
- (id)getTask;
- (void)processWorkerExitWithJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg1 withBoolean:(_Bool)arg2;
- (void)addWorkerFailedWithJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg1;
- (_Bool)addWorkerWithJavaLangRunnable:(id)arg1 withBoolean:(_Bool)arg2;
- (id)drainQueue;
- (_Bool)isRunningOrShutdownWithBoolean:(_Bool)arg1;
- (void)onShutdown;
- (void)rejectWithJavaLangRunnable:(id)arg1;
- (void)interruptIdleWorkers;
- (void)interruptIdleWorkersWithBoolean:(_Bool)arg1;
- (void)interruptWorkers;
- (void)tryTerminate;
- (void)advanceRunStateWithInt:(int)arg1;
- (void)decrementWorkerCount;
- (_Bool)compareAndDecrementWorkerCountWithInt:(int)arg1;
- (_Bool)compareAndIncrementWorkerCountWithInt:(int)arg1;

@end

