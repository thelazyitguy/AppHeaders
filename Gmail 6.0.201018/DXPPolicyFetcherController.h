//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "DXPPersistentCacheMonitorDelegate-Protocol.h"
#import "DXPPolicyFetchControlling-Protocol.h"

@class DXPConfig, DXPPolicyCache, DXPPolicyRequestManager, NSSet;
@protocol DXPPersistentPolicyCache, DXPPolicyChangeObserver, DXPPolicyNetworkFetcher, GEMEventLogger, GIPClock, OS_dispatch_queue, SSOService;

@interface DXPPolicyFetcherController : NSObject <DXPPolicyFetchControlling, DXPPersistentCacheMonitorDelegate>
{
    id <DXPPolicyChangeObserver> policyObserver;
    DXPConfig *_config;
    id <SSOService> _ssoService;
    NSSet *_identities;
    DXPPolicyCache *_policyCache;
    id <DXPPersistentPolicyCache> _persistentCache;
    id <GIPClock> _clock;
    id <DXPPolicyNetworkFetcher> _networkFetcher;
    DXPPolicyRequestManager *_requestManager;
    NSObject<OS_dispatch_queue> *_serialWorkQueue;
    long long _retryCount;
    id <GEMEventLogger> _eventLogger;
    long long _appEnteredBackgroundCounter;
    CDUnknownBlockType _randomIntGenerator;
    double _meanSamplingInterval;
}

+ (id)fetcherWithConfig:(id)arg1 ssoService:(id)arg2 identities:(id)arg3 eventLogger:(id)arg4 shouldUseConfigurableNetworkFetcher:(_Bool)arg5;
- (void).cxx_destruct;
@property(nonatomic) double meanSamplingInterval; // @synthesize meanSamplingInterval=_meanSamplingInterval;
@property(copy, nonatomic) CDUnknownBlockType randomIntGenerator; // @synthesize randomIntGenerator=_randomIntGenerator;
@property long long appEnteredBackgroundCounter; // @synthesize appEnteredBackgroundCounter=_appEnteredBackgroundCounter;
@property(retain, nonatomic) id <GEMEventLogger> eventLogger; // @synthesize eventLogger=_eventLogger;
@property(nonatomic) long long retryCount; // @synthesize retryCount=_retryCount;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *serialWorkQueue; // @synthesize serialWorkQueue=_serialWorkQueue;
@property(readonly, nonatomic) DXPPolicyRequestManager *requestManager; // @synthesize requestManager=_requestManager;
@property(readonly, nonatomic) id <DXPPolicyNetworkFetcher> networkFetcher; // @synthesize networkFetcher=_networkFetcher;
@property(readonly, nonatomic) id <GIPClock> clock; // @synthesize clock=_clock;
@property(readonly, nonatomic) id <DXPPersistentPolicyCache> persistentCache; // @synthesize persistentCache=_persistentCache;
@property(readonly, nonatomic) DXPPolicyCache *policyCache; // @synthesize policyCache=_policyCache;
@property(copy, nonatomic) NSSet *identities; // @synthesize identities=_identities;
@property(readonly, nonatomic) id <SSOService> ssoService; // @synthesize ssoService=_ssoService;
@property(readonly, nonatomic) DXPConfig *config; // @synthesize config=_config;
@property(nonatomic) __weak id <DXPPolicyChangeObserver> policyObserver; // @synthesize policyObserver;
- (double)nextSampleTime;
- (void)scheduleSample;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)logChangesToPolicy:(id)arg1 forUser:(id)arg2;
- (void)retryUpdatePolicyRequestForIdentity:(id)arg1 completionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)identitiesToUserIds:(id)arg1;
- (_Bool)cacheEntryWithTimestampHasExpired:(id)arg1;
- (void)setPolicy:(id)arg1 forUserID:(id)arg2;
- (void)requestUpdateFromNetwork:(id)arg1 completionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestUpdateIfApplicable:(id)arg1 completionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)checkCacheForIdentity:(id)arg1 shouldRequestNetworkUpdateIfNeeded:(_Bool)arg2 completionQueue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)cacheContentsDidChangeWithCompletionQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)resetRetryCount;
- (void)updateIdentitySet:(id)arg1 completionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)updatePolicyForIdentity:(id)arg1 completionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)initWithConfig:(id)arg1 ssoService:(id)arg2 identities:(id)arg3 policyCache:(id)arg4 persistentCache:(id)arg5 clock:(id)arg6 requestManager:(id)arg7 networkFetcher:(id)arg8 eventLogger:(id)arg9 randomIntGenerator:(CDUnknownBlockType)arg10 meanSamplingInterval:(double)arg11;

@end

