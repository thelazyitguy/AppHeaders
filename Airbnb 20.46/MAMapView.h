//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "CLLocationManagerDelegate-Protocol.h"
#import "MAAnnotationContainerViewDelegate-Protocol.h"
#import "MACompassViewDelegate-Protocol.h"
#import "MAIndoorViewDelegate-Protocol.h"
#import "MAMapRenderDelegate-Protocol.h"
#import "MAMapServiceDelegate-Protocol.h"
#import "MAOverlayContainerViewDelegate-Protocol.h"
#import "MAOverseaMapServiceDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class AMapNetworkManager, CLLocationManager, MAAngleIndicator, MAAnnotationContainerView, MACircle, MACompassView, MAENInlandMapTileOverlay, MAGLESResourceProvider, MAIndoorInfo, MAIndoorView, MAInternalMapStatus, MAMapCustomStyleOptions, MAMapMultiDelegate, MAMapRender, MAOverlayContainerView, MAScaleViewLite, MATapPanToZoomGestureRecognizer, MAUserLocation, MAUserLocationRepresentation, MAViewRecycler, MAWorldMapTileOverlay, MapStatus, NSData, NSDictionary, NSMutableArray, NSNumber, NSOperation, NSString, UIImageView, UILabel, UILongPressGestureRecognizer, UIPanGestureRecognizer, UIPinchGestureRecognizer, UIRotationGestureRecognizer, UITapGestureRecognizer;
@protocol MAAnnotation, MAMapViewDelegate, MAOverseaMapService;

@interface MAMapView : UIView <UIGestureRecognizerDelegate, CLLocationManagerDelegate, MAMapServiceDelegate, MAMapRenderDelegate, MAOverlayContainerViewDelegate, MAAnnotationContainerViewDelegate, MACompassViewDelegate, MAIndoorViewDelegate, MAOverseaMapServiceDelegate>
{
    MAMapRender *_render;
    struct CGPoint _screenAnchor;
    MAOverlayContainerView *_overlayContainerView;
    _Bool _allowsAnnotationViewSorting;
    MAAnnotationContainerView *_annotationContainerView;
    MAViewRecycler *_recycler;
    id <MAAnnotation> _addingAnnotation;
    struct MAMapRect _lastAnnotationValidRect;
    double _lastAnnotationValidZoom;
    CLLocationManager *_locationManager;
    MACircle *_userLocationCircle;
    MAAngleIndicator *_angleIndicator;
    _Bool _userLocationViewIsCustomized;
    double _headingOffset;
    UITapGestureRecognizer *_zoomInGestureRecognizer;
    UITapGestureRecognizer *_zoomOutGestureRecognizer;
    UIPinchGestureRecognizer *_zoomPinchGestureRecognizer;
    UIPanGestureRecognizer *_panGestureRecognizer;
    UIPanGestureRecognizer *_pullGestureRecognizer;
    UIRotationGestureRecognizer *_rotateGestureRecognizer;
    UITapGestureRecognizer *_singleTapGestureRecognizer;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    MATapPanToZoomGestureRecognizer *_tapPanToZoomGestureRecognizer;
    MACompassView *_compassView;
    MAScaleViewLite *_scaleView;
    double _scaleCalculate;
    MAIndoorView *_indoorView;
    MAIndoorInfo *_indoorInfo;
    _Bool _indoorInternalIsHide;
    UIImageView *_logoImageView;
    double _initCount;
    _Bool _isNeedUpdateAnnotationView;
    _Bool _forceUpdateReusingPool;
    MapStatus *_mapStatusBeforeReload;
    unsigned long long _countOfRegionOperation;
    MAWorldMapTileOverlay *_internalWorldTileOverlay;
    MAENInlandMapTileOverlay *_internalENInlandMapTileOverlay;
    _Bool _needUpdateLanguage;
    _Bool _needUpdateWorldMap;
    _Bool _needUpdateInternalOverlays;
    NSDictionary *_trafficStatus;
    double _maxZoomLevel;
    double _minZoomLevel;
    _Bool _showsIndoorMap;
    _Bool _showsScale;
    _Bool _showIndoorMap;
    _Bool _showsIndoorMapControl;
    _Bool _showsUserLocation;
    MAUserLocation *_userLocation;
    _Bool _customizeUserLocationAccuracyCircleRepresentation;
    long long _userTrackingMode;
    MAUserLocationRepresentation *_userLocationDisplayParam;
    NSData *_textureStyleData;
    MAMapCustomStyleOptions *_customStyleOptions;
    NSData *_offlineStyleDataV3;
    NSData *_onlineStyleDataV3;
    NSData *_offlineExtraStyleDataV3;
    NSData *_onlineExtraStyleDataV3;
    int _authResult;
    NSOperation *_onlineStyleDownloadOperation;
    NSOperation *_onlineExtraStyleDownloadOperation;
    _Bool _customMapStyleEnabled;
    _Bool _needUpdateMapStyle;
    _Bool _needUpdateTrafficColor;
    _Bool _isCustomMapStyleSetSuc;
    _Bool _needLogCustomMapStyleEvent;
    _Bool _forceHideLogo;
    _Bool _needUpdateMapType;
    UILabel *_labelFPS;
    _Bool _hasWorldMap;
    _Bool _hasEnglishMap;
    NSMutableArray *_texturesToDelete;
    _Bool _isNeedReloadTexture;
    MAGLESResourceProvider *_glesResProvider;
    long long _frameCounterToStopMapRender;
    _Bool _canStopRenderFlag;
    _Bool _isDraggingGLESAnnotationView;
    NSNumber *_trafficRoadBackColor;
    _Bool _isScaleViewOriginChangedByUser;
    _Bool _isLogoViewCenterChangedByUser;
    _Bool _isContinue3DArrowRender;
    unsigned long long _3DArrowRenderCount;
    NSMutableArray *_glReleaseBlocks;
    _Bool _isFinishStatistics;
    double _startRenderTime;
    _Bool _isStartRenderBackground;
    _Bool _loadWorldVectorMap;
    _Bool _overseaMapServiceInited;
    id <MAOverseaMapService> _overseaMapService;
    _Bool _line20EnabledLocal;
    _Bool _zoomingInPivotsAroundAnchorPoint;
    _Bool _zoomEnabled;
    _Bool _scrollEnabled;
    _Bool _rotateEnabled;
    _Bool _rotateCameraEnabled;
    _Bool _skyModelEnable;
    _Bool _showsBuildings;
    _Bool _showsLabels;
    _Bool _showTraffic;
    _Bool _touchPOIEnabled;
    _Bool _showsCompass;
    _Bool _isDoingAuth;
    id <MAMapViewDelegate> _delegate;
    long long _mapType;
    double _trafficRatio;
    unsigned long long _maxRenderFrame;
    NSString *_runLoopMode;
    NSNumber *_showsWorldMap;
    NSNumber *_mapLanguage;
    AMapNetworkManager *_networkManager;
    double _metersPerPointForCurrentZoom;
    NSNumber *_closeRoadArrow;
    double _limitRegionMinZoomLevel;
    NSMutableArray *_afterDrawBlockArray;
    MAInternalMapStatus *_frameMapStatus;
    MAInternalMapStatus *_volatileMapStatus;
    CDUnknownBlockType _notifyDelegateBlock;
    NSMutableArray *_mapAnimations;
    CDUnknownBlockType _snapshotBlock;
    MAMapMultiDelegate *_multiDelegate;
    struct MACoordinateRegion _limitRegion;
    struct MAMapRect _limitMapRect;
}

+ (_Bool)applicationInBackgroundState;
+ (Class)layerClass;
+ (id)thirdPartyLogger;
+ (void)setThirdPartyLogger:(id)arg1;
+ (void)setDefaultStylePath:(id)arg1;
+ (void)destroySharedDataProvider;
+ (void *)getSharedDataProvider;
+ (id)getMapDataPath;
@property(retain, nonatomic) MAMapMultiDelegate *multiDelegate; // @synthesize multiDelegate=_multiDelegate;
@property(nonatomic) _Bool isDoingAuth; // @synthesize isDoingAuth=_isDoingAuth;
@property(copy, nonatomic) CDUnknownBlockType snapshotBlock; // @synthesize snapshotBlock=_snapshotBlock;
@property(retain, nonatomic) NSMutableArray *mapAnimations; // @synthesize mapAnimations=_mapAnimations;
@property(copy, nonatomic) CDUnknownBlockType notifyDelegateBlock; // @synthesize notifyDelegateBlock=_notifyDelegateBlock;
@property(retain, nonatomic) MAInternalMapStatus *volatileMapStatus; // @synthesize volatileMapStatus=_volatileMapStatus;
@property(retain, nonatomic) MAInternalMapStatus *frameMapStatus; // @synthesize frameMapStatus=_frameMapStatus;
@property(retain, nonatomic) NSMutableArray *afterDrawBlockArray; // @synthesize afterDrawBlockArray=_afterDrawBlockArray;
@property(nonatomic) double limitRegionMinZoomLevel; // @synthesize limitRegionMinZoomLevel=_limitRegionMinZoomLevel;
@property(retain, nonatomic) NSNumber *closeRoadArrow; // @synthesize closeRoadArrow=_closeRoadArrow;
@property(nonatomic) double metersPerPointForCurrentZoom; // @synthesize metersPerPointForCurrentZoom=_metersPerPointForCurrentZoom;
@property(retain, nonatomic) AMapNetworkManager *networkManager; // @synthesize networkManager=_networkManager;
@property(retain, nonatomic) NSNumber *mapLanguage; // @synthesize mapLanguage=_mapLanguage;
@property(retain, nonatomic, getter=isShowsWorldMap) NSNumber *showsWorldMap; // @synthesize showsWorldMap=_showsWorldMap;
@property(copy, nonatomic) NSString *runLoopMode; // @synthesize runLoopMode=_runLoopMode;
@property(nonatomic) unsigned long long maxRenderFrame; // @synthesize maxRenderFrame=_maxRenderFrame;
@property(nonatomic) _Bool showsCompass; // @synthesize showsCompass=_showsCompass;
@property(nonatomic) _Bool touchPOIEnabled; // @synthesize touchPOIEnabled=_touchPOIEnabled;
@property(nonatomic) double trafficRatio; // @synthesize trafficRatio=_trafficRatio;
@property(nonatomic, getter=isShowTraffic) _Bool showTraffic; // @synthesize showTraffic=_showTraffic;
@property(nonatomic, getter=isShowsLabels) _Bool showsLabels; // @synthesize showsLabels=_showsLabels;
@property(nonatomic, getter=isShowsBuildings) _Bool showsBuildings; // @synthesize showsBuildings=_showsBuildings;
@property(nonatomic, getter=isSkyModelEnabled) _Bool skyModelEnable; // @synthesize skyModelEnable=_skyModelEnable;
@property(nonatomic, getter=isRotateCameraEnabled) _Bool rotateCameraEnabled; // @synthesize rotateCameraEnabled=_rotateCameraEnabled;
@property(nonatomic, getter=isRotateEnabled) _Bool rotateEnabled; // @synthesize rotateEnabled=_rotateEnabled;
@property(nonatomic, getter=isScrollEnabled) _Bool scrollEnabled; // @synthesize scrollEnabled=_scrollEnabled;
@property(nonatomic, getter=isZoomEnabled) _Bool zoomEnabled; // @synthesize zoomEnabled=_zoomEnabled;
@property(nonatomic) _Bool zoomingInPivotsAroundAnchorPoint; // @synthesize zoomingInPivotsAroundAnchorPoint=_zoomingInPivotsAroundAnchorPoint;
@property(nonatomic) struct MAMapRect limitMapRect; // @synthesize limitMapRect=_limitMapRect;
@property(nonatomic) struct MACoordinateRegion limitRegion; // @synthesize limitRegion=_limitRegion;
@property(nonatomic) long long mapType; // @synthesize mapType=_mapType;
@property(nonatomic) __weak id <MAMapViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)inflateCombinedZipStyleData:(id)arg1 styleId:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (void)overseaMapServiceUpdate:(id)arg1;
- (_Bool)overseaMapServiceUpdateVisibleMapRect;
- (id)overseaMapService;
- (void)initOverseaService;
- (void)loadOverseaMapService;
- (void)popRendererState;
- (void)pushRendererState;
- (void)onOverseaAuthResult:(_Bool)arg1;
- (void)needRedraw;
- (void)didFinishLoadingStyle;
- (void)mapViewDidFinishLoadingMap;
- (void)mapViewWillStartLoadingMap;
- (void)setTrafficRoadBackgroundColor:(id)arg1;
@property(nonatomic) _Bool showsFPS;
- (void)showOverlays:(id)arg1 annotations:(id)arg2 padding:(struct UIEdgeInsets)arg3 animated:(_Bool)arg4;
- (void)destoryEngineProjection:(void *)arg1;
- (void *)createEngineProjectionFromStatus:(id)arg1;
- (_Bool)couldStopRenderer;
- (void)rendererPostDraw;
- (void)rendererMidDraw:(double)arg1;
- (void)rendererPreDraw:(double)arg1;
- (void)performBlocksAfterDraw;
- (void)scheduleBlockAfterDraw:(CDUnknownBlockType)arg1;
- (void)updateInternalMapStatusToStatus:(id)arg1 isUserAction:(_Bool)arg2 ignoreNotifyDelegate:(_Bool)arg3 duration:(double)arg4 fromStatus:(id)arg5 timingFunc:(long long)arg6 beginCallback:(CDUnknownBlockType)arg7 endCallback:(CDUnknownBlockType)arg8;
- (void)updateInternalMapStatusWith:(struct MAMapPoint)arg1 anchor:(struct CGPoint)arg2 zoom:(double)arg3 rotateDegree:(double)arg4 cameraDegree:(double)arg5 validFlags:(int)arg6 isUserAction:(_Bool)arg7 ignoreNotifyDelegate:(_Bool)arg8 duration:(double)arg9 timingFunc:(long long)arg10 beginCallback:(CDUnknownBlockType)arg11 endCallback:(CDUnknownBlockType)arg12;
- (void)addAnimationWith:(id)arg1 zoomAnimation:(id)arg2 rotateAnimation:(id)arg3 cameraDegreeAnimation:(id)arg4;
- (void)MAMapViewDeallocOperation;
- (void)dealloc;
- (void)layoutSubviews;
- (void)setHidden:(_Bool)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)initializeWithContext:(id)arg1;
- (void)initNotifications;
- (void)updateLogoAndScalePosition;
- (void)postInitLogoImageViewWith:(id)arg1;
- (void)loadImagesAsync:(CDUnknownBlockType)arg1 loaderBlock:(CDUnknownBlockType)arg2;
- (void)initSubViews;
- (id)indoorView;
- (void)initScaleView;
- (void)initLogoImageView;
- (void)initCompassView;
- (void)initMapState;
- (void)initUserlocationSystem;
- (void)initAnnotationContainerView;
- (void)initOverlayContainerView;
- (void)initEnableAttributes;
- (void)initGesture;
- (void)updateInternalOverlayStatues;
- (_Bool)shouldRenderMapContent;
- (_Bool)shouldAddWorldMapTileOverlay;
- (_Bool)shouldAddENInlandMapTileOverlay;
- (_Bool)isInternalOverlayTilesPartlyInland;
- (void)convertMapRectVertexToCoordinate2D:(struct MAMapRect)arg1 resultCoordinates:(struct CLLocationCoordinate2D *)arg2;
- (_Bool)isMapRectPartlyAbroad:(struct MAMapRect)arg1;
- (_Bool)isMapRectAbsolutelyInland:(struct MAMapRect)arg1;
- (id)internalENInlandMapTileOverlay;
- (id)internalWorldTileOverlay;
- (id)getMapLogoImage;
- (void)updateMapLogoImage;
- (void)handleMapLogoUpdateNitification;
- (void)handleDidChangeOrientationNotification:(id)arg1;
- (void)handleDidBecomeActiveNotification;
- (void)indoorMapDidChangeFloorIndex:(id)arg1;
- (void)indoorMapDidShow:(id)arg1;
- (void)indoorMapDidHide:(_Bool)arg1;
- (void)setCurrentIndoorMapFloorIndex:(long long)arg1;
- (void)didMAIndoorValueChangedWithIndoorInfo:(id)arg1;
- (void)clearIndoorMapCache;
- (void)setShowsIndoorMapControl:(_Bool)arg1;
- (_Bool)isShowsIndoorMapControl;
- (void)setShowsIndoorMap:(_Bool)arg1;
- (_Bool)isShowsIndoorMap;
- (void)setIndoorViewHidden;
- (void)setIndoorMapControlOrigin:(struct CGPoint)arg1;
- (struct CGSize)indoorMapControlSize;
@property(readonly, nonatomic) struct CGSize scaleSize;
@property(nonatomic) struct CGPoint scaleOrigin;
@property(nonatomic) _Bool showsScale;
- (void)updateScaleViewForDistance:(double)arg1;
- (void)setCompassImage:(id)arg1;
@property(readonly, nonatomic) struct CGSize compassSize;
@property(nonatomic) struct CGPoint compassOrigin;
- (void)didCompassViewTapped;
- (void)updateCompassViewByDegree:(float)arg1 animated:(_Bool)arg2 duration:(double)arg3;
- (void)hideCompassView;
- (void)showCompassView;
- (struct CGPoint)offsetRangeForVelocity:(struct CGPoint)arg1;
- (double)animationDurationForVelocity:(struct CGPoint)arg1;
- (double)normalizeCameraDegree:(double)arg1;
- (double)normalizeRotationDegree:(double)arg1;
- (double)normalizeZoomLevel:(double)arg1;
- (struct CGPoint)normalizeScreenPoint:(struct CGPoint)arg1;
- (void)mapPointsForPoints:(struct CGPoint *)arg1 mapPoints:(struct MAMapPoint *)arg2 count:(int)arg3;
- (struct MAMapPoint)mapPointForPoint:(struct CGPoint)arg1;
- (void)pointsForMapPoints:(struct MAMapPoint *)arg1 resultPoints:(struct CGPoint *)arg2 count:(long long)arg3;
- (struct CGPoint)pointForMapPoint:(struct MAMapPoint)arg1;
- (_Bool)is180LonLineVisible;
- (struct CGPoint)pointForEnginePoint:(struct CGPoint)arg1;
- (struct CGPoint)enginePointForPoint:(struct CGPoint)arg1;
- (struct CGAffineTransform)cgPointToEnginePointTransform;
- (struct CGPoint)getScreenCGPointForAnchor:(struct CGPoint)arg1;
- (double)zoomLevelCoverMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (double)zoomLevelFitMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (struct MAMapRect)mapRectForRect:(struct CGRect)arg1;
- (struct CGRect)rectForMapRect:(struct MAMapRect)arg1;
- (struct MACoordinateRegion)convertRect:(struct CGRect)arg1 toRegionFromView:(id)arg2;
- (struct CGRect)convertRegion:(struct MACoordinateRegion)arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D)convertPoint:(struct CGPoint)arg1 toCoordinateFromView:(id)arg2;
- (struct CGPoint)convertCoordinate:(struct CLLocationCoordinate2D)arg1 toPointToView:(id)arg2;
- (struct MAMapRect)mapRectThatFits:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (struct MAMapRect)mapRectThatFits:(struct MAMapRect)arg1;
- (id)selectPoisAtEnginePoint:(struct CGPoint)arg1 engineRadius:(double)arg2;
- (id)takePoisAtPoint:(struct CGPoint)arg1;
- (double)calculateDistanceInMetersForZoomLevel:(double)arg1;
- (double)mapPointsPerScreenPointAtZoomLevel:(double)arg1;
- (struct CGRect)constraintRect:(struct CGRect)arg1 inRect:(struct CGRect)arg2 minimumSize:(struct CGSize)arg3;
- (id)imageByCombiningInConstraintSize:(struct CGSize)arg1 firstImage:(id)arg2 secondImage:(id)arg3 logoImage:(id)arg4 logoPosition:(struct CGPoint)arg5;
- (id)cutImage:(id)arg1 inRect:(struct CGRect)arg2;
- (struct CGRect)unionFrameForSubviews:(id)arg1 inView:(id)arg2;
- (void)didFailLoadingWithError:(id)arg1;
- (void)didFinishLoading;
- (void)willStartLoading;
- (void)renderWithState:(long long)arg1;
- (void)engineNeedsUpdate;
@property(nonatomic) _Bool openGLESDisabled;
- (double)currentCameraDegree;
- (void)setCameraDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3;
@property(nonatomic) double cameraDegree;
- (double)currentRotationDegree;
- (void)setRotationDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3;
@property(nonatomic) double rotationDegree;
- (double)priorZoomLevel;
- (double)nextZoomLevel;
- (double)currentZoomLevel;
- (void)setZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3;
- (void)setZoomLevel:(double)arg1 animated:(_Bool)arg2;
@property(nonatomic) double zoomLevel;
@property(nonatomic) double minZoomLevel;
@property(nonatomic) double maxZoomLevel;
- (struct MAMapPoint)currentMapPointCenter;
- (_Bool)shouldExitUserTrackingModeDueToLimitMapRect;
- (void)setLimitMapRect:(struct MAMapRect)arg1 fitSize:(_Bool)arg2;
- (void)setLimitRegion:(struct MACoordinateRegion)arg1 fitSize:(_Bool)arg2;
- (id)getHittedPolylinesWith:(struct CLLocationCoordinate2D)arg1 traverseAll:(_Bool)arg2;
- (void)internalSetCenterCoordinate:(struct CLLocationCoordinate2D)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct CLLocationCoordinate2D centerCoordinate;
- (struct MACoordinateRegion)regionThatFits:(struct MACoordinateRegion)arg1;
- (void)setRegion:(struct MACoordinateRegion)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct MACoordinateRegion region;
- (void)internalSetVisibleMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)setVisibleMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)setVisibleMapRect:(struct MAMapRect)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct MAMapRect visibleMapRect;
- (struct CGRect)getRectOnGround;
- (void)showOverlays:(id)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)showOverlays:(id)arg1 animated:(_Bool)arg2;
- (id)rendererForOverlay:(id)arg1;
- (id)overlaysInLevel:(long long)arg1;
- (id)overlays;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2 atLevel:(long long)arg3;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3;
- (void)removeOverlays:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)addOverlay:(id)arg1 level:(long long)arg2;
- (void)addOverlays:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)updateHeadingForDeviceOrientation;
- (void)locationManager:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)updateUserLocationRepresentation:(id)arg1;
- (long long)userTrackingMode;
- (void)setUserTrackingMode:(long long)arg1 animated:(_Bool)arg2;
- (void)setUserTrackingMode:(long long)arg1;
- (_Bool)isUserLocationVisible;
- (id)userLocationAccuracyCircle;
- (void)requestLocationAuthorizationIfNeed;
- (void)resetUserLocationHeading;
- (void)updateUserLocationAngle;
- (void)removeAngleIndicator;
- (void)addAngleIndicator;
- (void)refreshHeadingOffsetWithOrientation:(long long)arg1;
- (void)addUserLocationInterface;
- (void)removeUserLocationInterface;
- (_Bool)userLocationInterfaceExisted;
- (void)decreaseUserTrackingModeWithFlag:(_Bool)arg1;
- (void)decreaseUserTrackingMode;
- (id)userLocationAnnotationViewWithAnnotation:(id)arg1;
- (void)notifyDelegateUpdateUserLocation:(id)arg1 updatingLocation:(_Bool)arg2;
- (void)setCustomizeUserLocationAccuracyCircleRepresentation:(_Bool)arg1;
- (_Bool)showsUserLocation;
- (void)setShowsUserLocation:(_Bool)arg1;
- (id)userLocation;
- (void)updateAnnotation:(id)arg1;
- (double)annotationContainerViewWithCalloutView:(id)arg1 delayForRepositionWithSize:(struct CGSize)arg2;
- (_Bool)annotationContainerViewDidCalloutViewShouldHighlight:(id)arg1;
- (void)annotationContainerViewDidCalloutViewClicked:(id)arg1;
- (void)annotationContainerViewDidTappedWithAnnotationView:(id)arg1 calloutAccessoryControlTapped:(id)arg2;
- (void)annotationContainerViewDidChangeDragWithAnnotationView:(id)arg1 toNewState:(long long)arg2 fromOldState:(long long)arg3;
- (void)annotationContainerViewDidDeselectAnnotationView:(id)arg1;
- (void)annotationContainerViewDidSelectAnnotationView:(id)arg1;
- (struct CLLocationCoordinate2D)annotationContainerViewCoordinate2DForPoint:(struct CGPoint)arg1;
- (struct CGPoint)annotationContainerViewPointForMapPoint:(struct MAMapPoint)arg1;
- (void)annotationContainerViewPointForMapPoints:(struct MAMapPoint *)arg1 count:(long long)arg2 resultPoints:(struct CGPoint *)arg3;
- (double)getMapCameraDegree;
- (void)resumeFPS;
- (void)updateLockedAnnotationCoordIfNeeded:(id)arg1;
- (id)userLocationCircleRendererWithCircle:(id)arg1;
- (_Bool)customizeUserLocationAccuracyCircleRepresentation;
- (_Bool)isUserLocationCircle:(id)arg1;
- (id)createDrawableForOverlay:(id)arg1;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (double)getMapZoomLevel;
- (double)metersPerPixelAtMapZoomLevel:(double)arg1;
- (void)deleteTextures:(id)arg1;
- (id)glesResProvider;
- (struct CGPoint)overlayRenderGetCurrentRotateDegreeAndCameraDegree;
- (struct CGPoint)overlayRenderGetPhysicalResolutionForPoint:(struct CGPoint)arg1;
- (double)overlayRenderMapPointLenForWinLen:(double)arg1;
- (struct CGPoint)overlayRenderGlPointForMapPoint:(struct MAMapPoint)arg1;
- (struct MAMapRect)overlayRenderMapViewVisibleMapRect;
- (void)overlayRenderNeedsUpdate;
- (_Bool)needUpdateReusingPoolWithVisibleMapRect:(struct MAMapRect)arg1;
- (void)triggerDidAddAnnotationViewsDelegateWith:(id)arg1 isReUsing:(_Bool)arg2;
- (void)updateReusingPool;
- (void)showAnnotations:(id)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)showAnnotations:(id)arg1 animated:(_Bool)arg2;
- (_Bool)allowsAnnotationViewSorting;
- (void)setAllowsAnnotationViewSorting:(_Bool)arg1;
- (struct CGRect)annotationVisibleRect;
- (id)selectedAnnotations;
- (void)setSelectedAnnotations:(id)arg1;
- (void)deselectAnnotation:(id)arg1 animated:(_Bool)arg2;
- (void)selectAnnotation:(id)arg1 animated:(_Bool)arg2;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (id)viewForAnnotation:(id)arg1;
- (id)annotationsInMapRect:(struct MAMapRect)arg1;
- (id)annotations;
- (void)removeAnnotations:(id)arg1;
- (void)removeAnnotation:(id)arg1;
- (void)addAnnotations:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (id)doAddAnnotation:(id)arg1 withValidAnnotationRect:(struct MAMapRect)arg2 forceAdd:(_Bool)arg3;
- (_Bool)isVisibleForAnnotation:(id)arg1 withValidAnnotationRect:(struct MAMapRect)arg2;
- (_Bool)isValidMapRectContainsAnnotationMapPoint:(struct MAMapRect)arg1 annotationMapPoint:(struct MAMapPoint)arg2;
- (struct MAMapRect)annotationValidRect;
- (struct MAMapRect)annotationValidRectFromVisibleMapRect:(struct MAMapRect)arg1;
- (void)updateCenterForAnnotationView:(id)arg1;
- (id)defaultViewForAnnotation:(id)arg1;
- (void)updateAnnotationsCenter;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)tapPanToZoomAction:(id)arg1;
- (void)longPressGesture:(id)arg1;
- (void)singleTapGesture:(id)arg1;
- (void)rotateGesture:(id)arg1;
- (void)pullGesture:(id)arg1;
- (void)panGesture:(id)arg1;
- (void)pinchGesture:(id)arg1;
- (void)zoomOutGesture:(id)arg1;
- (void)zoomInGesture:(id)arg1;
- (struct CGPoint)getGestureAnchorPoint:(id)arg1;
- (unsigned long long)getAnimationCount;
- (void)notifyDelegateMapDidMoveByUser:(_Bool)arg1;
- (void)notifyDelegateMapWillMoveByUser:(_Bool)arg1;
- (void)notifyDelegateMapDidZoomByUser:(_Bool)arg1;
- (void)notifyDelegateMapWillZoomByUser:(_Bool)arg1;
- (void)notifyDelegateRegionDidChangeAnimated:(_Bool)arg1 wasUserAction:(_Bool)arg2;
- (void)notifyDelegateRegionWillChangeAnimated:(_Bool)arg1 wasUserAction:(_Bool)arg2;
- (id)getMapStatus;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2 duration:(double)arg3 timingFunc:(long long)arg4 beginCallback:(CDUnknownBlockType)arg5 endCallback:(CDUnknownBlockType)arg6;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2 duration:(double)arg3;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2;
- (void)updateScaleViewWithZoom:(double)arg1;
- (double)metersPerPointForZoomLevel:(double)arg1;
- (_Bool)customMapStyleEnabled;
- (void)setCustomMapStyleEnabled:(_Bool)arg1;
- (void)doUpdateMapStyle;
- (void)onHandleAuthResult:(_Bool)arg1;
- (void)onHandleOnlineStyleData:(id)arg1 overseaStyleData:(id)arg2;
- (void)onHandleOnlineStyleDowloadResult:(id)arg1 error:(id)arg2 styleId:(id)arg3 hasOversea:(_Bool)arg4;
- (void)onHandleOnlineExtraStyleData:(id)arg1;
- (void)onHandleOnlineExtraStyleDowloadResult:(id)arg1 error:(id)arg2;
- (void)getCustomOnlineData:(id)arg1 version:(int)arg2;
- (void)setCustomTextureResourcePath:(id)arg1;
- (_Bool)checkStyleDataIsNew:(id)arg1;
- (void)setCustomMapStyleOptions:(id)arg1;
- (void)setCustomMapStyleID:(id)arg1;
- (void)setCustomMapStyleWithWebData:(id)arg1;
- (void)cancelStyleDownloading;
- (void)setNeedUpdateMapStyle;
- (_Bool)logCustomMapStyleEvent;
- (void)setNeedUpdateMapType;
- (void)internalSetMapType:(long long)arg1;
@property(readonly, nonatomic) struct CGSize logoSize;
@property(nonatomic) struct CGPoint logoCenter;
- (void)updateLogoStatusForMapRegion;
- (_Bool)isInSkyMode;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)executeGLReleaseTask;
- (void)scheduleGLReleaseTaskWith:(CDUnknownBlockType)arg1;
- (void)willRemoveArrowOverlay:(id)arg1;
- (_Bool)update3DArrowOverlay:(id)arg1 overlaySymbol:(id)arg2;
- (id)add3DArrowOverlay;
- (double)rendererContentScale;
- (float *)getProjectionMatrix;
- (float *)getViewMatrix;
- (struct MAMapPoint)getCurrentOffsetPoint;
- (struct CGSize)getMapViewBounds;
- (id)getCurrentTileIDs;
- (id)getCurrentTiles;
- (id)satelliteImageApprovalNumber;
- (id)mapContentApprovalNumber;
- (void)reloadInternalTexture;
- (void)clearDisk;
- (void)clearGridMapDataCache;
@property(copy, nonatomic) NSDictionary *trafficStatus;
@property(readonly, nonatomic) _Bool isAbroad;
@property(nonatomic) struct CGPoint screenAnchor;
- (void)doDeleteTexturesWithProperContext;
- (void)didReloadMap;
- (void)reloadMap;
- (void)popMapStatus;
- (void)pushMapStatus;
@property(nonatomic) _Bool isAllowDecreaseFrame;
- (void)forceRefresh;
- (void)takeSnapshotInRect:(struct CGRect)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)takeSnapshotInRect:(struct CGRect)arg1;
- (id)takeSnapshotInRect:(struct CGRect)arg1 includeAnnotation:(_Bool)arg2;
- (id)takeSnapshotOnView:(id)arg1 size:(struct CGSize)arg2;
- (id)takeOpenGLESSnapshot;
- (void)setAllowsBackgroundLocationUpdates:(_Bool)arg1;
- (_Bool)allowsBackgroundLocationUpdates;
- (void)setPausesLocationUpdatesAutomatically:(_Bool)arg1;
- (_Bool)pausesLocationUpdatesAutomatically;
- (void)setHeadingFilter:(double)arg1;
- (double)headingFilter;
- (void)setDesiredAccuracy:(double)arg1;
- (double)desiredAccuracy;
- (void)setDistanceFilter:(double)arg1;
- (double)distanceFilter;
- (id)getAllDelegates;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1;
- (void)setNewLineEnabled:(id)arg1;
- (void)setOpenWorldVectorMapNetworkAcceleration:(id)arg1;
- (id)getCurrentStyle;
- (void)setStyle:(id)arg1;
@property(nonatomic) _Bool disableCachedMapDataUpdate;
@property(nonatomic) _Bool loadWorldVectorMap;
- (void)setWorldVectorMapLanguage:(id)arg1;
- (void)retryDoAuth:(int)arg1 withBeginTime:(double)arg2 callBack:(CDUnknownBlockType)arg3;
- (void)doAuthWith:(CDUnknownBlockType)arg1 retryCount:(int)arg2;
- (void)doAuth;
- (id)animationStep:(double)arg1;
- (id)animateFromStatus:(id)arg1 toStatus:(id)arg2 duration:(double)arg3 timingFuncType:(long long)arg4 isUserAction:(_Bool)arg5 beginCallback:(CDUnknownBlockType)arg6 endCallback:(CDUnknownBlockType)arg7;
- (id)pendingAnimations;
- (_Bool)hasPendingAnimations;
- (void)cancelAllAnimations;
- (void)addMapAnimation:(id)arg1;
- (void)setLabelRefreshing:(_Bool)arg1 param2:(int)arg2 param3:(int)arg3;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2 duration:(double)arg3 timingFunc:(long long)arg4 begin:(CDUnknownBlockType)arg5 end:(CDUnknownBlockType)arg6;
- (void *)getMapController;
- (void)setVectorOverlayData:(id)arg1 rect:(struct CGRect)arg2 withCompleteBlock:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

