//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AMIWeblabBridgeService-Protocol.h"
#import "ASKWeblabService-Protocol.h"
#import "AWWeblabLocking-Protocol.h"

@class AMIWeblabBridgeMetricsManager, AMIWeblabTriggerRecorder, NSDictionary, NSMutableArray, NSMutableDictionary, NSString;
@protocol AMWMobileWeblabIOSClient, CMIMetricsFactory;

@interface AMIRedstoneWeblabBridgeService : NSObject <ASKWeblabService, AMIWeblabBridgeService, AWWeblabLocking>
{
    _Bool _canCleanUp;
    _Bool _isInitializing;
    _Bool _isStartup;
    _Bool _isRecoveryMode;
    _Bool _isNotifyUpdateCacheObserverCalled;
    _Bool _initialCacheUpdateResult;
    NSObject *_weblabClientLock;
    NSMutableArray *_initializationCallbacks;
    id <AMWMobileWeblabIOSClient> _client;
    AMIWeblabTriggerRecorder *_triggerRecorder;
    NSMutableDictionary *_weblabDefaultTreatmentDictionary;
    NSMutableDictionary *_safeStartupWeblabs;
    AMIWeblabBridgeMetricsManager *_metricsManager;
    NSString *_appIdentifier;
    id <CMIMetricsFactory> _metricsFactory;
    NSMutableArray *_addAllWeblabsUpdateCacheCallbacks;
}

+ (void)TEST_ONLY_RESET_ONCE_TOKEN_SHARED_WEBLABSERVICE;
+ (id)getOSVersion;
+ (id)getAppVersion;
+ (id)currentDirectedId;
+ (id)currentObfuscatedMarketplaceId;
+ (id)currentSessionId;
+ (void)setCookieValue:(id)arg1 forKey:(id)arg2;
+ (id)cookieValueForKey:(id)arg1;
+ (id)getWeblabRuntimeConfiguration;
+ (id)getWeblabClientAttributes;
+ (id)sharedWeblabService;
@property(nonatomic) _Bool initialCacheUpdateResult; // @synthesize initialCacheUpdateResult=_initialCacheUpdateResult;
@property(nonatomic) _Bool isNotifyUpdateCacheObserverCalled; // @synthesize isNotifyUpdateCacheObserverCalled=_isNotifyUpdateCacheObserverCalled;
@property(retain, nonatomic) NSMutableArray *addAllWeblabsUpdateCacheCallbacks; // @synthesize addAllWeblabsUpdateCacheCallbacks=_addAllWeblabsUpdateCacheCallbacks;
@property(retain) id <CMIMetricsFactory> metricsFactory; // @synthesize metricsFactory=_metricsFactory;
@property(retain) NSString *appIdentifier; // @synthesize appIdentifier=_appIdentifier;
@property(retain, nonatomic) AMIWeblabBridgeMetricsManager *metricsManager; // @synthesize metricsManager=_metricsManager;
@property(retain) NSMutableDictionary *safeStartupWeblabs; // @synthesize safeStartupWeblabs=_safeStartupWeblabs;
@property(nonatomic) _Bool isRecoveryMode; // @synthesize isRecoveryMode=_isRecoveryMode;
@property(nonatomic) _Bool isStartup; // @synthesize isStartup=_isStartup;
@property(retain) NSMutableDictionary *weblabDefaultTreatmentDictionary; // @synthesize weblabDefaultTreatmentDictionary=_weblabDefaultTreatmentDictionary;
@property(retain, nonatomic) AMIWeblabTriggerRecorder *triggerRecorder; // @synthesize triggerRecorder=_triggerRecorder;
@property(retain, nonatomic) id <AMWMobileWeblabIOSClient> client; // @synthesize client=_client;
@property(nonatomic) _Bool isInitializing; // @synthesize isInitializing=_isInitializing;
@property(nonatomic) _Bool canCleanUp; // @synthesize canCleanUp=_canCleanUp;
@property(retain, nonatomic) NSMutableArray *initializationCallbacks; // @synthesize initializationCallbacks=_initializationCallbacks;
@property(retain, nonatomic) NSObject *weblabClientLock; // @synthesize weblabClientLock=_weblabClientLock;
- (void).cxx_destruct;
- (void)updateWeblabProvider:(id)arg1;
- (_Bool)unlockWeblab:(id)arg1;
- (_Bool)lockWeblab:(id)arg1 toTreatment:(id)arg2;
@property(readonly, nonatomic) NSDictionary *weblabNameTreatmentDictionary;
- (void)updateDirectedIDIfNecessary;
- (void)didReceiveSignOutSucceededNotification;
- (void)didReceiveSignInSucceededNotification;
- (_Bool)shouldLogWeblabsAndTreatmentsAccessed;
- (void)setShouldLogWeblabsAndTreatmentsAccessed:(_Bool)arg1;
- (id)weblabsAndTreatmentsAccessed;
- (void)cookieChangedHandler;
- (id)getTreatmentSnapshotForWeblab:(id)arg1;
- (void)didChangeMarketplace;
- (void)logStartupWeblabTreatmentIfNecessary:(id)arg1 treatment:(id)arg2;
- (id)treatmentSnapshotForWeblab:(id)arg1;
- (void)notifyUpdateCacheObserver:(_Bool)arg1;
- (void)updateCache:(CDUnknownBlockType)arg1;
- (void)cleanUpAndUpdateCacheWithCallback:(CDUnknownBlockType)arg1;
- (void)cleanUpAndUpdateCache;
- (void)didAddAllWeblabs;
- (void)addObserverForInitialCacheUpdate:(CDUnknownBlockType)arg1;
- (void)addWeblabs:(id)arg1;
- (void)notifyInitialized;
- (void)addObserverForInitialization:(CDUnknownBlockType)arg1;
- (void)createWeblabClientWithSessionId:(id)arg1 marketplaceId:(id)arg2 directedId:(id)arg3 weblabClientAttributes:(id)arg4 weblabRuntimeConfiguration:(id)arg5;
- (void)_createWeblabClientWithSessionIdInternal:(id)arg1 marketplaceId:(id)arg2 directedId:(id)arg3 weblabClientAttributes:(id)arg4 weblabRuntimeConfiguration:(id)arg5;
- (id)initWithAppIdentifier:(id)arg1 metricsFactory:(id)arg2 triggerRecorder:(id)arg3 sessionId:(id)arg4 obfuscatedMarketplaceId:(id)arg5 directedId:(id)arg6 weblabClientAttributes:(id)arg7 weblabRuntimeConfiguration:(id)arg8 weblabsRegisteredInJSON:(id)arg9 isRecoveryMode:(_Bool)arg10;

@end

