//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <TwitterNetworkLayer/TNLSafeOperation.h>

@class NSDictionary, NSError, NSMutableArray, NSMutableURLRequest, NSObject, NSString, NSURLRequest, TNLRequestConfiguration, TNLRequestOperationQueue, TNLResponse, TNLResponseMetrics, TNLURLSessionTaskOperation;
@protocol OS_dispatch_queue, OS_dispatch_source, TNLHostSanitizer, TNLRequest, TNLRequestDelegate;

@interface TNLRequestOperation : TNLSafeOperation
{
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSObject<OS_dispatch_queue> *_completionQueue;
    long long _enqueuedPriority;
    NSMutableArray *_callbackTagStack;
    unsigned long long _mach_callbackTagTime;
    NSError *_cachedCancelError;
    id <TNLRequestDelegate> _strongDelegate;
    unsigned long long _backgroundTaskIdentifier;
    double _cloggedCallbackTimeout;
    // Error parsing type: Aq, name: _state
    NSMutableURLRequest *_scratchURLRequest;
    double _scratchURLRequestEncodeLatency;
    long long _scratchURLRequestOriginalBodyLength;
    long long _scratchURLRequestEncodedBodyLength;
    id <TNLHostSanitizer> _hostSanitizer;
    TNLResponseMetrics *_metrics;
    NSObject<OS_dispatch_source> *_operationTimeoutTimerSource;
    NSObject<OS_dispatch_source> *_attemptTimeoutTimerSource;
    NSObject<OS_dispatch_source> *_callbackTimeoutTimerSource;
    unsigned long long _callbackTimeoutTimerStartMachTime;
    unsigned long long _callbackTimeoutTimerPausedMachTime;
    unsigned long long _activeRetryId;
    struct {
        unsigned int didEnqueue:1;
        unsigned int didStart:1;
        unsigned int didPrep:1;
        unsigned int inRetryCheck:1;
        unsigned int silentStart:1;
        unsigned int isCallbackClogDetectionEnabled:1;
        unsigned int isObservingApplicationStates:1;
        unsigned int applicationIsInBackground:1;
        unsigned int invalidSessionRetryCount:4;
    } _backgroundFlags;
    TNLURLSessionTaskOperation *_URLSessionTaskOperation;
    // Error parsing type: AB, name: _didCompleteFinishedCallback
    float _downloadProgress;
    float _uploadProgress;
    long long _operationId;
    TNLRequestOperationQueue *_requestOperationQueue;
    TNLRequestConfiguration *_requestConfiguration;
    id <TNLRequestDelegate> _requestDelegate;
    id <TNLRequest> _originalRequest;
    id <TNLRequest> _hydratedRequest;
    Class _responseClass;
    id _context;
    NSString *_cachedDelegateClassName;
    NSError *_terminalErrorOverride;
    long long _internalPriority;
    TNLResponse *_internalFinalResponse;
    NSDictionary *_additionalDecoders;
    NSURLRequest *_hydratedURLRequest;
}

+ (id)operationWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 delegate:(id)arg4;
+ (id)operationWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (id)operationWithRequest:(id)arg1 configuration:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (id)operationWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)operationWithURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)operationWithURL:(id)arg1 configuration:(id)arg2 delegate:(id)arg3;
+ (id)operationWithRequest:(id)arg1 configuration:(id)arg2 delegate:(id)arg3;
- (void).cxx_destruct;
@property(copy) NSURLRequest *hydratedURLRequest; // @synthesize hydratedURLRequest=_hydratedURLRequest;
@property(copy) NSDictionary *additionalDecoders; // @synthesize additionalDecoders=_additionalDecoders;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(nonatomic) float uploadProgress; // @synthesize uploadProgress=_uploadProgress;
@property(nonatomic) float downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property(readonly) Class responseClass; // @synthesize responseClass=_responseClass;
@property(retain, nonatomic) id <TNLRequest> hydratedRequest; // @synthesize hydratedRequest=_hydratedRequest;
@property(readonly, nonatomic) id <TNLRequest> originalRequest; // @synthesize originalRequest=_originalRequest;
@property(readonly, nonatomic) __weak id <TNLRequestDelegate> requestDelegate; // @synthesize requestDelegate=_requestDelegate;
@property(readonly, nonatomic) TNLRequestConfiguration *requestConfiguration; // @synthesize requestConfiguration=_requestConfiguration;
@property(retain, nonatomic) TNLRequestOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) long long operationId; // @synthesize operationId=_operationId;
- (void)start;
- (_Bool)isExecuting;
- (_Bool)isCancelled;
- (_Bool)isFinished;
- (_Bool)isAsynchronous;
- (_Bool)isConcurrent;
- (void)cancelWithSource:(id)arg1 underlyingError:(id)arg2;
- (void)cancelWithSource:(id)arg1;
- (void)cancel;
- (void)waitUntilFinishedWithoutBlockingRunLoop;
- (void)network_URLSessionTaskOperation:(id)arg1 didStartSessionTaskWithRequest:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didTransitionToState:(long long)arg2 withResponse:(id)arg3;
- (void)network_URLSessionTaskOperation:(id)arg1 finalizeWithResponseInfo:(id)arg2 responseError:(id)arg3 metaData:(id)arg4 taskMetrics:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)network_URLSessionTaskOperation:(id)arg1 didStartTaskWithTaskIdentifier:(unsigned long long)arg2 configIdentifier:(id)arg3 sharedContainerIdentifier:(id)arg4 isBackgroundRequest:(_Bool)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 appendReceivedData:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didUpdateDownloadProgress:(float)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didUpdateUploadProgress:(float)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 redirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 to:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 redirectedFrom:(id)arg2 withHTTPResponse:(id)arg3 to:(id)arg4 metaData:(id)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 willPerformRedirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 toRequest:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 didReceiveURLResponse:(id)arg2;
- (void)network_URLSessionTaskOperationIsWaitingForConnectivity:(id)arg1;
@property long long priority;
- (long long)qualityOfService;
- (long long)queuePriority;
- (id)currentURLResponse;
- (id)currentURLRequest;
@property(readonly, nonatomic) unsigned long long redirectCount;
@property(readonly, nonatomic) unsigned long long retryCount;
@property(readonly, nonatomic) unsigned long long attemptCount;
@property(readonly) TNLResponse *response;
@property(readonly) NSError *error;
- (void)_tnl_setState:(long long)arg1;
- (void)setState:(long long)arg1 async:(_Bool)arg2;
@property(readonly, nonatomic) long long state;
@property(retain) TNLURLSessionTaskOperation *URLSessionTaskOperation;
- (void)enqueueToOperationQueue:(id)arg1;
- (void)dealloc;
- (_Bool)dealloc_isObservingApplicationStates;
- (unsigned long long)dealloc_backgroundTaskIdentifier;
- (id)initWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 delegate:(id)arg4;
- (id)init;
- (void)waitUntilFinished;
- (void)addDependency:(id)arg1;
- (void)_private_didBecomeActive:(id)arg1;
- (void)_private_willResignActive:(id)arg1;
- (void)_finalizeCompletion;

@end

