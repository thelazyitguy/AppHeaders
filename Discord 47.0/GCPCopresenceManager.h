//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class GCPAudioTokenStrategy, GCPBLEBeaconStrategy, GCPBLETokenStrategy, GCPConfiguration, GCPRPCManager, GCPRpcService, NSArray, NSMapTable, NSMutableArray, NSMutableDictionary, NSMutableSet;

@interface GCPCopresenceManager : NSObject
{
    _Bool _showBluetoothPowerAlert;
    _Bool _useBestAudioSessionCategory;
    _Bool _paused;
    CDUnknownBlockType _errorHandler;
    GCPRpcService *_rpcService;
    GCPRPCManager *_rpcManager;
    NSArray *_rpcManagerErrors;
    NSMutableSet *_mutableGoodTokens;
    NSMutableSet *_mutableBadTokens;
    NSMutableSet *_mutableBeacons;
    CDUnknownBlockType _fetchMessagesBlock;
    CDUnknownBlockType _purgeExpiredTokens;
    CDUnknownBlockType _purgeExpiredUrlBeacons;
    NSMutableDictionary *_recentlySeenUrlBeacons;
    NSMapTable *_publications;
    NSMapTable *_subscriptions;
    NSMutableDictionary *_unpubSuccessBlocks;
    NSMutableDictionary *_unsubSuccessBlocks;
    NSMutableDictionary *_subscriptionIdToIBeaconUUIDs;
    GCPConfiguration *_configuration;
    NSMutableArray *_configurationSinks;
    double _messageFetchPeriodFromConfig;
    double _messageFetchPeriodOverride;
    double _tokenExpirationPeriod;
    double _tokenPurgePeriod;
    NSMutableArray *_activeTokenStrategies;
    GCPAudioTokenStrategy *_audioTokenStrategy;
    GCPBLETokenStrategy *_bleTokenStrategy;
    GCPBLEBeaconStrategy *_bleBeaconStrategy;
    NSArray *_audioErrors;
    NSArray *_bleErrors;
    NSArray *_beaconErrors;
    CDUnknownBlockType _audioModeChangedCallback;
    CDUnknownBlockType _handleNewTokensBlock;
    CDUnknownBlockType _auxiliaryTokensBlock;
}

+ (_Bool)isDebugLoggingEnabled;
+ (void)setDebugLoggingEnabled:(_Bool)arg1;
+ (id)directivesForStrategy:(id)arg1 withTokenData:(id)arg2;
+ (void)setServerForNewManagers:(long long)arg1;
@property(copy, nonatomic) CDUnknownBlockType auxiliaryTokensBlock; // @synthesize auxiliaryTokensBlock=_auxiliaryTokensBlock;
@property(copy, nonatomic) CDUnknownBlockType handleNewTokensBlock; // @synthesize handleNewTokensBlock=_handleNewTokensBlock;
@property(copy, nonatomic) CDUnknownBlockType audioModeChangedCallback; // @synthesize audioModeChangedCallback=_audioModeChangedCallback;
@property(nonatomic, getter=isPaused) _Bool paused; // @synthesize paused=_paused;
@property(retain, nonatomic) NSArray *beaconErrors; // @synthesize beaconErrors=_beaconErrors;
@property(retain, nonatomic) NSArray *bleErrors; // @synthesize bleErrors=_bleErrors;
@property(retain, nonatomic) NSArray *audioErrors; // @synthesize audioErrors=_audioErrors;
@property(nonatomic, getter=shouldUseBestAudioSessionCategory) _Bool useBestAudioSessionCategory; // @synthesize useBestAudioSessionCategory=_useBestAudioSessionCategory;
@property(nonatomic, getter=shouldShowBluetoothPowerAlert) _Bool showBluetoothPowerAlert; // @synthesize showBluetoothPowerAlert=_showBluetoothPowerAlert;
@property(retain, nonatomic) GCPBLEBeaconStrategy *bleBeaconStrategy; // @synthesize bleBeaconStrategy=_bleBeaconStrategy;
@property(retain, nonatomic) GCPBLETokenStrategy *bleTokenStrategy; // @synthesize bleTokenStrategy=_bleTokenStrategy;
@property(readonly, nonatomic) GCPAudioTokenStrategy *audioTokenStrategy; // @synthesize audioTokenStrategy=_audioTokenStrategy;
@property(retain, nonatomic) NSMutableArray *activeTokenStrategies; // @synthesize activeTokenStrategies=_activeTokenStrategies;
@property(nonatomic) double tokenPurgePeriod; // @synthesize tokenPurgePeriod=_tokenPurgePeriod;
@property(nonatomic) double tokenExpirationPeriod; // @synthesize tokenExpirationPeriod=_tokenExpirationPeriod;
@property(nonatomic) double messageFetchPeriodOverride; // @synthesize messageFetchPeriodOverride=_messageFetchPeriodOverride;
@property(nonatomic) double messageFetchPeriodFromConfig; // @synthesize messageFetchPeriodFromConfig=_messageFetchPeriodFromConfig;
@property(retain, nonatomic) NSMutableArray *configurationSinks; // @synthesize configurationSinks=_configurationSinks;
@property(retain, nonatomic) GCPConfiguration *configuration; // @synthesize configuration=_configuration;
@property(retain, nonatomic) NSMutableDictionary *subscriptionIdToIBeaconUUIDs; // @synthesize subscriptionIdToIBeaconUUIDs=_subscriptionIdToIBeaconUUIDs;
@property(retain, nonatomic) NSMutableDictionary *unsubSuccessBlocks; // @synthesize unsubSuccessBlocks=_unsubSuccessBlocks;
@property(retain, nonatomic) NSMutableDictionary *unpubSuccessBlocks; // @synthesize unpubSuccessBlocks=_unpubSuccessBlocks;
@property(retain, nonatomic) NSMapTable *subscriptions; // @synthesize subscriptions=_subscriptions;
@property(retain, nonatomic) NSMapTable *publications; // @synthesize publications=_publications;
@property(retain, nonatomic) NSMutableDictionary *recentlySeenUrlBeacons; // @synthesize recentlySeenUrlBeacons=_recentlySeenUrlBeacons;
@property(copy, nonatomic) CDUnknownBlockType purgeExpiredUrlBeacons; // @synthesize purgeExpiredUrlBeacons=_purgeExpiredUrlBeacons;
@property(copy, nonatomic) CDUnknownBlockType purgeExpiredTokens; // @synthesize purgeExpiredTokens=_purgeExpiredTokens;
@property(copy, nonatomic) CDUnknownBlockType fetchMessagesBlock; // @synthesize fetchMessagesBlock=_fetchMessagesBlock;
@property(retain, nonatomic) NSMutableSet *mutableBeacons; // @synthesize mutableBeacons=_mutableBeacons;
@property(retain, nonatomic) NSMutableSet *mutableBadTokens; // @synthesize mutableBadTokens=_mutableBadTokens;
@property(retain, nonatomic) NSMutableSet *mutableGoodTokens; // @synthesize mutableGoodTokens=_mutableGoodTokens;
@property(retain, nonatomic) NSArray *rpcManagerErrors; // @synthesize rpcManagerErrors=_rpcManagerErrors;
@property(retain, nonatomic) GCPRPCManager *rpcManager; // @synthesize rpcManager=_rpcManager;
@property(retain, nonatomic) GCPRpcService *rpcService; // @synthesize rpcService=_rpcService;
@property(copy, nonatomic) CDUnknownBlockType errorHandler; // @synthesize errorHandler=_errorHandler;
- (void).cxx_destruct;
- (void)unsubscribeWithID:(id)arg1 successBlock:(CDUnknownBlockType)arg2;
- (void)unpublishWithID:(id)arg1 successBlock:(CDUnknownBlockType)arg2;
- (void)updateEnabledStrategiesWithAdditionalStrategies:(id)arg1;
- (void)setAudioEnabled:(_Bool)arg1;
- (_Bool)isAudioEnabled;
- (void)setBeaconsEnabled:(_Bool)arg1 areIBeaconsEnabled:(_Bool)arg2 scanForDiscoveries:(_Bool)arg3 scanInBackground:(_Bool)arg4 attemptLowPower:(_Bool)arg5;
- (_Bool)areBeaconsEnabled;
- (void)setBLEEnabled:(_Bool)arg1 scanInBackground:(_Bool)arg2 advertiseInBackground:(_Bool)arg3;
- (_Bool)isBLEEnabled;
- (void)propagateConfigurationUpdates;
- (void)updateSelfWithConfiguration;
- (void)reportAllErrors;
- (void)periodicallyFetchSubscribedMessages;
- (void)periodicallyPurgeLostUrlBeacons;
- (void)periodicallyPurgeExpiredTokens;
- (void)handleTokensObserved:(id)arg1;
- (void)deliverDirectives:(id)arg1 tokens:(id)arg2 subscribedMessages:(id)arg3 subscribedDiscoveries:(id)arg4;
- (void)ensureScanningForIBeaconUUIDs;
- (void)removeScanningHintsForSubscription:(id)arg1;
- (void)updateSubscriptionResults:(id)arg1;
- (void)updatePublicationResults:(id)arg1;
- (void)disableHighPower;
- (void)enableHighPower;
- (void)updateState;
- (id)tokenScannerOnMediums:(long long)arg1 tokenHandler:(CDUnknownBlockType)arg2;
- (id)tokenBroadcasterOnMediums:(long long)arg1 tokenData:(id)arg2;
- (id)subscriptionWithParams:(id)arg1 messagesReceivedHandler:(CDUnknownBlockType)arg2;
- (id)publicationWithParams:(id)arg1;
- (void)setApiaryTraceToken:(id)arg1 methodNameSubstring:(id)arg2 maxEmails:(long long)arg3;
- (id)tokensForBroadcasting;
- (id)beacons;
- (id)badTokens;
- (id)goodTokens;
- (id)currentDirectives;
- (_Bool)updateDirectivesByAdding:(id)arg1 removing:(id)arg2;
- (void)dealloc;
- (id)initWithRpcService:(id)arg1 accountId:(id)arg2 errorHandler:(CDUnknownBlockType)arg3 paramsBlock:(CDUnknownBlockType)arg4;
- (id)initWithFetcherService:(id)arg1 APIKey:(id)arg2 errorHandler:(CDUnknownBlockType)arg3 paramsBlock:(CDUnknownBlockType)arg4;
- (id)initWithFetcherService:(id)arg1 APIKey:(id)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (id)rpcServiceWithFetcherService:(id)arg1 APIKey:(id)arg2;

@end

