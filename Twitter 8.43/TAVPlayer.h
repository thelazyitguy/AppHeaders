//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <TwitterAVCore/TAVPlayback-Protocol.h>
#import <TwitterAVCore/TAVPlayerTechnologyObserver-Protocol.h>

@class TAVPlaybackState, TAVSeekCursor, TAVTechnologicalPlayerInternalState, TAVTechnologicalPlayerMainThreadState, UIView;
@protocol NSObject, OS_dispatch_queue, TAVOutputViewHosting, TAVPlayerOutputView, TAVSession;

@interface TAVPlayer : NSObject <TAVPlayerTechnologyObserver, TAVPlayback>
{
    TAVTechnologicalPlayerMainThreadState *_mainThreadState;
    TAVTechnologicalPlayerInternalState *_internalState;
    NSObject<OS_dispatch_queue> *_internalStateQueue;
    id <NSObject> _audioRouteObserver;
    id <NSObject> _audioSessionInterruptionObserver;
    CDUnknownBlockType _prepareFinishedNotificationBlock;
}

+ (void)setIsPreferredPeakBitrateCappingDisabled:(_Bool)arg1;
+ (_Bool)isPreferredPeakBitrateCappingDisabled;
+ (id)playerWithPlaylistItem:(id)arg1;
- (void).cxx_destruct;
@property(copy, nonatomic) CDUnknownBlockType prepareFinishedNotificationBlock; // @synthesize prepareFinishedNotificationBlock=_prepareFinishedNotificationBlock;
@property(readonly, nonatomic) id <NSObject> audioSessionInterruptionObserver; // @synthesize audioSessionInterruptionObserver=_audioSessionInterruptionObserver;
@property(readonly, nonatomic) id <NSObject> audioRouteObserver; // @synthesize audioRouteObserver=_audioRouteObserver;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *internalStateQueue; // @synthesize internalStateQueue=_internalStateQueue;
- (void)dealloc;
- (void)setTargetRelativePresentationOffset:(id)arg1;
- (void)setCaptionsEnabled:(_Bool)arg1;
- (void)selectLegibleMediaSelectionOption:(id)arg1;
- (_Bool)isPresentingInDescendantOfView:(id)arg1;
- (void)attemptToRecoverFromError;
- (void)removePlaybackObserver:(id)arg1;
- (void)addPlaybackObserver:(id)arg1;
- (void)advance;
- (void)pause;
- (void)playOrReplay;
- (void)play;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1;
@property(copy, nonatomic) TAVSeekCursor *scrubCursor;
@property(nonatomic) float volume;
@property(nonatomic) _Bool isMuted;
- (void)unregisterCandidateOutputViewHost:(id)arg1;
- (void)registerCandidateOutputViewHost:(id)arg1 priority:(long long)arg2;
- (void)updatePlayerInternalStateFromPlayerView:(id)arg1;
@property(nonatomic) __weak UIView<TAVOutputViewHosting> *outputViewHost;
- (void)outputViewHostWasDeallocated;
@property(readonly, nonatomic) UIView<TAVPlayerOutputView> *outputView;
- (void)captureSnapshotForCurrentMediaWithCompletion:(CDUnknownBlockType)arg1;
- (void)resetPlaythrough;
- (void)prepareWithSession:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) id <TAVSession> session;
@property(readonly, nonatomic) TAVPlaybackState *playbackState;
- (void)playerTechnology:(id)arg1 didEncounterNonFatalError:(id)arg2;
- (void)playerTechnology:(id)arg1 didOutputTXXXFrameWithDescription:(id)arg2 value:(id)arg3;
- (void)playerTechnology:(id)arg1 didUpdateState:(id)arg2;
- (void)sync_audioSessionInterruptedWithType:(unsigned long long)arg1 options:(unsigned long long)arg2 mainThreadStateAllowsPlayback:(_Bool)arg3;
- (void)sync_autoPauseIfNoOutputViewHost;
- (void)sync_attemptToRecoverFromError;
- (void)mainThread_seekWithClientInitiatedCursor:(id)arg1;
- (void)sync_seekWithCursor:(id)arg1;
- (void)sync_updateTechControlState;
- (void)sync_setUpdateTechControlStateNeeded;
- (id)sync_createTechControlState;
- (void)sync_broadcastState;
- (id)sync_createPerformanceState;
- (void)playerTechnology:(id)arg1 didUpdateOutputView:(id)arg2;
- (void)sync_cueItemAtIndex:(unsigned long long)arg1 reason:(id)arg2 time:(CDStruct_1b6d18a9)arg3;
@property(readonly, nonatomic) TAVTechnologicalPlayerInternalState *internalState; // @synthesize internalState=_internalState;
@property(readonly, nonatomic) TAVTechnologicalPlayerMainThreadState *mainThreadState; // @synthesize mainThreadState=_mainThreadState;
- (id)init;

@end

