//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import <T1Twitter/T1VideoCaptionsViewDelegate-Protocol.h>
#import <T1Twitter/TAVPlaybackObserver-Protocol.h>
#import <T1Twitter/TAVUIAutoplayable-Protocol.h>
#import <T1Twitter/TIPImageFetchable-Protocol.h>

@class NSString, T1DeadVideoErrorView, T1DynamicVideoAdViewModel, T1EqualizerChromeComponentWrapper, T1PrerollCTAModel, T1TimeChromeComponentWrapper, T1VideoAdButton, T1VideoBitRateManager, T1VideoCaptionsView, T1VideoSkipCountdownLabel, TAVPlaybackState, TAVPlayerView, TAVScribeContext, TAVUIVideoButtonOverlay, TFNLegacyButton, TFNLongPressGestureRecognizer, TFNSolidColorView, TFNTwitterAccount, TFSKVODispatcher, TFSTimer, TIPImageContainer, UIActivityIndicatorView, UIButton, UIColor, UIImage, UIImageView, UITapGestureRecognizer;
@protocol T1InlineMediaViewDelegate, T1InlineMediaViewModel, T1InlineMediaViewPrerollDelegate;

@interface T1InlineMediaView : UIView <TAVUIAutoplayable, TAVPlaybackObserver, T1VideoCaptionsViewDelegate, TIPImageFetchable>
{
    _Bool _viewCountEnabled;
    _Bool _alwaysPlayAudio;
    _Bool _alwaysHideAudioToggleButton;
    _Bool _videoAspectFitGravityPreferred;
    _Bool _allowUnlimitedVideoBitrate;
    _Bool _borderHidden;
    _Bool _shouldAlwaysHideOverlay;
    _Bool _playerIconViewHidden;
    _Bool _isTimePillViewHidden;
    _Bool _isAudioPlaybackEnabled;
    _Bool _shouldAlwaysHidePlayButton;
    _Bool _playbackDesired;
    _Bool _animatingPlayerView;
    UIButton *_playButton;
    T1VideoBitRateManager *_videoBitrateManager;
    id <T1InlineMediaViewDelegate> _delegate;
    id <T1InlineMediaViewPrerollDelegate> _prerollDelegate;
    unsigned long long _imageState;
    unsigned long long _videoState;
    TAVPlayerView *_playerView;
    long long _videoLoopingBehavior;
    id <T1InlineMediaViewModel> _viewModel;
    TAVScribeContext *_tavScribeContext;
    TFNTwitterAccount *_account;
    double _playButtonOffsetAsFractionOfViewHeight;
    UIColor *_dominantBackgroundColor;
    UITapGestureRecognizer *_tapGestureRecognizer;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    TFNLongPressGestureRecognizer *_longPressGestureRecognizer;
    UIImageView *_previewImageView;
    UIView *_shadedOverlayContainerView;
    TFNSolidColorView *_shadedOverlayColorView;
    UIView *_overlayChromesContainerView;
    UIActivityIndicatorView *_videoLoadingIndicator;
    unsigned long long _playerIconViewType;
    UIView *_playerIconView;
    T1TimeChromeComponentWrapper *_vodTimeChromeComponent;
    T1EqualizerChromeComponentWrapper *_vodEqualizerChromeComponent;
    T1VideoAdButton *_skipAdButton;
    T1VideoSkipCountdownLabel *_skipCountdownLabel;
    UIView *_playerContainerView;
    T1VideoCaptionsView *_captionsView;
    TFSTimer *_timePillFadeTimer;
    T1PrerollCTAModel *_ctaModel;
    TFNLegacyButton *_audioToggleButton;
    T1DynamicVideoAdViewModel *_adViewModel;
    TFSKVODispatcher *_outputVolumeKVODispatcher;
    NSString *_periscopeTotalParticipants;
    UIView *_watchAgainButtonContainer;
    TFNLegacyButton *_watchAgainButton;
    TAVUIVideoButtonOverlay *_contentGuardOverlay;
    TAVPlaybackState *_previousPlaybackState;
    T1DeadVideoErrorView *_deadVideoErrorView;
}

+ (void)updatePreviewImageVariantSelectionWithAccount:(id)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) T1DeadVideoErrorView *deadVideoErrorView; // @synthesize deadVideoErrorView=_deadVideoErrorView;
@property(nonatomic) _Bool animatingPlayerView; // @synthesize animatingPlayerView=_animatingPlayerView;
@property(retain, nonatomic) TAVPlaybackState *previousPlaybackState; // @synthesize previousPlaybackState=_previousPlaybackState;
@property(retain, nonatomic) TAVUIVideoButtonOverlay *contentGuardOverlay; // @synthesize contentGuardOverlay=_contentGuardOverlay;
@property(retain, nonatomic) TFNLegacyButton *watchAgainButton; // @synthesize watchAgainButton=_watchAgainButton;
@property(retain, nonatomic) UIView *watchAgainButtonContainer; // @synthesize watchAgainButtonContainer=_watchAgainButtonContainer;
@property(nonatomic) _Bool playbackDesired; // @synthesize playbackDesired=_playbackDesired;
@property(nonatomic) _Bool shouldAlwaysHidePlayButton; // @synthesize shouldAlwaysHidePlayButton=_shouldAlwaysHidePlayButton;
@property(nonatomic) _Bool isAudioPlaybackEnabled; // @synthesize isAudioPlaybackEnabled=_isAudioPlaybackEnabled;
@property(copy, nonatomic) NSString *periscopeTotalParticipants; // @synthesize periscopeTotalParticipants=_periscopeTotalParticipants;
@property(retain, nonatomic) TFSKVODispatcher *outputVolumeKVODispatcher; // @synthesize outputVolumeKVODispatcher=_outputVolumeKVODispatcher;
@property(retain, nonatomic) T1DynamicVideoAdViewModel *adViewModel; // @synthesize adViewModel=_adViewModel;
@property(retain, nonatomic) TFNLegacyButton *audioToggleButton; // @synthesize audioToggleButton=_audioToggleButton;
@property(retain, nonatomic) T1PrerollCTAModel *ctaModel; // @synthesize ctaModel=_ctaModel;
@property(retain, nonatomic) TFSTimer *timePillFadeTimer; // @synthesize timePillFadeTimer=_timePillFadeTimer;
@property(nonatomic) _Bool isTimePillViewHidden; // @synthesize isTimePillViewHidden=_isTimePillViewHidden;
@property(retain, nonatomic) T1VideoCaptionsView *captionsView; // @synthesize captionsView=_captionsView;
@property(retain, nonatomic) UIView *playerContainerView; // @synthesize playerContainerView=_playerContainerView;
@property(readonly, nonatomic) T1VideoSkipCountdownLabel *skipCountdownLabel; // @synthesize skipCountdownLabel=_skipCountdownLabel;
@property(readonly, nonatomic) T1VideoAdButton *skipAdButton; // @synthesize skipAdButton=_skipAdButton;
@property(retain, nonatomic) T1EqualizerChromeComponentWrapper *vodEqualizerChromeComponent; // @synthesize vodEqualizerChromeComponent=_vodEqualizerChromeComponent;
@property(retain, nonatomic) T1TimeChromeComponentWrapper *vodTimeChromeComponent; // @synthesize vodTimeChromeComponent=_vodTimeChromeComponent;
@property(retain, nonatomic) UIView *playerIconView; // @synthesize playerIconView=_playerIconView;
@property(nonatomic) unsigned long long playerIconViewType; // @synthesize playerIconViewType=_playerIconViewType;
@property(retain, nonatomic) UIActivityIndicatorView *videoLoadingIndicator; // @synthesize videoLoadingIndicator=_videoLoadingIndicator;
@property(readonly, nonatomic) UIView *overlayChromesContainerView; // @synthesize overlayChromesContainerView=_overlayChromesContainerView;
@property(readonly, nonatomic) TFNSolidColorView *shadedOverlayColorView; // @synthesize shadedOverlayColorView=_shadedOverlayColorView;
@property(retain, nonatomic) UIView *shadedOverlayContainerView; // @synthesize shadedOverlayContainerView=_shadedOverlayContainerView;
@property(readonly, nonatomic) UIImageView *previewImageView; // @synthesize previewImageView=_previewImageView;
@property(readonly, nonatomic) TFNLongPressGestureRecognizer *longPressGestureRecognizer; // @synthesize longPressGestureRecognizer=_longPressGestureRecognizer;
@property(readonly, nonatomic) UITapGestureRecognizer *doubleTapGestureRecognizer; // @synthesize doubleTapGestureRecognizer=_doubleTapGestureRecognizer;
@property(readonly, nonatomic) UITapGestureRecognizer *tapGestureRecognizer; // @synthesize tapGestureRecognizer=_tapGestureRecognizer;
@property(retain, nonatomic) UIColor *dominantBackgroundColor; // @synthesize dominantBackgroundColor=_dominantBackgroundColor;
@property(nonatomic, getter=isPlayerIconViewHidden) _Bool playerIconViewHidden; // @synthesize playerIconViewHidden=_playerIconViewHidden;
@property(nonatomic) double playButtonOffsetAsFractionOfViewHeight; // @synthesize playButtonOffsetAsFractionOfViewHeight=_playButtonOffsetAsFractionOfViewHeight;
@property(nonatomic) _Bool shouldAlwaysHideOverlay; // @synthesize shouldAlwaysHideOverlay=_shouldAlwaysHideOverlay;
@property(nonatomic, getter=isBorderHidden) _Bool borderHidden; // @synthesize borderHidden=_borderHidden;
@property(retain, nonatomic) TFNTwitterAccount *account; // @synthesize account=_account;
@property(copy, nonatomic) TAVScribeContext *tavScribeContext; // @synthesize tavScribeContext=_tavScribeContext;
@property(retain, nonatomic) id <T1InlineMediaViewModel> viewModel; // @synthesize viewModel=_viewModel;
@property(nonatomic) _Bool allowUnlimitedVideoBitrate; // @synthesize allowUnlimitedVideoBitrate=_allowUnlimitedVideoBitrate;
@property(nonatomic) long long videoLoopingBehavior; // @synthesize videoLoopingBehavior=_videoLoopingBehavior;
@property(nonatomic, getter=isVideoAspectFitGravityPreferred) _Bool videoAspectFitGravityPreferred; // @synthesize videoAspectFitGravityPreferred=_videoAspectFitGravityPreferred;
@property(nonatomic) _Bool alwaysHideAudioToggleButton; // @synthesize alwaysHideAudioToggleButton=_alwaysHideAudioToggleButton;
@property(nonatomic) _Bool alwaysPlayAudio; // @synthesize alwaysPlayAudio=_alwaysPlayAudio;
@property(nonatomic, getter=isViewCountEnabled) _Bool viewCountEnabled; // @synthesize viewCountEnabled=_viewCountEnabled;
@property(readonly, nonatomic) TAVPlayerView *playerView; // @synthesize playerView=_playerView;
@property(nonatomic) unsigned long long videoState; // @synthesize videoState=_videoState;
@property(nonatomic) unsigned long long imageState; // @synthesize imageState=_imageState;
@property(nonatomic) __weak id <T1InlineMediaViewPrerollDelegate> prerollDelegate; // @synthesize prerollDelegate=_prerollDelegate;
@property(nonatomic) __weak id <T1InlineMediaViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UIImage *tip_fetchedImage;
- (void)_t1_longPressAction;
- (void)_t1_doubleTapAction;
- (void)_t1_tapAction;
- (void)_t1_initializeSkipCountdownLabel;
@property(nonatomic) _Bool skipCountdownLabelHidden;
- (void)setBackgroundColor:(id)arg1;
- (void)restartAnimationsIfNeeded;
- (void)cleanup;
- (void)videoCaptionsView:(id)arg1 legibleMediaSelectionOption:(id)arg2;
- (void)videoCaptionsView:(id)arg1 enableCaptions:(_Bool)arg2;
- (void)_t1_initializeCaptionsViewIfNeeded;
- (id)_t1_tavPlayerViewConfigurationForItem:(id)arg1;
- (void)_t1_handleAdPrerollTransitionForState:(id)arg1;
- (_Bool)_t1_prerollAdHasCTAForState:(id)arg1;
- (void)_t1_prerollDidEnd;
- (void)_t1_updateWithPlaybackState:(id)arg1;
- (void)_t1_updatePlayButtonPreference;
- (void)_t1_updateGifPlayerIconWithPlaybackState:(id)arg1;
- (void)_t1_updatePlayerViewWithDetachedPlayerState:(id)arg1;
- (void)pause;
- (void)play;
- (void)observerDidAttachToPlayer:(id)arg1;
- (void)observerDidDetachFromPlayer:(id)arg1;
- (void)player:(id)arg1 didUpdatePlaybackState:(id)arg2;
- (_Bool)playerIsDetached;
- (void)_t1_beginPresentingPlayer:(id)arg1 playerSessionProducer:(id)arg2;
- (void)t1_layoutBrandPill:(id)arg1;
- (void)_layoutPlayerIconView;
- (void)_layoutSkipCountDownLabel;
- (void)_layoutSkipAdButton;
- (void)layoutSubviews;
- (void)dealloc;
- (_Bool)_t1_shouldRenderAdByAdvertiserNameWithPlaylistItem:(id)arg1;
- (void)_t1_updateSkipCountDownLabelWithCurrentPlaybackTime:(CDStruct_1b6d18a9)arg1 duration:(CDStruct_1b6d18a9)arg2 skipAdDurationRequirement:(CDStruct_1b6d18a9)arg3;
- (void)_t1_updateAdPillViewWithCurrentPlaybackTime:(CDStruct_1b6d18a9)arg1 adDuration:(CDStruct_1b6d18a9)arg2 playbackState:(id)arg3;
- (void)_t1_updateViewCountVisibility;
@property(nonatomic) CDStruct_1b6d18a9 pillViewTime;
- (id)pillView;
- (void)_t1_showSkipButtonWithCurrentPlaybackTime:(CDStruct_1b6d18a9)arg1 duration:(CDStruct_1b6d18a9)arg2;
- (void)_t1_initializeSkipAdButton;
@property(nonatomic) _Bool skipAdButtonHidden;
- (void)setMixedMediaVODChromeComponents;
- (void)_t1_updateButtonImage;
- (id)_t1_buttonImageHighlighted:(_Bool)arg1 size:(struct CGSize)arg2;
- (void)_t1_handleTap:(id)arg1 event:(id)arg2;
- (void)_t1_initializeContentGuardWithThreshold:(CDStruct_1b6d18a9)arg1;
- (void)_t1_initializeWatchAgainButtonIfNecessary;
@property(readonly, nonatomic) UIButton *playButton; // @synthesize playButton=_playButton;
@property(readonly, nonatomic) UIButton *overlayButton;
- (void)_t1_showPlay:(_Bool)arg1 showWatchAgain:(_Bool)arg2 animated:(_Bool)arg3;
@property(nonatomic, getter=isShowingOverlay) _Bool showingOverlay;
- (void)_t1_hidePillViewAnimated;
- (void)_t1_startTimePillFadeTimer;
- (void)_t1_setAudioPlaybackEnabled:(_Bool)arg1;
- (_Bool)_t1_shouldPlayAudio;
- (void)_t1_handleAudioToggleTap:(id)arg1;
- (void)_t1_setAudioToggleVisible:(_Bool)arg1;
- (void)_t1_updateAudioToggleIconForMuted:(_Bool)arg1;
- (void)_t1_updateAudioToggleButtonForMediaWithAudio:(_Bool)arg1 isMuted:(_Bool)arg2;
- (void)_t1_updateAudioPlaybackForVolumeChangeWithOldVolume:(float)arg1 newVolume:(float)arg2;
- (void)_t1_updateAudioForState:(id)arg1;
- (void)_t1_updatePreviewVisibility;
- (void)_t1_videoBitrateManagerDidUpdatePreferredBitrate:(id)arg1;
@property(readonly, nonatomic) T1VideoBitRateManager *videoBitrateManager; // @synthesize videoBitrateManager=_videoBitrateManager;
- (_Bool)areCaptionsEnabled;
- (_Bool)isPlaybackSourceLive;
- (_Bool)_isAutoplaying;
- (void)_t1_hideDeadVideoErrorView;
- (void)_t1_showDeadVideoErrorViewWithMessage:(id)arg1;
- (void)detachPlayerViewAnimated:(_Bool)arg1;
- (void)attachPlayerViewAnimated:(_Bool)arg1;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)setContentMode:(long long)arg1;
@property(readonly, nonatomic) UIImage *previewImage;
- (id)tip_fetchHelper;
- (void)setTip_fetchHelper:(id)arg1;
- (void)setTip_fetchHelperIfUsedAsImageView:(id)arg1;
- (void)addDoubleTapHandling;
- (id)init;
@property(readonly, nonatomic) UIView *autoplayableView;
- (void)willResignAsActiveAutoplayableWithManager:(id)arg1;
- (void)didBecomeActiveAutoplayableWithManager:(id)arg1;
- (id)_t1_getPlayerFromCache;
- (id)_t1_attachPlayerFromCache;
- (void)attachPlayer;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(retain, nonatomic) TIPImageContainer *tip_fetchedImageContainer;

@end

