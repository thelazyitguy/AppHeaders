//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSData, NSMapTable, NSMutableArray, NSMutableDictionary, NSString, NSTimer, NSUserDefaults, SBDAppInfo, SBDCommandProcessor, SBDReachability, SBDReconnectionConfiguration, SBDReconnectionTask, SBDTimerBoard, SBDUser, SBDWebSocketClient;
@protocol OS_dispatch_queue;

@interface SBDMain : NSObject
{
    _Bool _connectForForeground;
    _Bool _disconnectBeforeConnect;
    _Bool _sessionOpened;
    _Bool _hostReachabilityOnOff;
    _Bool _connecting;
    _Bool _reconnecting;
    _Bool _isReconnectingOnError;
    _Bool _isAppBackground;
    int _URLSessionDidFinishEventsForBackgroundURLSession;
    long long _logLevel;
    NSMapTable *_connectionDelegatesDictionary;
    NSMapTable *_channelDelegatesDictionary;
    NSMapTable *_userEventDelegatesDictionary;
    CDUnknownBlockType _backgroundSessionCompletionHandler;
    NSMutableArray *_backgroundTaskBlock;
    NSString *_applicationId;
    SBDUser *_currentUser;
    NSMutableDictionary *_extensionVersions;
    NSObject<OS_dispatch_queue> *_connectionDelegatesAccessQueue;
    NSObject<OS_dispatch_queue> *_channelDelegatesAccessQueue;
    NSObject<OS_dispatch_queue> *_userEventDelegatesAccessQueue;
    NSObject<OS_dispatch_queue> *_localNetworkDelegateAccessQueue;
    SBDWebSocketClient *_webSocketClient;
    SBDCommandProcessor *_commandProcessor;
    SBDTimerBoard *_reconnectionTimerBoard;
    SBDReconnectionConfiguration *_reconnectionConfiguration;
    SBDReconnectionTask *_reconnectionTask;
    SBDTimerBoard *_loginTimerBoard;
    NSTimer *_typingStatusTimer;
    NSData *_pushToken;
    NSData *_pushKitToken;
    NSObject<OS_dispatch_queue> *_completionHandlerAndDelegatesQueue;
    NSObject<OS_dispatch_queue> *_sendCommandDelayQueue;
    SBDReachability *_hostReachability;
    long long _netStatus;
    NSMutableArray *_connectionCompletionHandlers;
    NSObject<OS_dispatch_queue> *_connectionCompletionHandlerQueue;
    long long _lastConnectedAt;
    NSString *_debugKey;
    NSObject<OS_dispatch_queue> *_applicationStateQueue;
    NSMapTable *_localNetworkDelegatesDictionary;
    NSMutableDictionary *_unreadMessageCountSubscription;
    long long _subscribedTotalUnreadMessageCount;
    long long _unreadMessageCountSubscriptionUpdatedTimestamp;
    NSObject<OS_dispatch_queue> *_unreadMessageCountSubscriptionQueue;
    long long _maxUnreadCntOnSuperGroup;
    NSString *_host;
    NSString *_apiHost;
    NSString *_wsHost;
    SBDAppInfo *_appInfo;
    NSString *_appGroup;
    NSUserDefaults *_sharedUserDefaults;
}

+ (id)ekey;
+ (id)getAppGroup;
+ (void)setAppGroup:(id)arg1;
+ (id)getExtraDataList;
+ (id)getAppInfo;
+ (id)getSBUserAgent;
+ (void)addExtension:(id)arg1 version:(id)arg2;
+ (void)getEmojiCategory:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getEmoji:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getAllEmojis:(CDUnknownBlockType)arg1;
+ (void)getMyGroupChannelChangeLogsWithToken:(id)arg1 byTimestamp:(long long)arg2 params:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (void)getMyGroupChannelChangeLogsByTimestamp:(long long)arg1 params:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)getMyGroupChannelChangeLogsByTimestamp:(long long)arg1 customTypes:(id)arg2 includeEmptyChannel:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (void)getMyGroupChannelChangeLogsByTimestamp:(long long)arg1 customTypes:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)getMyGroupChannelChangeLogsByToken:(id)arg1 params:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)getMyGroupChannelChangeLogsByToken:(id)arg1 customTypes:(id)arg2 includeEmptyChannel:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (void)getMyGroupChannelChangeLogsByToken:(id)arg1 customTypes:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)markAsDeliveredWithRemoteNotificationPayload:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)markAsDeliveredWithChannelUrl:(id)arg1;
+ (long long)getSubscribedCustomTypeUnreadMessageCountWithCustomType:(id)arg1;
+ (long long)getSubscribedCustomTypeTotalUnreadMessageCount;
+ (long long)getSubscribedTotalUnreadMessageCount;
+ (void)getUnreadItemCountWithKey:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getTotalUnreadMessageCountWithParams:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getTotalUnreadMessageCountWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)getTotalUnreadChannelCountWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)getChannelCountWithMemberStateFilter:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)markAsReadWithChannelUrls:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)markAsReadAllWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)getFriendChangeLogsByToken:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)uploadFriendDiscoveries:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)deleteFriendsWithDiscoveries:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)deleteFriendWithDiscovery:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)deleteFriendsWithUserIds:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)deleteFriendWithUserId:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)addFriendsWithUserIds:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)createFriendListQuery;
+ (id)userEventDelegateForIdentifier:(id)arg1;
+ (void)getChannelInvitationPreferenceAutoAcceptWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)setChannelInvitationPreferenceAutoAccept:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)getWsHost;
+ (id)getApiHost;
+ (void)setNetworkAwarenessReconnection:(_Bool)arg1;
+ (id)getMimeType:(id)arg1;
+ (_Bool)reconnect;
+ (void)setConnecting:(_Bool)arg1;
+ (void)getPushSoundWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)setPushSound:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getPushTemplateWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)setPushTemplateWithName:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getPushTriggerOptionWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)setPushTriggerOption:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)getSnoozePeriod:(CDUnknownBlockType)arg1;
+ (void)setSnoozePeriodEnable:(_Bool)arg1 startTimestamp:(long long)arg2 endTimestamp:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (void)getDoNotDisturbWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)setDoNotDisturbWithEnable:(_Bool)arg1 startHour:(int)arg2 startMin:(int)arg3 endHour:(int)arg4 endMin:(int)arg5 timezone:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;
+ (void)updateCurrentUserInfoWithPreferredLanguages:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)unblockUser:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)unblockUserId:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)blockUser:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)blockUserId:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)createBlockedUserListQuery;
+ (id)createUserListQueryWithUserIds:(id)arg1;
+ (void)getMyPushTokensByToken:(id)arg1 pushTokenType:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)unregisterAllPushKitTokenWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)unregisterPushKitToken:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)registerDevicePushKitToken:(id)arg1 unique:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)getPendingPushKitToken;
+ (void)unregisterAllPushTokenWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)unregisterPushToken:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)registerPushToken:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)registerDevicePushToken:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)registerDevicePushToken:(id)arg1 unique:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)getPendingPushToken;
+ (void)updateCurrentUserInfoWithNickname:(id)arg1 profileImageFilePath:(id)arg2 progressHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (void)updateCurrentUserInfoWithNickname:(id)arg1 profileImage:(id)arg2 profileImageFileName:(id)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;
+ (void)updateCurrentUserInfoWithNickname:(id)arg1 profileImage:(id)arg2 progressHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (void)updateCurrentUserInfoWithNickname:(id)arg1 profileImage:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)updateCurrentUserInfoWithNickname:(id)arg1 profileUrl:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)typingStatusTimeout:(id)arg1;
+ (id)createApplicationUserListQuery;
+ (id)createAllUserListQuery;
+ (long long)getLastConnectedAt;
+ (id)getCurrentUser;
+ (void)logout;
+ (void)disconnectAndLogout:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)disconnectWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)connectForeground;
+ (void)disconnectInBackground;
+ (void)handleEnteredForeground:(id)arg1;
+ (void)handleEnteredBackground:(id)arg1;
+ (void)reachabilityChanged:(id)arg1;
+ (void)updateInterfaceWithReachability:(id)arg1;
+ (void)connectWebSocketServerReconnect:(_Bool)arg1 userId:(id)arg2 accessToken:(id)arg3 sessionKey:(id)arg4 fromOnError:(_Bool)arg5 completionHandler:(CDUnknownBlockType)arg6;
+ (void)connectWithUserId:(id)arg1 accessToken:(id)arg2 apiHost:(id)arg3 wsHost:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
+ (void)connectWithUserId:(id)arg1 accessToken:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)connectWithUserId:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)processAllConnectionCompletionHandlersWithError:(id)arg1;
+ (void)removeAllConnectionCompletionHandlers;
+ (void)addConnectionCompletionHandler:(CDUnknownBlockType)arg1 userId:(id)arg2;
+ (void)removeAllUserEventDelegates;
+ (void)removeUserEventDelegateForIdentifier:(id)arg1;
+ (void)addUserEventDelegate:(id)arg1 identifier:(id)arg2;
+ (void)removeAllLocalNetworkDelegates;
+ (void)removeLocalNetworkDelegateForIdentifier:(id)arg1;
+ (void)addLocalNetworkDelegate:(id)arg1 identifier:(id)arg2;
+ (id)channelDelegateForIdentifier:(id)arg1;
+ (void)removeAllChannelDelegates;
+ (void)removeChannelDelegateForIdentifier:(id)arg1;
+ (void)addChannelDelegate:(id)arg1 identifier:(id)arg2;
+ (id)connectionDelegateForIdentifier:(id)arg1;
+ (void)removeAllConnectionDelegates;
+ (void)removeConnectionDelegateForIdentifier:(id)arg1;
+ (void)addConnectionDelegate:(id)arg1 identifier:(id)arg2;
+ (void)performSendCommandDelayQueueBlock:(CDUnknownBlockType)arg1;
+ (void)performCompletionHandlerDelegateQueueBlock:(CDUnknownBlockType)arg1;
+ (void)setCompletionHandlerDelegateQueue:(id)arg1;
+ (long long)getMaxUnreadCntOnSuperGroup;
+ (unsigned long long)getConnectState;
+ (void)logWithLevel:(long long)arg1 format:(id)arg2;
+ (_Bool)validateCompletionHandler:(id)arg1;
+ (void)setLogLevel:(long long)arg1;
+ (void)setSharedContainerIdentifier:(id)arg1;
+ (_Bool)initWithApplicationId:(id)arg1;
+ (_Bool)isInitialized;
+ (id)sharedInstance;
+ (_Bool)getDebugMode;
+ (long long)getLogLevel;
+ (id)getApplicationId;
+ (id)getSDKVersion;
@property(retain) NSUserDefaults *sharedUserDefaults; // @synthesize sharedUserDefaults=_sharedUserDefaults;
@property(retain) NSString *appGroup; // @synthesize appGroup=_appGroup;
@property(retain) SBDAppInfo *appInfo; // @synthesize appInfo=_appInfo;
@property(retain) NSString *wsHost; // @synthesize wsHost=_wsHost;
@property(retain) NSString *apiHost; // @synthesize apiHost=_apiHost;
@property(retain) NSString *host; // @synthesize host=_host;
@property long long maxUnreadCntOnSuperGroup; // @synthesize maxUnreadCntOnSuperGroup=_maxUnreadCntOnSuperGroup;
@property(retain) NSObject<OS_dispatch_queue> *unreadMessageCountSubscriptionQueue; // @synthesize unreadMessageCountSubscriptionQueue=_unreadMessageCountSubscriptionQueue;
@property long long unreadMessageCountSubscriptionUpdatedTimestamp; // @synthesize unreadMessageCountSubscriptionUpdatedTimestamp=_unreadMessageCountSubscriptionUpdatedTimestamp;
@property long long subscribedTotalUnreadMessageCount; // @synthesize subscribedTotalUnreadMessageCount=_subscribedTotalUnreadMessageCount;
@property(retain) NSMutableDictionary *unreadMessageCountSubscription; // @synthesize unreadMessageCountSubscription=_unreadMessageCountSubscription;
@property(retain, nonatomic) NSMapTable *localNetworkDelegatesDictionary; // @synthesize localNetworkDelegatesDictionary=_localNetworkDelegatesDictionary;
@property(retain) NSObject<OS_dispatch_queue> *applicationStateQueue; // @synthesize applicationStateQueue=_applicationStateQueue;
@property _Bool isAppBackground; // @synthesize isAppBackground=_isAppBackground;
@property _Bool isReconnectingOnError; // @synthesize isReconnectingOnError=_isReconnectingOnError;
@property _Bool reconnecting; // @synthesize reconnecting=_reconnecting;
@property _Bool connecting; // @synthesize connecting=_connecting;
@property(retain) NSString *debugKey; // @synthesize debugKey=_debugKey;
@property long long lastConnectedAt; // @synthesize lastConnectedAt=_lastConnectedAt;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *connectionCompletionHandlerQueue; // @synthesize connectionCompletionHandlerQueue=_connectionCompletionHandlerQueue;
@property(retain) NSMutableArray *connectionCompletionHandlers; // @synthesize connectionCompletionHandlers=_connectionCompletionHandlers;
@property long long netStatus; // @synthesize netStatus=_netStatus;
@property(retain, nonatomic) SBDReachability *hostReachability; // @synthesize hostReachability=_hostReachability;
@property _Bool hostReachabilityOnOff; // @synthesize hostReachabilityOnOff=_hostReachabilityOnOff;
@property _Bool sessionOpened; // @synthesize sessionOpened=_sessionOpened;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *sendCommandDelayQueue; // @synthesize sendCommandDelayQueue=_sendCommandDelayQueue;
@property(retain) NSObject<OS_dispatch_queue> *completionHandlerAndDelegatesQueue; // @synthesize completionHandlerAndDelegatesQueue=_completionHandlerAndDelegatesQueue;
@property(retain, nonatomic) NSData *pushKitToken; // @synthesize pushKitToken=_pushKitToken;
@property(retain, nonatomic) NSData *pushToken; // @synthesize pushToken=_pushToken;
@property(retain, nonatomic) NSTimer *typingStatusTimer; // @synthesize typingStatusTimer=_typingStatusTimer;
@property _Bool disconnectBeforeConnect; // @synthesize disconnectBeforeConnect=_disconnectBeforeConnect;
@property _Bool connectForForeground; // @synthesize connectForForeground=_connectForForeground;
@property(retain, nonatomic) SBDTimerBoard *loginTimerBoard; // @synthesize loginTimerBoard=_loginTimerBoard;
@property(retain) SBDReconnectionTask *reconnectionTask; // @synthesize reconnectionTask=_reconnectionTask;
@property(retain) SBDReconnectionConfiguration *reconnectionConfiguration; // @synthesize reconnectionConfiguration=_reconnectionConfiguration;
@property(retain, nonatomic) SBDTimerBoard *reconnectionTimerBoard; // @synthesize reconnectionTimerBoard=_reconnectionTimerBoard;
@property(retain, nonatomic) SBDCommandProcessor *commandProcessor; // @synthesize commandProcessor=_commandProcessor;
@property(retain, nonatomic) SBDWebSocketClient *webSocketClient; // @synthesize webSocketClient=_webSocketClient;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *localNetworkDelegateAccessQueue; // @synthesize localNetworkDelegateAccessQueue=_localNetworkDelegateAccessQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *userEventDelegatesAccessQueue; // @synthesize userEventDelegatesAccessQueue=_userEventDelegatesAccessQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *channelDelegatesAccessQueue; // @synthesize channelDelegatesAccessQueue=_channelDelegatesAccessQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *connectionDelegatesAccessQueue; // @synthesize connectionDelegatesAccessQueue=_connectionDelegatesAccessQueue;
@property(retain, nonatomic) NSMutableDictionary *extensionVersions; // @synthesize extensionVersions=_extensionVersions;
@property(retain, nonatomic) SBDUser *currentUser; // @synthesize currentUser=_currentUser;
@property(retain, nonatomic) NSString *applicationId; // @synthesize applicationId=_applicationId;
@property int URLSessionDidFinishEventsForBackgroundURLSession; // @synthesize URLSessionDidFinishEventsForBackgroundURLSession=_URLSessionDidFinishEventsForBackgroundURLSession;
@property(retain, nonatomic) NSMutableArray *backgroundTaskBlock; // @synthesize backgroundTaskBlock=_backgroundTaskBlock;
@property(copy, nonatomic) CDUnknownBlockType backgroundSessionCompletionHandler; // @synthesize backgroundSessionCompletionHandler=_backgroundSessionCompletionHandler;
@property(retain, nonatomic) NSMapTable *userEventDelegatesDictionary; // @synthesize userEventDelegatesDictionary=_userEventDelegatesDictionary;
@property(retain, nonatomic) NSMapTable *channelDelegatesDictionary; // @synthesize channelDelegatesDictionary=_channelDelegatesDictionary;
@property(retain, nonatomic) NSMapTable *connectionDelegatesDictionary; // @synthesize connectionDelegatesDictionary=_connectionDelegatesDictionary;
@property long long logLevel; // @synthesize logLevel=_logLevel;
- (void).cxx_destruct;
- (void)updateSubscribedCustomTypeUnreadMessageCountFromCommand:(id)arg1;
- (void)resetUnreadMessageCountSubscription;
- (void)handleEnterForeground;
- (void)processLogin:(id)arg1 reconnect:(_Bool)arg2;
- (void)tryToReconnect:(id)arg1;
- (void)reconnectWithTask:(id)arg1 fromError:(_Bool)arg2;
- (void)waitConnectTimeout:(id)arg1;
- (id)init;

@end

