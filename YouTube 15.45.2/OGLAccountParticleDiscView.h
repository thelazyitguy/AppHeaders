//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIControl.h>

#import <Module_Framework/OGLAccountParticleDisc-Protocol.h>

@class ASMCircleImageView, NSString, OGLAccountMenuAccountRestrictions, OGLBadgeService, OGLBadgeView, UIView;
@protocol OGLAccount, OGLAccountParticleDiscBadgingDelegate, OGLAccountService, OGLBadgeSource, OGLCriticalAlertService, OGLProfileSource, OGLRingView, OGLUILogger;

@interface OGLAccountParticleDiscView : UIControl <OGLAccountParticleDisc>
{
    _Bool _supportsPremiumRings;
    _Bool _autoUpdate;
    _Bool _autoRingThicknessChanging;
    _Bool _disabledProfileImage;
    _Bool _ringThicknessHasChanged;
    _Bool _shouldStopAnimations;
    _Bool _didLogAnimation;
    _Bool _shouldAvatarResize;
    _Bool _isTopRightDisc;
    _Bool _shouldUpdateProfilePicture;
    id <OGLAccount> _account;
    id <OGLProfileSource> _profileSource;
    long long _avatarDisplay;
    id <OGLBadgeSource> _badgeSource;
    id <OGLAccountService> _accountService;
    unsigned long long _badgeSupportLevel;
    CDUnknownBlockType _ringViewForAccount;
    UIView<OGLRingView> *_ringView;
    id <OGLAccountParticleDiscBadgingDelegate> _badgingDelegate;
    OGLAccountMenuAccountRestrictions *_accountRestrictions;
    id <OGLCriticalAlertService> _criticalAlertService;
    ASMCircleImageView *_profileImageView;
    OGLBadgeView *_badgeView;
    OGLBadgeService *_badgeService;
    id <OGLUILogger> _uiLogger;
    long long _animationType;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool shouldUpdateProfilePicture; // @synthesize shouldUpdateProfilePicture=_shouldUpdateProfilePicture;
@property(nonatomic) long long animationType; // @synthesize animationType=_animationType;
@property(retain, nonatomic) id <OGLUILogger> uiLogger; // @synthesize uiLogger=_uiLogger;
@property(nonatomic) _Bool isTopRightDisc; // @synthesize isTopRightDisc=_isTopRightDisc;
@property(nonatomic) _Bool shouldAvatarResize; // @synthesize shouldAvatarResize=_shouldAvatarResize;
@property(nonatomic) _Bool didLogAnimation; // @synthesize didLogAnimation=_didLogAnimation;
@property(nonatomic) _Bool shouldStopAnimations; // @synthesize shouldStopAnimations=_shouldStopAnimations;
@property(retain, nonatomic) OGLBadgeService *badgeService; // @synthesize badgeService=_badgeService;
@property(retain, nonatomic) OGLBadgeView *badgeView; // @synthesize badgeView=_badgeView;
@property(nonatomic) _Bool ringThicknessHasChanged; // @synthesize ringThicknessHasChanged=_ringThicknessHasChanged;
@property(retain, nonatomic) ASMCircleImageView *profileImageView; // @synthesize profileImageView=_profileImageView;
@property(nonatomic) __weak id <OGLCriticalAlertService> criticalAlertService; // @synthesize criticalAlertService=_criticalAlertService;
@property(nonatomic) _Bool disabledProfileImage; // @synthesize disabledProfileImage=_disabledProfileImage;
@property(nonatomic, getter=isAutoRingThicknessChanging) _Bool autoRingThicknessChanging; // @synthesize autoRingThicknessChanging=_autoRingThicknessChanging;
@property(retain, nonatomic) OGLAccountMenuAccountRestrictions *accountRestrictions; // @synthesize accountRestrictions=_accountRestrictions;
@property(nonatomic) _Bool autoUpdate; // @synthesize autoUpdate=_autoUpdate;
@property(nonatomic) __weak id <OGLAccountParticleDiscBadgingDelegate> badgingDelegate; // @synthesize badgingDelegate=_badgingDelegate;
@property(retain, nonatomic) UIView<OGLRingView> *ringView; // @synthesize ringView=_ringView;
@property(copy, nonatomic) CDUnknownBlockType ringViewForAccount; // @synthesize ringViewForAccount=_ringViewForAccount;
@property(nonatomic) unsigned long long badgeSupportLevel; // @synthesize badgeSupportLevel=_badgeSupportLevel;
@property(retain, nonatomic) id <OGLAccountService> accountService; // @synthesize accountService=_accountService;
@property(nonatomic) __weak id <OGLBadgeSource> badgeSource; // @synthesize badgeSource=_badgeSource;
@property(nonatomic) long long avatarDisplay; // @synthesize avatarDisplay=_avatarDisplay;
@property(nonatomic) _Bool supportsPremiumRings; // @synthesize supportsPremiumRings=_supportsPremiumRings;
@property(retain, nonatomic) id <OGLProfileSource> profileSource; // @synthesize profileSource=_profileSource;
@property(retain, nonatomic) id <OGLAccount> account; // @synthesize account=_account;
- (void)applyTheme;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)setFrame:(struct CGRect)arg1;
- (_Bool)animating;
- (void)criticalAlertsDidUpdate:(id)arg1;
- (void)updateProfileImage;
- (void)badgeDidUpdate:(id)arg1;
- (void)profileDidUpdate:(id)arg1;
- (void)reauthDidUpdate:(id)arg1;
- (void)privacyStateDidChange:(id)arg1;
- (id)discAnimationViewMetadataWithType:(int)arg1;
- (id)badgeMetadataWithContent:(id)arg1;
- (void)updateBadgeSize;
- (void)updateToBadge:(id)arg1 forAccount:(id)arg2;
- (void)reloadBadge;
- (id)createG1RingView;
- (void)updatePremiumRingIfNeeded;
- (void)handleUpdateRingAsyncActionWithAccount:(id)arg1 ringView:(id)arg2;
- (void)updateRingView;
- (void)startCriticalAlertAnimation;
- (void)startFauxbakeAnimation;
- (struct CGSize)intrinsicContentSize;
- (_Bool)incognitoMode;
@property(readonly, nonatomic) NSString *badgeAccessibilityLabel;
@property(readonly, nonatomic) _Bool useThickerRing;
@property(readonly, nonatomic) _Bool allowBadges;
@property(readonly, nonatomic, getter=isPremiumRingEnabled) _Bool premiumRingEnabled;
- (struct CGSize)ringSize;
@property(readonly, nonatomic) struct CGSize avatarSize;
- (void)traitCollectionDidChange:(id)arg1;
- (void)triggerCallForAttentionAnimation;
- (double)avatarSideForDisplay:(long long)arg1;
- (double)contentWidth;
- (void)stopAnimations;
- (void)startAnimation:(long long)arg1;
- (void)updateAvatarAndDecorations;
- (void)updateWithAccount:(id)arg1 profileSource:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

