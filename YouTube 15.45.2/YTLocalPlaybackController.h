//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Module_Framework/YTAdsPlaybackCoordinatorDelegate-Protocol.h>
#import <Module_Framework/YTAudioSessionRouteChangeObserver-Protocol.h>
#import <Module_Framework/YTCorePlaybackController-Protocol.h>
#import <Module_Framework/YTPlaybackBackgroundTaskControllerDelegate-Protocol.h>
#import <Module_Framework/YTPlayerHeartbeatControllerDelegate-Protocol.h>
#import <Module_Framework/YTPlayerPIPControllerDelegate-Protocol.h>
#import <Module_Framework/YTPlayerVisibilityProvider-Protocol.h>
#import <Module_Framework/YTSingleVideoBackgroundabilityObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoBufferedMediaTimeObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoControllerDelegate-Protocol.h>
#import <Module_Framework/YTSingleVideoCurrentTimeObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoPlaybackRateObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoRawMediaStateObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoRawMediaStateSideEffectfulObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoSequencerDelegate-Protocol.h>
#import <Module_Framework/YTSystemNotificationsObserver-Protocol.h>
#import <Module_Framework/YTUpcomingPlayerTransitionControllerDelegate-Protocol.h>
#import <Module_Framework/YTVideoResolverDelegate-Protocol.h>

@class GIMMe, NSData, NSError, NSHashTable, NSMutableArray, NSString, YTAdInterrupt, YTCPN, YTPlaybackBackgroundTaskController, YTPlaybackConfig, YTPlaybackData, YTPlaybackLockScreenController, YTPlayerMacroState, YTPlayerPIPController, YTPlayerTransition, YTPlayerView, YTSingleVideoController, YTSingleVideoTime, YTUpcomingPlayerTransitionController, YTVSSControllerState, YTVideoResolver;
@protocol HAMClock, MLAudioSession, MLPlayerPool, MLViewportSizeProvider, YTAdsPlaybackCoordinator, YTBackgroundabilityPolicy, YTCorePlaybackControllerDelegate, YTGLSceneProtocol, YTPlaybackControllerUIDelegate, YTPlayerCallbackManager, YTPlayerHeartbeatController, YTPlayerHeartbeatEventCenter, YTPlayerOverlayFactory, YTPlayerViewControllerConfig, YTResponder, YTSingleVideoObservable, YTSingleVideoSequencer;

@interface YTLocalPlaybackController : NSObject <YTAdsPlaybackCoordinatorDelegate, YTAudioSessionRouteChangeObserver, YTPlaybackBackgroundTaskControllerDelegate, YTPlayerHeartbeatControllerDelegate, YTPlayerPIPControllerDelegate, YTPlayerVisibilityProvider, YTSingleVideoBackgroundabilityObserver, YTSingleVideoBufferedMediaTimeObserver, YTSingleVideoControllerDelegate, YTSingleVideoCurrentTimeObserver, YTSingleVideoPlaybackRateObserver, YTSingleVideoRawMediaStateObserver, YTSingleVideoRawMediaStateSideEffectfulObserver, YTSingleVideoSequencerDelegate, YTSystemNotificationsObserver, YTVideoResolverDelegate, YTUpcomingPlayerTransitionControllerDelegate, YTCorePlaybackController>
{
    id <YTCorePlaybackControllerDelegate> _delegate;
    id <YTSingleVideoSequencer> _videoSequencer;
    id <YTPlayerOverlayFactory> _overlayFactory;
    YTPlayerView *_playerView;
    id <YTAdsPlaybackCoordinator> _adsPlaybackCoordinator;
    id <YTPlayerHeartbeatController> _heartbeatController;
    id <MLPlayerPool> _playerPool;
    id <YTPlayerViewControllerConfig> _config;
    id <MLAudioSession> _audioSession;
    YTPlaybackLockScreenController *_lockScreenController;
    id <YTBackgroundabilityPolicy> _backgroundabilityPolicy;
    id <HAMClock> _clock;
    id <YTGLSceneProtocol> _GLScene;
    YTSingleVideoTime *_savedContentTime;
    NSString *_previousTrailerVideoID;
    YTSingleVideoTime *_previousTrailerVideoTime;
    YTVSSControllerState *_lastAdVSSState;
    YTAdInterrupt *_adInterrupt;
    YTPlaybackData *_adPlaybackData;
    _Bool _wasPlayingBeforeSuspend;
    _Bool _startPlaybackWhenAVideoIsActivated;
    int _playerViewLayout;
    _Bool _inlinePlaybackActive;
    _Bool _userAudioOnlyModeActive;
    _Bool _blackoutActive;
    _Bool _muted;
    _Bool _externalPlaybackAllowedByApp;
    NSString *_clipID;
    NSData *_accountLinkState;
    int _audioSessionTaskID;
    YTPlaybackBackgroundTaskController *_backgroundTaskController;
    YTVideoResolver *_activeVideoResolver;
    YTVideoResolver *_earlyFetchVideoResolver;
    NSMutableArray *_adPrebufferTransitionControllers;
    YTPlayerPIPController *_playerPIPController;
    NSHashTable *_contentCuepointObservers;
    _Bool _finishedPostrollBreak;
    id <MLViewportSizeProvider> _viewportSizeProvider;
    _Bool _isLightweightPlayback;
    double _userIntentToPlayTime;
    _Bool _shouldDeferInteractionLogging;
    YTUpcomingPlayerTransitionController *_upcomingPlayerTransitionController;
    _Bool _VRModeActive;
    _Bool _activePlayback;
    _Bool _externalPlaybackActive;
    int _state;
    id <YTPlaybackControllerUIDelegate> _UIDelegate;
    YTPlaybackData *_contentPlaybackData;
    NSError *_error;
    id <YTPlayerCallbackManager> _callbackManager;
    id <YTResponder> _parentResponder;
    YTPlaybackConfig *_playbackConfig;
    YTPlayerTransition *_playerTransition;
    GIMMe *_gimme;
}

- (void).cxx_destruct;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(readonly, nonatomic) int state; // @synthesize state=_state;
@property(readonly, nonatomic) YTPlayerTransition *playerTransition; // @synthesize playerTransition=_playerTransition;
@property(readonly, nonatomic) YTPlaybackConfig *playbackConfig; // @synthesize playbackConfig=_playbackConfig;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
@property(readonly, nonatomic) id <YTPlayerCallbackManager> callbackManager; // @synthesize callbackManager=_callbackManager;
@property(readonly, nonatomic, getter=isExternalPlaybackActive) _Bool externalPlaybackActive; // @synthesize externalPlaybackActive=_externalPlaybackActive;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) YTPlaybackData *contentPlaybackData; // @synthesize contentPlaybackData=_contentPlaybackData;
@property(nonatomic, getter=isActivePlayback) _Bool activePlayback; // @synthesize activePlayback=_activePlayback;
@property(nonatomic, getter=isVRModeActive) _Bool VRModeActive; // @synthesize VRModeActive=_VRModeActive;
@property(nonatomic) __weak id <YTPlaybackControllerUIDelegate> UIDelegate; // @synthesize UIDelegate=_UIDelegate;
- (void)setMuted:(_Bool)arg1;
- (void)updateForceDisableBackgroundingForVideoController:(id)arg1;
@property(readonly, nonatomic) YTSingleVideoController *activeVideoController;
- (void)startLatencyActionWithLatencyLogger:(id)arg1 playerTransition:(id)arg2;
- (void)logPlaybackForInteractionLoggingWithPlayerTransition:(id)arg1 playerResponse:(id)arg2;
- (void)doneWithAudioSessionForPlayback;
- (void)activateAudioSessionForPlayback;
- (void)notifyLoggingControllersOfPlayerStatusChange;
- (_Bool)isAppInBackground;
- (void)updateLockScreenControllerSupportingControlCenter;
- (void)updateLockScreenController;
- (_Bool)isPlaybackBackgroundable;
- (void)storeCrashReportPlaybackData;
- (_Bool)isVideoFinished;
- (struct CGSize)playerSizeInPixels;
- (void)stopBackgroundPlayback;
- (void)setPlaybackControllerState:(int)arg1;
- (void)initializeOrFailForOfflineLiveStream;
- (void)failPlaybackDueToUnplayableVideo;
- (void)loadOrActivateContentSequence;
- (void)initializePlayback;
- (void)transitionToNextPlayback;
- (void)finishPlayback;
- (void)adPlaybackDidStop;
- (id)playerStatusWithPlayerViewLayout:(int)arg1;
- (id)playerStatus;
- (void)resetToState:(int)arg1;
@property(readonly, nonatomic) _Bool isDAIEnabledForCurrentPlayback;
- (id)adsPlaybackCoordinatorForNewPlayback;
- (void)startPlaybackWithVideoResolver:(id)arg1;
- (void)playbackDidFailWithError:(id)arg1;
- (void)failWithReset:(_Bool)arg1 error:(id)arg2;
- (void)failWithError:(id)arg1;
- (id)createPrebufferingControllerForAdInterrupt:(id)arg1 atMediaTime:(double)arg2;
- (id)videoController;
- (void)setBackgroundabilityPolicy:(id)arg1;
- (void)pictureInPictureController:(id)arg1 didRequestSeekToTime:(id)arg2;
- (void)pictureInPictureControllerDidRequestPlaybackResume:(id)arg1;
- (void)pictureInPictureControllerDidRequestPlaybackPause:(id)arg1;
- (void)pictureInPictureControllerDidStopPictureInPicture:(id)arg1;
- (void)pictureInPictureControllerDidStartPictureInPicture:(id)arg1;
- (void)playbackBackgroundTaskIsExpiring;
- (void)appWillTerminate:(id)arg1;
- (void)appDidBecomeActive:(id)arg1;
- (void)appWillEnterForeground:(id)arg1;
- (void)appDidEnterBackground:(id)arg1;
- (void)maybeStopBackgroundPlayback;
- (void)setLiveCaptionsVerticalRatio:(double)arg1;
- (int)playerViewLayout;
- (void)setPlayerViewLayout:(int)arg1;
- (_Bool)isInlinePlaybackActive;
- (void)setOverlayFactory:(id)arg1;
- (void)switchToInlinePlayback:(_Bool)arg1;
- (void)singleVideo:(id)arg1 bufferedMediaTimeDidChange:(double)arg2;
- (void)singleVideo:(id)arg1 playbackRateDidChange:(float)arg2;
- (void)singleVideo:(id)arg1 currentVideoTimeDidChange:(id)arg2;
- (void)singleVideo:(id)arg1 backgroundabilityDidChange:(_Bool)arg2;
- (void)potentiallyMutatedSingleVideo:(id)arg1 rawMediaStateDidChangeFromState:(long long)arg2 toState:(long long)arg3 mediaPlayerInitiatedSeek:(_Bool)arg4;
- (void)singleVideo:(id)arg1 rawMediaStateDidChangeFromState:(long long)arg2 toState:(long long)arg3 mediaPlayerInitiatedSeek:(_Bool)arg4;
- (void)setExternalPlaybackActive:(_Bool)arg1;
- (void)singleVideoController:(id)arg1 externalPlaybackActiveStateDidChange:(_Bool)arg2;
- (void)singleVideoController:(id)arg1 requiresStreamingDataRefreshAndStartPlayback:(_Bool)arg2;
- (void)singleVideoController:(id)arg1 requiresReloadAndStartPlayback:(_Bool)arg2;
- (void)loadAdSurveyWithAdInterrupt:(id)arg1;
- (id)transitionControllerForAdInterrupt:(id)arg1;
- (void)loadVideoAdWithAdInterrupt:(id)arg1;
- (void)adsPlaybackCoordinatorPrepareToPlayAd:(id)arg1;
- (void)cancelPrebufferingAdInterrupt:(id)arg1;
- (void)prebufferAdInterrupt:(id)arg1 forPlaybackAtCurrentVideoMediaTime:(double)arg2;
- (id)playerViewForAdsPlaybackCoordinator:(id)arg1;
- (void)haltCurrentAdPlaybackWithError:(id)arg1;
- (id)playbackContextForAd;
- (void)setMarkers:(id)arg1;
- (id)adsPlaybackCoordinator:(id)arg1 playAdInterrupt:(id)arg2;
- (void)adsPlaybackCoordinator:(id)arg1 didFinishBreakWithBreakType:(long long)arg2;
- (void)stopDAIAndReloadMediaPlayerForAdsPlaybackCoordinator:(id)arg1;
- (void)adsPlaybackCoordinator:(id)arg1 didFinishWithAd:(id)arg2 completeType:(long long)arg3;
@property(readonly, nonatomic) long long playerState;
- (void)resetWithCurrentPlayerTransitionAndPlaybackConfig:(id)arg1;
- (void)resetWithCurrentPlayerTransition;
- (void)heartbeatController:(id)arg1 licenseCheckingDidFailWithError:(id)arg2;
- (void)heartbeatController:(id)arg1 receivedUnplayableStatus:(id)arg2 forVideoID:(id)arg3;
- (void)heartbeatControllerWantsToStopLivePlayback:(id)arg1;
- (void)heartbeatControllerWantsToSuspendLivePlayback:(id)arg1;
- (void)heartbeatController:(id)arg1 wantsToTransitionFromLiveStreamToStreamEndpoint:(id)arg2;
- (void)heartbeatControllerWantsToReloadLiveStream:(id)arg1;
- (int)playerVisibility;
- (void)didSetNerdStatsEnabled:(_Bool)arg1;
@property(readonly, nonatomic, getter=isMDXActive) _Bool MDXActive;
@property(readonly, nonatomic) NSString *remoteScreenName;
@property(readonly, nonatomic) id <YTPlayerHeartbeatEventCenter> heartbeatEventCenter;
@property(nonatomic, getter=isExternalPlaybackAllowed) _Bool externalPlaybackAllowed;
- (void)setAccountLinkState:(id)arg1;
- (void)setClipID:(id)arg1;
- (void)setBlackoutActive:(_Bool)arg1;
- (void)setUserAudioOnlyModeActive:(_Bool)arg1;
- (void)setVolume:(float)arg1;
- (void)replay;
- (void)resumePlayback;
- (void)suspendPlayback;
- (id)playbackDebugData;
- (void)didPressSkipAd;
- (void)didPressCompanionAd;
- (_Bool)isPlayingContentInterstitial;
@property(readonly, nonatomic) _Bool isPlayingAdIntro;
@property(readonly, nonatomic) _Bool isPlayingAdSurvey;
@property(readonly, nonatomic) _Bool isPlayingAd;
- (_Bool)isPlayingContentVideo;
@property(readonly, nonatomic) _Bool isPlaybackFinished;
@property(readonly, nonatomic) _Bool currentVideoIsLocal;
@property(readonly, nonatomic) YTCPN *contentVideoCPN;
@property(readonly, nonatomic) YTSingleVideoTime *contentVideoCurrentTime;
- (double)adVideoMediaTime;
@property(readonly, nonatomic) YTSingleVideoTime *currentVideoTime;
- (void)resetToLoading;
- (void)reset;
- (id)currentVideoCPN;
@property(readonly, nonatomic) NSString *currentVideoID;
@property(readonly, nonatomic) NSString *contentVideoID;
@property(readonly, nonatomic) _Bool handlesAutoplayingInternally;
- (void)loadWithPlayerTransition:(id)arg1 playbackConfig:(id)arg2;
- (void)fetchPlayerDataAndResolveVideo;
- (void)loadWithPlayerTransition:(id)arg1 playbackConfig:(id)arg2 initialTime:(id)arg3;
- (void)startEarlyPlayerDataFetchWithPlayerTransition:(id)arg1 visibility:(int)arg2;
- (void)prepareToLoadWithPlayerTransition:(id)arg1 expectedLayout:(id)arg2;
- (void)outputRouteDidChange;
- (void)upcomingPlayerTransitionController:(id)arg1 resolvedPlaybackDataForGapless:(id)arg2;
- (id)viewportSizeProviderForUpcomingPlayerTransitionController:(id)arg1;
- (int)playerVisibilityForUpcomingPlayerTransitionController:(id)arg1;
- (_Bool)isExternalPlaybackActiveForUpcomingPlayerTransitionController:(id)arg1;
- (int)playerVisibilityForVideoResolver:(id)arg1;
- (_Bool)isExternalPlaybackActiveForVideoResolver:(id)arg1;
- (void)videoResolver:(id)arg1 didChangeFromState:(long long)arg2 toState:(long long)arg3;
- (void)resetWithCurrentVideoSequencer;
- (void)didTransitionToContentSequenceForVideoSequencer:(id)arg1;
- (void)videoSequencer:(id)arg1 willTransitionToNextContentSequenceWithPlayerTransition:(id)arg2 playbackConfig:(id)arg3 playbackData:(id)arg4;
- (void)didFinishContentSequenceForVideoSequencer:(id)arg1;
- (void)startObservingStateChangesForSingleVideo:(id)arg1;
- (void)updatePlaybackControllerStateForNewActiveVideoController;
- (void)videoSequencer:(id)arg1 didActivateVideoController:(id)arg2;
- (void)activateCuepointCollectionForVideoController:(id)arg1;
- (_Bool)shouldCuepointCollectionBeActivatedForVideoController:(id)arg1;
- (void)videoSequencer:(id)arg1 willActivateVideoController:(id)arg2;
- (id)playerStatusForVideoSequencer:(id)arg1;
- (id)currentAdForPlaybackTrackingController:(id)arg1;
- (id)contentPlayerMacroStateForPlaybackTrackingController:(id)arg1;
- (id)lastKnownAdPlayerMacroStateForPlaybackTrackingController:(id)arg1;
- (id)currentAd;
@property(readonly, nonatomic) YTPlayerMacroState *contentPlayerMacroState;
@property(readonly, nonatomic) YTPlayerMacroState *lastKnownAdPlayerMacroState;
- (void)setUpcomingPlayerTransition:(id)arg1 playbackConfig:(id)arg2;
- (void)removeContentCuepointObserver:(id)arg1;
- (void)addContentCuepointObserver:(id)arg1;
- (void)startAdOverlay;
- (id)acquireAdOverlay;
- (void)setPlaybackRate:(float)arg1;
- (void)pause;
- (void)play;
- (void)seekToEnd;
- (void)seekToProductionTime:(double)arg1;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)recordClientIssueFeedbackEvent;
- (void)recordSpeedyGAlert;
- (void)enableCaptionsIfAvailableWithUserAction:(_Bool)arg1;
- (void)setActiveCaptionTrack:(id)arg1;
- (void)setAudioFormatConstraint:(id)arg1;
- (void)setVideoFormatConstraint:(id)arg1;
@property(readonly, nonatomic) id <YTSingleVideoObservable> contentVideo;
@property(readonly, nonatomic) id <YTSingleVideoObservable> activeVideo;
- (void)dealloc;
- (id)initWithParentResponder:(id)arg1 overlayFactory:(id)arg2 playerView:(id)arg3 playbackControllerDelegate:(id)arg4 viewportSizeProvider:(id)arg5 lightweightPlayback:(_Bool)arg6;
- (id)initWithParentResponder:(id)arg1 overlayFactory:(id)arg2 playerView:(id)arg3 playbackControllerDelegate:(id)arg4 viewportSizeProvider:(id)arg5;
- (id)initForLightweightPlaybackWithParentResponder:(id)arg1 playerView:(id)arg2 playbackControllerDelegate:(id)arg3 viewportSizeProvider:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

