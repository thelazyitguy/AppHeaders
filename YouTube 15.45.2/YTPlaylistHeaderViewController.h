//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "MDXSessionManagerObserver-Protocol.h"
#import "YTColorObserver-Protocol.h"
#import "YTEditPlaylistControllerObserver-Protocol.h"
#import "YTLikeServiceObserver-Protocol.h"
#import "YTNotificationServiceObserver-Protocol.h"
#import "YTOfflinePlaylistControllerObserver-Protocol.h"
#import "YTOfflineRefreshServiceObserver-Protocol.h"
#import "YTOfflineVideoControllerObserver-Protocol.h"
#import "YTPlaylistHeaderViewDelegate-Protocol.h"
#import "YTPlaylistServiceObserver-Protocol.h"
#import "YTResponseViewController-Protocol.h"
#import "YTThumbnailControllerDelegate-Protocol.h"
#import "YTVariableHeightHeaderViewControllerAttachedHeader-Protocol.h"

@class GIMMe, MDXSessionManager, NSString, UIColor, YTIButtonRenderer, YTIHintRenderer, YTIPlaylistHeaderRenderer, YTIToggleButtonRenderer, YTThumbnailController;
@protocol YTColorStyle, YTResponder, YTServices;

@interface YTPlaylistHeaderViewController : UIViewController <MDXSessionManagerObserver, YTColorObserver, YTEditPlaylistControllerObserver, YTNotificationServiceObserver, YTLikeServiceObserver, YTOfflineRefreshServiceObserver, YTOfflineVideoControllerObserver, YTOfflinePlaylistControllerObserver, YTPlaylistHeaderViewDelegate, YTPlaylistServiceObserver, YTThumbnailControllerDelegate, YTVariableHeightHeaderViewControllerAttachedHeader, YTResponseViewController>
{
    id <YTServices> _services;
    id <YTColorStyle> _colorStyle;
    MDXSessionManager *_sessionManager;
    YTIHintRenderer *_hintRenderer;
    YTIPlaylistHeaderRenderer *_renderer;
    YTThumbnailController *_headerBannerThumbnailController;
    YTIToggleButtonRenderer *_notificationToggleRenderer;
    YTIButtonRenderer *_primaryButtonRenderer;
    YTIToggleButtonRenderer *_secondaryButtonRenderer;
    UIColor *_themeColor;
    UIColor *_titleColor;
    NSString *_downloadingVideoID;
    unsigned long long _completedVideos;
    unsigned long long _totalVideos;
    long long _offlineVideoValidityInSeconds;
    _Bool _isViewInitialized;
    _Bool _didReportPlayAllButtonVisibility;
    _Bool _didReportShuffleButtonVisibility;
    _Bool _saved;
    _Bool _secondaryButtonToggled;
    id <YTResponder> _parentResponder;
    GIMMe *_gimme;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool secondaryButtonToggled; // @synthesize secondaryButtonToggled=_secondaryButtonToggled;
@property(nonatomic) _Bool saved; // @synthesize saved=_saved;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
- (void)maybeReportShuffleButtonVisibility;
- (void)maybeReportPlayAllButtonVisibility;
- (id)shufflePlayEndpoint;
- (_Bool)handleUpsellResponderEvent:(id)arg1;
- (void)setPlaylistHeaderBannerThumbnail:(id)arg1 maxHeightRatio:(double)arg2;
- (void)didTapEditPlaylist:(id)arg1;
- (void)didTapDeletePlaylist;
- (void)didTapShuffle:(id)arg1;
- (void)didTapInfoPlaylist:(id)arg1;
- (id)playlistHeaderView;
- (void)didTapDisclosureButton:(id)arg1;
- (void)didTapSecondaryButton:(id)arg1;
- (void)didTapPrimaryButton:(id)arg1;
- (void)didTapOfflinePlaylist:(id)arg1;
- (void)didTapSharePlaylist:(id)arg1;
- (void)updateSavedState:(_Bool)arg1;
- (void)didTapSavePlaylist:(id)arg1;
- (void)didTapSyncOfflinePlaylist;
- (void)didTapQueuePlaylist:(id)arg1;
- (void)didTapPlayAll:(id)arg1;
- (void)resetPlayAllAndShuffleFromUpdate:(_Bool)arg1;
- (void)updateProgressWithLastVideoProgress:(double)arg1;
- (void)updateOfflinePlaylistStatus;
- (void)refreshOfflinePlaylistHeader;
- (void)updateThemeColor:(id)arg1;
- (void)setOfflinePlaylistStatus:(int)arg1 pendingVideoCount:(unsigned long long)arg2;
- (void)initializeCurrentVideoDownloadProgress;
- (void)initializeDownloadIndicatorProgress;
- (void)updatePlaylistNotification;
- (void)updateNavBarShadow;
- (void)navigateBack;
- (void)updateNavBarTint;
- (_Bool)isSplitPane;
- (void)prepareViewAppearance;
- (void)dropdownButtonDidSelectOption:(id)arg1;
- (void)playlistHeaderNeedsResize;
- (void)thumbnailController:(id)arg1 imageLoadDidFailWithError:(id)arg2;
- (void)thumbnailController:(id)arg1 didLoadImage:(id)arg2;
- (void)didModifyPlaylistNotificationPreferenceWithResponse:(id)arg1;
- (void)didDeletePlaylist:(id)arg1;
- (void)didChangePlaylistLikeStatus:(int)arg1 withID:(id)arg2;
- (void)didUpdatePlaylistHeader:(id)arg1;
- (void)didAddVideoID:(id)arg1 toPlaylistID:(id)arg2;
- (void)updatePlaylistHeaderViewWithMDXActive:(_Bool)arg1;
- (void)MDXSessionManager:(id)arg1 didEndSession:(id)arg2 withError:(id)arg3;
- (void)MDXSessionManager:(id)arg1 didFailToStartSession:(id)arg2 withError:(id)arg3;
- (void)MDXSessionManager:(id)arg1 willStartSession:(id)arg2;
- (void)downloadDidCompleteWithVideoID:(id)arg1 pinTypes:(int)arg2;
- (void)downloadDidProgressWithVideoID:(id)arg1 percentageDownloaded:(double)arg2;
- (void)didPressNotificationToggleButton;
- (void)didDeleteVideoFromPlaylistID:(id)arg1;
- (void)didAddVideoToPlaylistID:(id)arg1;
- (void)didDeleteOfflinePlaylistWithPlaylistID:(id)arg1;
- (void)downloadDidPauseWithPlaylistID:(id)arg1;
- (void)downloadDidCompleteWithPlaylistID:(id)arg1;
- (void)downloadDidProgressWithPlaylistID:(id)arg1 completedVideos:(unsigned long long)arg2 totalVideos:(unsigned long long)arg3;
- (void)didSaveMetadataWithPlaylistID:(id)arg1;
- (void)downloadDidStartWithVideoID:(id)arg1;
- (void)didCompleteOfflineRefreshRequest:(id)arg1 withRefreshResponse:(id)arg2 error:(id)arg3;
- (void)didMakeOfflineRefreshRequest:(id)arg1;
- (void)willMakeRequest:(id)arg1;
- (_Bool)scrollToModelMatchingBlock:(CDUnknownBlockType)arg1 animated:(_Bool)arg2;
- (void)loadWithModel:(id)arg1;
- (void)themeColorDidChange:(id)arg1 titleColor:(id)arg2 iconColor:(id)arg3 animated:(_Bool)arg4;
- (_Bool)isAttachedToPage;
- (void)viewWillLayoutSubviews;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)loadView;
- (id)initWithParentResponder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) NSString *overrideStyleContext;
@property(readonly) Class superclass;
@property(nonatomic) _Bool useDefaultModelWhenEmpty;

@end

