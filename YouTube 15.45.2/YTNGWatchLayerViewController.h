//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Module_Framework/YTMultiSizeViewController.h>

#import "YTGraftingViewController-Protocol.h"
#import "YTHintControllerObserver-Protocol.h"
#import "YTLayoutObserver-Protocol.h"
#import "YTModalPlaybackChangeResponderProvider-Protocol.h"
#import "YTNGWatchFlowViewControllerDelegate-Protocol.h"
#import "YTNGWatchLayerViewAnimationDelegate-Protocol.h"
#import "YTNGWatchMiniBarViewControllerDelegate-Protocol.h"
#import "YTNGWatchQueueObserver-Protocol.h"
#import "YTNGWatchUIStateResponderProvider-Protocol.h"
#import "YTPageStyleProvider-Protocol.h"
#import "YTQueuePanelResponderProvider-Protocol.h"
#import "YTResponder-Protocol.h"
#import "YTSystemNotificationsObserver-Protocol.h"
#import "YTVolumeBarViewDelegate-Protocol.h"
#import "YTWatchViewControllerProtocol-Protocol.h"

@class GIMMe, MDXView, NSString, UIViewController, YTFullscreenDismissAnimator, YTFullscreenPresentAnimator, YTICommand, YTIWatchNextResponse, YTInteractionLoggingProxyButton, YTNGWatchContainerViewController, YTNGWatchFlowViewController, YTNGWatchFullscreenViewController, YTNGWatchLayerView, YTNGWatchMiniBarViewController, YTNGWatchQueueSingleItemManager, YTPageStyleController, YTTransitionManager, YTWatchTransition;
@protocol YTLayoutStyle, YTNGWatchQueue, YTResponder, YTResponder><YTNGWatchFlexyUIDelegate><YTNGWatchLayerViewExpansionObserver, YTServices, YTVideoPlayerOverlayConfig, YTWatchPlayerViewControllerDelegate;

@interface YTNGWatchLayerViewController : YTMultiSizeViewController <YTHintControllerObserver, YTLayoutObserver, YTNGWatchFlowViewControllerDelegate, YTNGWatchLayerViewAnimationDelegate, YTPageStyleProvider, YTQueuePanelResponderProvider, YTSystemNotificationsObserver, YTGraftingViewController, YTModalPlaybackChangeResponderProvider, YTNGWatchMiniBarViewControllerDelegate, YTNGWatchQueueObserver, YTNGWatchUIStateResponderProvider, YTResponder, YTVolumeBarViewDelegate, YTWatchViewControllerProtocol>
{
    YTPageStyleController *_pageStyleController;
    YTNGWatchFullscreenViewController *_fullscreenViewController;
    YTNGWatchContainerViewController *_watchContainerViewController;
    YTIWatchNextResponse *_lastWatchNextResponse;
    id <YTLayoutStyle> _layoutStyle;
    id <YTServices> _services;
    id <YTVideoPlayerOverlayConfig> _videoPlayerOverlayConfig;
    YTNGWatchQueueSingleItemManager *_watchQueueManager;
    YTTransitionManager *_fullscreenTransitionManager;
    long long _playerViewControllerIndex;
    _Bool _shouldShowStatusBar;
    YTICommand *_watchTransitionNavigationEndpoint;
    _Bool _applicationIsInactive;
    YTFullscreenDismissAnimator *_fullscreenDismissAnimator;
    YTFullscreenPresentAnimator *_fullscreenPresentAnimator;
    YTInteractionLoggingProxyButton *_miniPlayerDismissLoggingButton;
    YTInteractionLoggingProxyButton *_miniPlayerExpandLoggingButton;
    YTInteractionLoggingProxyButton *_fullscreenOpenByRotateButton;
    YTInteractionLoggingProxyButton *_watchMinimizeLoggingButton;
    int _miniPlayerDismissLoggingButtonGestureType;
    int _miniPlayerExpandLoggingButtonGestureType;
    int _watchMinimizeLoggingButtonGestureType;
    double _lastWatchMediaTime;
    UIViewController<YTResponder><YTNGWatchFlexyUIDelegate><YTNGWatchLayerViewExpansionObserver> *_queuePanelController;
    YTWatchTransition *_storedModalWatchTransition;
    _Bool _isResettingOrientationAfterFullscreenExit;
    _Bool currentlyPresentingFullscreen;
    _Bool shouldUpdateWatchNextResponseLayoutOnAppearance;
    _Bool playlistPanelExpanded;
    _Bool _hideWatchOnCollapse;
    _Bool _currentlyCastingScreen;
    id <YTResponder> _parentResponder;
    YTWatchTransition *_watchTransition;
    GIMMe *_gimme;
    long long _watchViewLayout;
    UIViewController<YTWatchPlayerViewControllerDelegate> *_playerViewController;
    id <YTNGWatchQueue> _watchQueue;
    MDXView *_MDXView;
    YTNGWatchMiniBarViewController *_miniBarViewController;
    YTNGWatchFlowViewController *_watchFlowViewController;
}

- (void).cxx_destruct;
@property(retain, nonatomic) YTNGWatchFlowViewController *watchFlowViewController; // @synthesize watchFlowViewController=_watchFlowViewController;
@property(readonly, nonatomic) YTNGWatchMiniBarViewController *miniBarViewController; // @synthesize miniBarViewController=_miniBarViewController;
@property(nonatomic) __weak MDXView *MDXView; // @synthesize MDXView=_MDXView;
@property(readonly, nonatomic) id <YTNGWatchQueue> watchQueue; // @synthesize watchQueue=_watchQueue;
@property(nonatomic, getter=isCurrentlyCastingScreen) _Bool currentlyCastingScreen; // @synthesize currentlyCastingScreen=_currentlyCastingScreen;
@property(nonatomic) _Bool hideWatchOnCollapse; // @synthesize hideWatchOnCollapse=_hideWatchOnCollapse;
@property(readonly, nonatomic) __weak UIViewController<YTWatchPlayerViewControllerDelegate> *playerViewController; // @synthesize playerViewController=_playerViewController;
@property(readonly, nonatomic) long long watchViewLayout; // @synthesize watchViewLayout=_watchViewLayout;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(retain, nonatomic) YTWatchTransition *watchTransition; // @synthesize watchTransition=_watchTransition;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
@property(nonatomic, getter=isPlaylistPanelExpanded) _Bool playlistPanelExpanded; // @synthesize playlistPanelExpanded;
@property(nonatomic) _Bool shouldUpdateWatchNextResponseLayoutOnAppearance; // @synthesize shouldUpdateWatchNextResponseLayoutOnAppearance;
@property(nonatomic, getter=isCurrentlyPresentingFullscreen) _Bool currentlyPresentingFullscreen; // @synthesize currentlyPresentingFullscreen;
- (struct CGRect)currentWatchPageFrame;
- (double)currentPlayerHeight;
- (_Bool)shouldPreActivateExpandedWatchPageForTransition:(id)arg1;
- (void)NGWatchMiniBarAppBottomOffsetDidChange:(double)arg1;
@property(readonly, nonatomic) long long pageStyle;
- (CDUnknownBlockType)clientDataBlockForInteractionType:(unsigned long long)arg1;
- (id)navEndpoint;
- (void)hideWatchAndClearQueue:(_Bool)arg1;
- (_Bool)isPlaybackBackgroundable;
- (_Bool)isWatchFullScreen;
- (_Bool)isWatchExpanded;
- (_Bool)isWatchHidden;
- (_Bool)isCollapsed;
- (id)focusedViewController;
- (_Bool)shouldReloadVideoForWatchTransition:(id)arg1;
- (void)handleRemoteControlEvent:(long long)arg1;
- (void)reload;
- (void)prepareForWatchTransition:(id)arg1;
- (void)clearNavEndpoint;
- (double)headerHeight;
- (double)flexiblePlayerHeight;
- (id)watchContainerViewController;
- (long long)currentWatchViewLayout;
- (void)didAddWatchFlowCollapseRecognizer:(id)arg1;
- (void)didCancelCollapseOrExpandWithCompletion:(CDUnknownBlockType)arg1;
- (void)didCollapseWatchFlowWithGestureType:(int)arg1;
- (void)didExpandWatchFlowWithGestureType:(int)arg1;
- (void)willCollapseWatchFlow;
- (void)willExpandWatchFlow;
- (void)didHandleGesture:(id)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)watchFlowDismissalPreAnimationBlock;
- (void)watchFlowPresentationPreAnimationBlock;
- (id)playerSnapshotView;
- (void)reattachLoggingButtonsIfNecessary;
- (void)updateLoggingForLayout:(long long)arg1;
- (void)clearQueue;
- (void)initializeFullScreenTransition;
- (void)setupWatchPageTransitions;
- (_Bool)canCollapseWatchFlow;
- (_Bool)canExpandWatchFlow;
- (_Bool)canDismissFullScreen;
- (_Bool)canPresentFullScreen;
- (_Bool)shouldDismissFullScreen;
- (_Bool)shouldPresentFullScreen;
- (void)collapseWatchFlowWithCompletion:(CDUnknownBlockType)arg1;
- (void)expandWatchFlowWithCompletion:(CDUnknownBlockType)arg1;
- (void)dismissFullScreenAnimated:(_Bool)arg1 miniBarTransition:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)presentFullScreenAnimated:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)handlePossibleInAppReviewPrompt;
- (void)voiceSearchDialogDidPresent:(id)arg1;
- (void)showMiniBarSwipeDownHint;
- (void)activateWatchPage;
- (void)activateMiniBar;
- (double)watchFlowStatusBarHeight;
- (void)minimizeWatchPage;
- (void)performKeyCommandAction:(unsigned long long)arg1;
- (void)didCompleteFullscreenDismissAnimation;
- (_Bool)shouldLeadAlignToasts;
- (void)setStatusBarBackgroundVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (double)statusBarHeight;
- (void)collapseWatchWithCompletion:(CDUnknownBlockType)arg1;
- (void)openMinibarFromPlayerReferenceContainer:(id)arg1;
- (void)expandWatchFromPlayerReferenceContainer:(id)arg1;
- (void)moveMiniBarToSelf;
- (void)modalPlaybackDidEnd;
- (void)modalPlaybackWillBegin;
- (_Bool)isPlayerAlignmentNonStandard;
- (void)didChangeMiniPlayerLayout:(long long)arg1;
- (void)expandWatch;
- (void)didDismissMiniBar;
- (void)willDismissMiniBarWithGestureType:(int)arg1;
- (id)watchTransitionNavigationEndpoint;
- (void)appWillResignActive:(id)arg1;
- (void)appDidBecomeActive:(id)arg1;
- (void)appDidChangeDeviceOrientation;
- (void)newScreenLoggingStarted;
- (void)updateCurrentWatchTransitionNavigationEndpoint:(id)arg1;
- (_Bool)isFullScreen;
- (void)showSmallScreenWithCompletion:(CDUnknownBlockType)arg1;
- (void)showFullScreen;
- (void)didClearWatchQueue;
- (void)didSetPlayerViewController:(id)arg1 forIndex:(long long)arg2;
- (void)didSetCurrentIndexFromIndex:(long long)arg1 toIndex:(long long)arg2 withInPlaceUpdate:(_Bool)arg3;
- (void)playbackControllerCurrentVideoMediaTimeDidChange:(double)arg1;
- (_Bool)volumeBarViewIsConnectedToMDX:(id)arg1;
- (_Bool)volumeBarViewCanDisplayVolumeBar:(id)arg1;
- (void)didDismissHintWithID:(id)arg1;
- (void)willAnimateTransitionFromSize:(struct CGSize)arg1 toSize:(struct CGSize)arg2;
- (_Bool)prefersStatusBarHidden;
- (long long)preferredStatusBarStyle;
- (_Bool)shouldControlStatusBarStyle;
- (void)loadView;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (id)currentWatchViewController;
@property(readonly, nonatomic) YTNGWatchLayerView *watchView;
- (void)setWatchViewLayout:(long long)arg1;
- (void)notifyWatchViewBeganTransitionToLayout:(long long)arg1;
- (id)initWithParentResponder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

