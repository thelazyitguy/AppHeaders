//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Module_Framework/MDXSessionManagerObserver-Protocol.h>
#import <Module_Framework/MDXSessionObserver-Protocol.h>
#import <Module_Framework/YTAdVideoPlayerOverlayDelegate-Protocol.h>
#import <Module_Framework/YTCorePlaybackController-Protocol.h>
#import <Module_Framework/YTSingleVideoCurrentTimeObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoErrorObserver-Protocol.h>
#import <Module_Framework/YTSingleVideoMediaStateObserver-Protocol.h>

@class AVAudioPlayer, GIMMe, MDXSession, MDXSingleVideoController, NSError, NSString, YTCPN, YTPlaybackConfig, YTPlaybackData, YTPlaybackLockScreenController, YTPlayerResponse, YTPlayerTransition, YTPlayerView, YTSingleVideoTime;
@protocol YTCorePlaybackControllerDelegate, YTPlaybackControllerUIDelegate, YTPlayerHeartbeatEventCenter, YTPlayerOverlayFactory, YTResponder, YTSingleVideoObservable;

@interface MDXPlaybackController : NSObject <MDXSessionObserver, MDXSessionManagerObserver, YTAdVideoPlayerOverlayDelegate, YTSingleVideoCurrentTimeObserver, YTSingleVideoErrorObserver, YTSingleVideoMediaStateObserver, YTCorePlaybackController>
{
    MDXSession *_session;
    YTPlayerResponse *_contentVideoPlayerResponse;
    unsigned long long _playerRequestID;
    YTSingleVideoTime *_timeBeforeDisconnect;
    AVAudioPlayer *_backgroundPlayer;
    YTPlaybackLockScreenController *_lockScreenController;
    id <YTCorePlaybackControllerDelegate> _delegate;
    MDXSingleVideoController *_contentVideoController;
    MDXSingleVideoController *_adVideoController;
    id <YTPlayerOverlayFactory> _overlayFactory;
    int _playerViewLayout;
    YTPlayerView *_playerView;
    double _previousMediaTime;
    int _state;
    NSString *_contentVideoID;
    id <YTResponder> _parentResponder;
    id <YTPlaybackControllerUIDelegate> _UIDelegate;
    NSError *_error;
    YTPlaybackConfig *_playbackConfig;
    YTPlayerTransition *_playerTransition;
    GIMMe *_gimme;
    MDXSingleVideoController *_activeVideoController;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) MDXSingleVideoController *activeVideoController; // @synthesize activeVideoController=_activeVideoController;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(readonly, nonatomic) YTPlayerTransition *playerTransition; // @synthesize playerTransition=_playerTransition;
@property(readonly, nonatomic) YTPlaybackConfig *playbackConfig; // @synthesize playbackConfig=_playbackConfig;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) __weak id <YTPlaybackControllerUIDelegate> UIDelegate; // @synthesize UIDelegate=_UIDelegate;
@property(readonly, nonatomic) int state; // @synthesize state=_state;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
@property(readonly, nonatomic) NSString *contentVideoID; // @synthesize contentVideoID=_contentVideoID;
- (void)populateAdOverlay:(id)arg1 withWatchNextResponse:(id)arg2;
- (_Bool)isCurrentVideoLoaded;
- (void)startAdVideoControllerWithPlayerResponse:(id)arg1;
- (void)startContentVideoControllerWithPlayerResponse:(id)arg1;
- (void)notifyDidFinishPlayback;
- (void)notifyDidActivateVideo:(id)arg1 withPlaybackData:(id)arg2;
- (void)notifyDidLoadContentPlaybackData:(id)arg1;
- (void)setState:(int)arg1;
- (void)playerCannotPlayThisVideoWithError:(id)arg1;
- (void)playerCannotPlayThisVideoWithPlayabilityStatus:(id)arg1;
- (void)playerCannotPlayThisVideo;
- (_Bool)isPlaybackActive;
- (void)disableLockScreenController;
- (void)updateLockScreenController;
- (void)setActiveVideoController:(id)arg1;
- (void)destroyBackgroundPlayer;
- (void)initializeBackgroundPlayer;
- (void)initializeBackgroundPlayerOnMainThread;
- (_Bool)lockScreenControlsEnabled;
- (void)contentCheckControllerResponseReceived:(id)arg1 startPlayback:(_Bool)arg2;
- (void)setPlayerResponse:(id)arg1 startPlayback:(_Bool)arg2;
- (double)currentVideoTotalMediaTime;
- (void)handleSessionDisconnect;
- (void)setMuted:(_Bool)arg1;
- (_Bool)isCurrentAdBreakPreroll;
- (void)adDidFinish;
- (void)didPressAdVisitSiteWithTouchPoint:(struct CGPoint)arg1;
- (void)didPressSkipAdWithTouchPoint:(struct CGPoint)arg1;
- (void)didPressAdThumbnail;
- (void)didShowSkipAd;
- (id)contentVideoTitle;
- (id)contentVideoThumbnails;
- (int)playerViewLayout;
- (void)setPlayerViewLayout:(int)arg1;
- (id)selectedAudioTrack;
- (void)didReceiveAdPlayerResponseForMDXSession:(id)arg1;
- (void)didReceiveAdWatchNextResponseForMDXSession:(id)arg1;
- (void)didStartAdSessionForMDXSession:(id)arg1;
- (void)MDXSessionManager:(id)arg1 didEndSession:(id)arg2 withError:(id)arg3;
- (void)MDXSessionManager:(id)arg1 didFailToStartSession:(id)arg2 withError:(id)arg3;
- (void)MDXSessionManager:(id)arg1 willEndSession:(id)arg2;
- (void)MDXSessionManager:(id)arg1 willStartSession:(id)arg2;
- (void)singleVideo:(id)arg1 currentVideoTimeDidChange:(id)arg2;
- (void)singleVideo:(id)arg1 didFailWithError:(id)arg2;
- (void)singleVideo:(id)arg1 mediaStateDidChangeFromState:(long long)arg2 toState:(long long)arg3;
- (id)lastKnownAdPlayerMacroState;
- (id)contentPlayerMacroState;
- (id)currentAd;
- (void)setUpcomingPlayerTransition:(id)arg1 playbackConfig:(id)arg2;
- (void)didSetNerdStatsEnabled:(_Bool)arg1;
@property(readonly, nonatomic) id <YTPlayerHeartbeatEventCenter> heartbeatEventCenter;
- (void)didPressCompanionAd;
- (void)removeContentCuepointObserver:(id)arg1;
- (void)addContentCuepointObserver:(id)arg1;
- (void)recordClientIssueFeedbackEvent;
- (void)recordSpeedyGAlert;
@property(nonatomic, getter=isExternalPlaybackAllowed) _Bool externalPlaybackAllowed;
@property(nonatomic, getter=isVRModeActive) _Bool VRModeActive;
- (void)setOverlayFactory:(id)arg1;
- (void)switchToInlinePlayback:(_Bool)arg1;
@property(readonly, nonatomic, getter=isExternalPlaybackActive) _Bool externalPlaybackActive;
- (_Bool)isInlinePlaybackActive;
@property(readonly, nonatomic) _Bool isDAIEnabledForCurrentPlayback;
@property(readonly, nonatomic) _Bool isPlayingAdIntro;
@property(readonly, nonatomic) _Bool isPlayingAdSurvey;
- (void)didPressSkipAd;
- (void)resetWithCurrentPlayerTransition;
- (void)resetToLoading;
- (id)acquireAdOverlay;
- (void)startAdOverlay;
@property(readonly, nonatomic) long long playerState;
@property(readonly, nonatomic) YTSingleVideoTime *contentVideoCurrentTime;
@property(readonly, nonatomic) YTSingleVideoTime *currentVideoTime;
@property(readonly, nonatomic) _Bool currentVideoIsLocal;
@property(readonly, nonatomic) _Bool isPlayingAd;
@property(readonly, nonatomic) NSString *currentVideoID;
@property(readonly, nonatomic) YTCPN *contentVideoCPN;
- (void)setAccountLinkState:(id)arg1;
- (void)setClipID:(id)arg1;
- (void)setBlackoutActive:(_Bool)arg1;
- (void)setUserAudioOnlyModeActive:(_Bool)arg1;
- (void)setLiveCaptionsVerticalRatio:(double)arg1;
- (void)setVideoFormatConstraint:(id)arg1;
- (void)resumePlayback;
- (void)suspendPlayback;
- (void)seekToProductionTime:(double)arg1;
- (void)prepareToLoadWithPlayerTransition:(id)arg1 expectedLayout:(id)arg2;
@property(nonatomic, getter=isActivePlayback) _Bool activePlayback;
- (void)enableCaptionsIfAvailableWithUserAction:(_Bool)arg1;
- (void)setPlaybackRate:(float)arg1;
- (void)setVolume:(float)arg1;
- (void)setActiveCaptionTrack:(id)arg1;
- (void)setAudioFormatConstraint:(id)arg1;
- (void)seekToEnd;
- (id)playbackDebugData;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)replay;
- (void)pause;
- (void)play;
- (void)reset;
- (void)loadWithPlayerTransition:(id)arg1 playbackConfig:(id)arg2;
@property(readonly, nonatomic) _Bool handlesAutoplayingInternally;
@property(readonly, nonatomic) YTPlaybackData *contentPlaybackData;
@property(readonly, nonatomic) _Bool isPlaybackFinished;
@property(readonly, nonatomic, getter=isMDXActive) _Bool MDXActive;
@property(readonly, nonatomic) NSString *remoteScreenName;
@property(readonly, nonatomic) id <YTSingleVideoObservable> contentVideo;
@property(readonly, nonatomic) id <YTSingleVideoObservable> activeVideo;
- (id)initWithParentResponder:(id)arg1 overlayFactory:(id)arg2 playbackControllerDelegate:(id)arg3 playerView:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

