//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDate, NSString, VASConfiguration, VASScheduler;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface VASTask : NSObject
{
    _Bool _completed;
    _Bool _paused;
    _Bool _wallTime;
    _Bool _repeating;
    NSString *_identifier;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_source> *_timer;
    VASScheduler *_scheduler;
    NSDate *_started;
    NSDate *_fireDate;
    double _interval;
    double _elapsed;
    VASConfiguration *_configuration;
    CDUnknownBlockType _taskBlock;
}

+ (id)logger;
- (void).cxx_destruct;
@property(copy, nonatomic) CDUnknownBlockType taskBlock; // @synthesize taskBlock=_taskBlock;
@property(nonatomic) _Bool repeating; // @synthesize repeating=_repeating;
@property(nonatomic) _Bool wallTime; // @synthesize wallTime=_wallTime;
@property(readonly, nonatomic) VASConfiguration *configuration; // @synthesize configuration=_configuration;
@property(nonatomic) double elapsed; // @synthesize elapsed=_elapsed;
@property(nonatomic) double interval; // @synthesize interval=_interval;
@property(retain, nonatomic) NSDate *fireDate; // @synthesize fireDate=_fireDate;
@property(retain, nonatomic) NSDate *started; // @synthesize started=_started;
@property(retain, nonatomic) VASScheduler *scheduler; // @synthesize scheduler=_scheduler;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *timer; // @synthesize timer=_timer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property _Bool paused; // @synthesize paused=_paused;
@property _Bool completed; // @synthesize completed=_completed;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void)queue_resume;
- (void)queue_pause;
- (void)queue_cancel;
- (id)description;
- (void)startTaskAfterSeconds:(double)arg1 wallTime:(_Bool)arg2 interval:(double)arg3 repeating:(_Bool)arg4 task:(CDUnknownBlockType)arg5;
- (void)startWithInterval:(double)arg1 afterDelay:(double)arg2 wallTime:(_Bool)arg3 task:(CDUnknownBlockType)arg4;
- (void)startWithFireDate:(id)arg1 task:(CDUnknownBlockType)arg2;
- (void)resume;
- (void)pause;
- (void)cancel;
- (id)initTask:(id)arg1 withScheduler:(id)arg2;

@end

