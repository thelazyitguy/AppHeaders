//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <NavigationFramework/NSCopying-Protocol.h>
#import <NavigationFramework/NSMutableCopying-Protocol.h>
#import <NavigationFramework/NSSecureCoding-Protocol.h>

@class GMSInt32Array, NSData, NSDate, NSNumber, NSString;

@interface GMSDSearchOptions : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
{
    _Bool _preferIcFare;
    _Bool _avoidHighways;
    _Bool _avoidTolls;
    _Bool _allowCancelledTrips;
    _Bool _ignoreAnchoredTime;
    _Bool _avoidFerries;
    _Bool _includeEyesFreeWalkingGuidance;
    _Bool _walkAsDriveAlternative;
    int _transitVehicleTypeMask;
    int _licensePlateRestriction;
    int _maxTrips;
    long long _travelModeFiltering;
    long long _routeScoring;
    GMSInt32Array *_supportedPartnerAppIDs;
    long long _personalizationLevel;
    long long _transitTripAggregation;
    long long _realTimePolicy;
    long long _tripOrder;
    double _targetDistance;
    NSDate *_time;
    long long _timeAnchoring;
    NSString *_vehicleRerouteToken;
    NSString *_pickUpStationRerouteToken;
    NSString *_dropOffStationRerouteToken;
    NSString *_preferredProviderToken;
    unsigned long long _supportedMultimodalTripTypes;
    unsigned long long _requestedMultimodalTripTypes;
    NSData *_precomputedRouteToken;
    NSNumber *_reachabilityDriveArrivalBufferSeconds;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)japanTransitOptionIsActive;
+ (void)setDisableLimitedJapanTransitVehicleTypes:(_Bool)arg1;
+ (_Bool)disableLimitedJapanTransitVehicleTypes;
+ (id)validRouteScoringValues;
+ (id)validMultimodalTripTypes;
+ (id)validTransitVehicleTypes;
+ (int)transitVehicleTypeToProtobuf:(int)arg1;
+ (void)load;
- (void).cxx_destruct;
@property(nonatomic) _Bool walkAsDriveAlternative; // @synthesize walkAsDriveAlternative=_walkAsDriveAlternative;
@property(retain, nonatomic) NSNumber *reachabilityDriveArrivalBufferSeconds; // @synthesize reachabilityDriveArrivalBufferSeconds=_reachabilityDriveArrivalBufferSeconds;
@property(copy, nonatomic) NSData *precomputedRouteToken; // @synthesize precomputedRouteToken=_precomputedRouteToken;
@property(nonatomic) unsigned long long requestedMultimodalTripTypes; // @synthesize requestedMultimodalTripTypes=_requestedMultimodalTripTypes;
@property(nonatomic) unsigned long long supportedMultimodalTripTypes; // @synthesize supportedMultimodalTripTypes=_supportedMultimodalTripTypes;
@property(copy, nonatomic) NSString *preferredProviderToken; // @synthesize preferredProviderToken=_preferredProviderToken;
@property(copy, nonatomic) NSString *dropOffStationRerouteToken; // @synthesize dropOffStationRerouteToken=_dropOffStationRerouteToken;
@property(copy, nonatomic) NSString *pickUpStationRerouteToken; // @synthesize pickUpStationRerouteToken=_pickUpStationRerouteToken;
@property(copy, nonatomic) NSString *vehicleRerouteToken; // @synthesize vehicleRerouteToken=_vehicleRerouteToken;
@property(nonatomic) _Bool includeEyesFreeWalkingGuidance; // @synthesize includeEyesFreeWalkingGuidance=_includeEyesFreeWalkingGuidance;
@property(nonatomic) long long timeAnchoring; // @synthesize timeAnchoring=_timeAnchoring;
@property(copy, nonatomic) NSDate *time; // @synthesize time=_time;
@property(nonatomic) _Bool avoidFerries; // @synthesize avoidFerries=_avoidFerries;
@property(nonatomic) double targetDistance; // @synthesize targetDistance=_targetDistance;
@property(nonatomic) long long tripOrder; // @synthesize tripOrder=_tripOrder;
@property(nonatomic) int maxTrips; // @synthesize maxTrips=_maxTrips;
@property(nonatomic) _Bool ignoreAnchoredTime; // @synthesize ignoreAnchoredTime=_ignoreAnchoredTime;
@property(nonatomic) _Bool allowCancelledTrips; // @synthesize allowCancelledTrips=_allowCancelledTrips;
@property(nonatomic) _Bool avoidTolls; // @synthesize avoidTolls=_avoidTolls;
@property(nonatomic) _Bool avoidHighways; // @synthesize avoidHighways=_avoidHighways;
@property(nonatomic) long long realTimePolicy; // @synthesize realTimePolicy=_realTimePolicy;
@property(nonatomic) long long transitTripAggregation; // @synthesize transitTripAggregation=_transitTripAggregation;
@property(nonatomic) long long personalizationLevel; // @synthesize personalizationLevel=_personalizationLevel;
@property(copy, nonatomic) GMSInt32Array *supportedPartnerAppIDs; // @synthesize supportedPartnerAppIDs=_supportedPartnerAppIDs;
@property(nonatomic) _Bool preferIcFare; // @synthesize preferIcFare=_preferIcFare;
@property(nonatomic) int licensePlateRestriction; // @synthesize licensePlateRestriction=_licensePlateRestriction;
@property(nonatomic) long long routeScoring; // @synthesize routeScoring=_routeScoring;
@property(nonatomic) int transitVehicleTypeMask; // @synthesize transitVehicleTypeMask=_transitVehicleTypeMask;
@property(nonatomic) long long travelModeFiltering; // @synthesize travelModeFiltering=_travelModeFiltering;
- (id)savedOptionsAllowingTransitOptions:(_Bool)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithSupportedPartnerApps:(id)arg1 preferredProviderToken:(id)arg2;
- (id)copyWithSavedOptions:(id)arg1;
- (id)optionsProtoWithTravelMode:(int)arg1;
- (id)optionsProtoForDirectionsSearchWithTravelMode:(int)arg1;
- (id)optionsProtoForRerouteWithTravelMode:(int)arg1 rerouteToken:(id)arg2 trafficReportHistoryToken:(id)arg3;
- (id)optionsProtoForTripUpdateWithTravelMode:(int)arg1 tripUpdateToken:(id)arg2 distanceFromStartOfServerRouteMeters:(double)arg3 trafficReportHistoryToken:(id)arg4;
- (id)description;
- (void)setNilValueForKey:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithSupportedPartnerAppIDs:(id)arg1 optionsProto:(id)arg2 localTimeZone:(id)arg3;
- (id)initWithOptionsProto:(id)arg1;
- (id)initWithSupportedPartnerAppIDs:(id)arg1 savedOptionsData:(id)arg2 preferredRideProviderToken:(id)arg3 travelModeFiltering:(long long)arg4;
- (id)initWithOptions:(id)arg1;
- (id)initWithSupportedPartnerAppIDs:(id)arg1;

@end

