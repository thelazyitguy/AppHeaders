//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <CoreData/NSIncrementalStore.h>

@class NSMutableDictionary;

@interface SFCEncryptedStore : NSIncrementalStore
{
    struct sqlite3 *database;
    NSMutableDictionary *objectIDCache;
    NSMutableDictionary *nodeCache;
    NSMutableDictionary *objectCountCache;
    NSMutableDictionary *entityTypeCache;
}

+ (void)load;
+ (id)makeStore:(id)arg1 passcode:(id)arg2 error:(id *)arg3;
+ (id)makeStoreWithStructOptions:(struct _options *)arg1 managedObjectModel:(id)arg2 error:(id *)arg3;
+ (id)makeStoreWithOptions:(id)arg1 managedObjectModel:(id)arg2 error:(id *)arg3;
+ (id)makeStore:(id)arg1 passcode:(id)arg2;
+ (id)makeStoreWithStructOptions:(struct _options *)arg1 managedObjectModel:(id)arg2;
+ (id)makeStoreWithOptions:(id)arg1 managedObjectModel:(id)arg2;
- (void).cxx_destruct;
- (id)columnForFunctionExpressionDescription:(id)arg1;
- (id)columnForExpressionDescription:(id)arg1;
- (id)relationshipForEntity:(id)arg1 name:(id)arg2;
- (id)joinedTableNameForComponents:(id)arg1 forRelationship:(_Bool)arg2;
- (id)foreignKeyColumnForRelationship:(id)arg1;
- (id)foreignKeyColumnForRelationshipName:(id)arg1;
- (void)parseExpression:(id)arg1 inPredicate:(id)arg2 inFetchRequest:(id)arg3 operator:(id)arg4 operand:(id *)arg5 bindings:(id *)arg6;
- (void)bindWhereClause:(id)arg1 toStatement:(struct sqlite3_stmt *)arg2;
- (id)recursiveWhereClauseWithFetchRequest:(id)arg1 predicate:(id)arg2;
- (id)whereClauseWithFetchRequest:(id)arg1;
- (id)expressionDescriptionTypeValue:(id)arg1 withReferenceNumber:(id)arg2;
- (id)valueForProperty:(id)arg1 inStatement:(struct sqlite3_stmt *)arg2 atIndex:(int)arg3;
- (void)bindProperty:(id)arg1 withValue:(id)arg2 forKey:(id)arg3 toStatement:(struct sqlite3_stmt *)arg4 atIndex:(int)arg5;
- (id)maximumObjectIDInTable:(id)arg1;
- (id)columnsClauseWithProperties:(id)arg1;
- (id)expressionDescriptionTypeString:(id)arg1;
- (_Bool)maybeAddJoinStatementsForKey:(id)arg1 toStatementArray:(id)arg2 withExistingStatementSet:(id)arg3 rootEntity:(id)arg4;
- (id)getJoinClause:(id)arg1 withPredicate:(id)arg2 initial:(_Bool)arg3 withStatements:(id)arg4;
- (id)getJoinClause:(id)arg1 withPredicate:(id)arg2 initial:(_Bool)arg3;
- (id)orderClause:(id)arg1 forEntity:(id)arg2;
- (struct sqlite3_stmt *)preparedStatementForQuery:(id)arg1;
- (id)rootForEntity:(id)arg1;
- (id)tableNameForEntity:(id)arg1;
- (_Bool)performInTransaction:(CDUnknownBlockType)arg1;
- (id)databaseError;
- (_Bool)hasTable:(_Bool *)arg1 withName:(id)arg2 error:(id *)arg3;
- (_Bool)hasRows:(id)arg1;
- (id)escapedString:(id)arg1 allowWildcards:(_Bool)arg2;
- (_Bool)handleDeletedRelationInSaveRequest:(id)arg1 error:(id *)arg2;
- (_Bool)handleDeletedObjectsInSaveRequest:(id)arg1 error:(id *)arg2;
- (_Bool)handleUpdatedRelationInSaveRequest:(id)arg1 forObject:(id)arg2 error:(id *)arg3;
- (_Bool)handleUpdatedObjectsInSaveRequest:(id)arg1 cache:(id)arg2 error:(id *)arg3;
- (int)nextOrderForColumnInRelationship:(id)arg1 forObject:(id)arg2 andSource:(_Bool)arg3;
- (_Bool)handleInsertedObjectsInSaveRequest:(id)arg1 error:(id *)arg2;
- (id)handleSaveChangesRequest:(id)arg1 error:(id *)arg2;
- (_Bool)relationships:(id)arg1 firstIDColumn:(id *)arg2 secondIDColumn:(id *)arg3;
- (_Bool)previousRelationships:(id)arg1 firstIDColumn:(id *)arg2 secondIDColumn:(id *)arg3 firstOrderColumn:(id *)arg4 secondOrderColumn:(id *)arg5;
- (_Bool)relationships:(id)arg1 firstIDColumn:(id *)arg2 secondIDColumn:(id *)arg3 firstOrderColumn:(id *)arg4 secondOrderColumn:(id *)arg5;
- (id)tableNameForPreviousRelationship:(id)arg1;
- (id)tableNameForRelationship:(id)arg1;
- (CDUnknownBlockType)fixedLocaleCaseInsensitiveComparator;
- (_Bool)alterRelationshipForSourceEntity:(id)arg1 destinationEntity:(id)arg2 withMapping:(id)arg3 error:(id *)arg4;
- (_Bool)createTableForRelationship:(id)arg1 error:(id *)arg2;
- (_Bool)alterTableForSourceEntity:(id)arg1 destinationEntity:(id)arg2 withMapping:(id)arg3 error:(id *)arg4;
- (_Bool)dropTableNamed:(id)arg1;
- (_Bool)dropTableForEntity:(id)arg1;
- (_Bool)dropIndicesForEntity:(id)arg1 error:(id *)arg2;
- (_Bool)createIndicesForEntity:(id)arg1 error:(id *)arg2;
- (_Bool)createTableForEntity:(id)arg1 error:(id *)arg2;
- (_Bool)entityNeedsEntityTypeColumn:(id)arg1;
- (id)columnNamesForEntity:(id)arg1 indexedOnly:(_Bool)arg2 quotedNames:(_Bool)arg3;
- (id)relationshipsForEntity:(id)arg1;
- (id)entityIdsForEntity:(id)arg1;
- (_Bool)initializeDatabase:(id *)arg1;
- (_Bool)migrateFromModel:(id)arg1 toModel:(id)arg2 error:(id *)arg3;
- (_Bool)configureDatabaseCacheSize;
- (_Bool)changeDatabasePassphrase:(id)arg1 toNewPassphrase:(id)arg2 error:(id *)arg3;
- (_Bool)validateDatabasePassphrase:(id)arg1 error:(id *)arg2;
- (_Bool)setDatabasePassphrase:(id)arg1 error:(id *)arg2;
- (_Bool)changeDatabasePassphrase:(id)arg1 error:(id *)arg2;
- (_Bool)checkDatabaseStatusWithError:(id *)arg1;
- (_Bool)configureDatabasePassphrase:(id *)arg1;
- (_Bool)saveMetadata;
- (_Bool)hasMetadataTable:(_Bool *)arg1 error:(id *)arg2;
- (_Bool)loadMetadata:(id *)arg1;
- (id)type;
- (void)managedObjectContextDidUnregisterObjectsWithIDs:(id)arg1;
- (void)managedObjectContextDidRegisterObjectsWithIDs:(id)arg1;
- (id)newValueForRelationship:(id)arg1 forObjectWithID:(id)arg2 withContext:(id)arg3 error:(id *)arg4;
- (id)newValuesForObjectWithID:(id)arg1 withContext:(id)arg2 error:(id *)arg3;
- (id)executeRequest:(id)arg1 withContext:(id)arg2 error:(id *)arg3;
- (id)obtainPermanentIDsForObjects:(id)arg1 error:(id *)arg2;
- (id)storeEntities;
- (void)dealloc;
- (id)initWithPersistentStoreCoordinator:(id)arg1 configurationName:(id)arg2 URL:(id)arg3 options:(id)arg4;

@end

